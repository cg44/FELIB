C***********************************************************************
C$SPLIT$ASLMS$*********************************************************
C***********************************************************************
      SUBROUTINE ASLMS(SYSM, ISYSM, ELM, IELM, JELM, STEER,
     *     ISTEER, DOFEL, DOFNOD, SIZE, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      ASSEMBLES THE CONTRIBUTION FROM AN ELEMENT TO THE
C      (DIAGONAL) SYSTEM MATRIX WHICH IS STORED AS A VECTOR.
C      THE 'LUMPED MASS' APPROXIMATION IS ASSUMED, THE DIAGONAL
C      ELEMENTS OF THE ELEMENT 'CONSISTENT MASS' MATRIX BEING
C      USED, SUITABLY BIASSED TO CONSERVE THE RELEVANT QUANTITY
C      (EG MASS) ON THE ELEMENT
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (CG) 
C      COMMENTED    31 OCT 1980 (KR)
C
C ARGUMENTS IN
C      ISYSM   DIMENSION OF VECTOR SYSM (.GE.TOTAL NUMBER OF
C              UNCONSTRAINED FREEDOMS)
C      ELM     ELEMENT MASS MATRIX OF DIMENSION (IELM,JELM).
C              ON ENTRY, ELM(I,I) SHOULD CONTAIN THE CONSISTENT
C              MASS APPROXIMATIONS FOR THE ELEMENT FOR
C              I=1(1)DOFEL
C      IELM    FIRST DIMENSION OF ELM (.GE.DOFEL)
C      JELM    SECOND DIMENSION OF ELM (.GE.DOFEL)
C      STEER   INTEGER VECTOR OF LENGTH ISTEER CONTAINING
C              FREEDOM NUMBERS ASSOCIATING ELEMENT MATRIX
C              CONTRIBUTIONS TO SYSTEM FREEDOM NUMBERS
C      ISTEER  LENGTH OF VECTOR STEER (.GE.DOFEL)
C      DOFEL   MAXIMUM NUMBER OF DEGREES OF FREEDOM ASSOCIATED
C              WITH THE ELEMENT TYPE
C      DOFNOD  NUMBER OF DEGREES OF FREEDOM PER NODE ON THE
C              ELEMENT
C      SIZE    IN 2D, AREA OF THE ELEMENT
C              IN 3D, VOLUME OF THE ELEMENT
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      SYSM    VECTOR OF LENGTH ISYSM CONTAINING THE DIAGONAL
C              ELEMENTS OF THE (DIAGONAL) SYSTEM MATRIX
C      ELM     ELEMENT 'MASS' MATRIX, OF DIMENSION (IELM,JELM).
C              ON EXIT, ELM(I,J) CONTAINS ZERO IF I.NE.J, AND
C              THE CALCULATED 'LUMPED MASS' VALUES IF I=J
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ASLMS(SYSM,ISYSM,ELM,IELM,JELM,STEER,ISTEER,
C    *     DOFEL,DOFNOD,SIZE,ITEST)
C***********************************************************************
C
      INTEGER DOFEL, DOFNOD, ERRMES, I, IELM, IERROR, ISTEER,
     *     ISYSM, ITEST, J, JELM, JTEST, STEER
      DOUBLE PRECISION ELM, SIZE, SRNAME, SYSM, X, ZERO
      DIMENSION ELM(IELM,JELM), STEER(ISTEER), SYSM(ISYSM)
      DATA SRNAME /8H ASLMS  /, ZERO /0.0D0/
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IELM.LT.DOFEL .OR. JELM.LT.DOFEL) IERROR = 2
      IF (ISTEER.LT.DOFEL) IERROR = 3
      IF (DOFEL.EQ.0 .OR. DOFNOD.EQ.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 X = 0.0D0
      DO 1020 I=1,DOFEL
         X = X + ELM(I,I)
 1020 CONTINUE
C     X = SIZE/X*(((DBLE(FLOAT(DOFNOD)))))
      X = SIZE/X*((((DBLE(FLOAT(DOFNOD))))))
      DO 1050 I=1,DOFEL
         DO 1040 J=1,DOFEL
            IF (I.EQ.J) GO TO 1030
            ELM(I,J) = ZERO
            GO TO 1040
 1030       ELM(I,J) = ELM(I,J)*X
 1040    CONTINUE
 1050 CONTINUE
      DO 1070 I=1,DOFEL
         J = STEER(I)
         IF (J.EQ.0) GO TO 1070
C
C     RANGE CHECKING ON STEERI AND STEERJ
C
         IF (JTEST.EQ.-1) GO TO 1060
         IERROR = 0
         IF (ISYSM.LT.J) IERROR = 4
         ITEST = ERRMES(JTEST,IERROR,SRNAME)
         IF (ITEST.NE.0) RETURN
C
 1060    SYSM(J) = SYSM(J) + ELM(I,I)
C
 1070 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$ASRHS$*********************************************************
C***********************************************************************
      SUBROUTINE ASRHS(RHS, IRHS, VALUE, IVALUE, STEER, ISTEER,
     *     DOFEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      THE ROUTINE ADDS INTO THE RIGHT-HAND SIDE OF A SYSTEM
C      THE VALUES CONTIANED IN AN ELEMENT VECTOR, THUS
C      FORMING THE RIGHT-HAND SIDE
C
C HISTORY
C
C      COPYRIGHT (C) 1981 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 2.0   1 JUL 1981 (CG) 
C      COMMENTED     1 JUL 1981 (CG)
C
C ARGUMENTS IN
C      RHS     THE RIGHT-HAND SIDE OF THE SYSTEM
C      IRHS    DIMENSION OF ARRAY RSH
C      VALUE   THE ELEMENT VECTOR OF THE CURRENT ELEMENT TO
C              BE ADDED INTO THE RIGHT-HAND SIDE
C      IVALE   DIMENSION OF ARRAY VALUE
C      STEER   THE STEERING VECTOR CONTAINING THE FREEDOM
C              NUMBERS OF THE FREEDOMS ASSOCIATED WITH THE
C              CURRENT ELEMENT IN THE LOCAL ORDER
C      ISTEER  DIMENSION OF ARRAY STEER
C      DOFEL   THE MAXIMUM NUMBER OF DEGREES OF FREEDOM ON
C              AN ELEMENT OF THE CURRENT TYPE
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C
C     SUBROUTINE ASRHS(RHS,IRHS,VALUE,IVALUE,STEER,ISTEER,
C    * DOFEL,ITEST)
C***********************************************************************
C
      INTEGER DOFEL, ERRMES, IERROR, IRHS, ISTEER, ITEST, IVALUE,
     *     JTEST, K, STEER, STEERI
      DOUBLE PRECISION RHS, SRNAME, VALUE
      DIMENSION RHS(IRHS), STEER(ISTEER), VALUE(IVALUE)
      DATA SRNAME /8H ASRHS  /
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (ISTEER.LT.DOFEL) IERROR = 3
      IF (IVALUE.LT.DOFEL) IERROR = 2
      IF (DOFEL.LE.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
C
C     MAIN LOOPS
C
 1010 IF (ITEST.NE.0) RETURN
      DO 1030 K=1,DOFEL
         STEERI = STEER(K)
         IF (STEERI.LE.0) GO TO 1030
C
C     RANGE CHECKING ON L
C
         IF (JTEST.EQ.-1) GO TO 1020
         IERROR = 0
         IF (STEERI.GT.IRHS) IERROR = 4
         ITEST = ERRMES(JTEST,IERROR,SRNAME)
         IF (ITEST.NE.0) RETURN
C
 1020    RHS(STEERI) = RHS(STEERI) + VALUE(K)
 1030 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$ASSYM$*********************************************************
C***********************************************************************
      SUBROUTINE ASSYM(SYSK, ISYSK, JSYSK, ELK, IELK, JELK, STEER,
     *     ISTEER, HBAND, DOFEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FOR REAL SYMMETRIC SYSTEM MATRIX, ADDS THE CONTRIBUTION
C      FROM AN ELEMENT MATRIX
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (IMS)
C      COMMENTED     7 FEB 1980 (KR)
C
C ARGUMENTS IN
C      SYSK    CONTAINS SYSTEM MATRIX PRIOR TO ADDITION OF
C              CURRENT ELEMENT MATRIX CONTRIBUTION
C      ISYSK   FIRST DIMENSION OF SYSK (.GE. TOTAL NUMBER OF
C              UNCONSTRAINED DEGREES OF FREEDOM)
C      JSYSK   SECOND DIMENSION OF SYSK (.GE. HBAND)
C      ELK     ELEMENT MATRIX
C      IELK    FIRST DIMENSION OF ELK (.GE. DOFEL)
C      JELK    SECOND DIMENSION OF ELK (.GE. DOFEL)
C      STEER   CONTAINS FREEDOM NUMBERS ASSOCIATED WITH ELEMENT
C              MATRIX CONTRIBUTIONS TO SYSTEM MATRIX
C      ISTEER  FIRST DIMENSION OF STEER (.GE. DOFEL)
C      HBAND   SEMI-BANDWIDTH OF SYSTEM MATRIX, INCLUDING
C              DIAGONAL
C      DOFEL   MAXIMUM DEGREES OF FREEDOM ASSOCIATED WITH
C              ELEMENT TYPE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      SYSK    SYSTEM MATRIX
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ASSYM(SYSK, ISYSK, JSYSK, ELK, IELK, JELK,
C    *     STEER, ISTEER, HBAND, DOFEL, ITEST)
C***********************************************************************
C
      INTEGER DOFEL, ERRMES, HBAND, I, IELK, IERROR, ISTEER,
     *     ISYSK, ITEST, J, JELK, JSYSK, JTEST, OFFSET, STEER,
     *     STEERI, STEERJ, JTEST
      DOUBLE PRECISION ELK, SRNAME, SYSK
      DIMENSION ELK(IELK,JELK), STEER(ISTEER),
     *     SYSK(ISYSK,JSYSK)
      DATA SRNAME /8H ASSYM  /
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (ISTEER.LT.DOFEL) IERROR = 4
      IF (IELK.LT.DOFEL .OR. JELK.LT.DOFEL) IERROR = 3
      IF (JSYSK.LT.HBAND) IERROR = 2
      IF (HBAND.LE.0 .OR. DOFEL.LE.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 DO 1040 I=1,DOFEL
         STEERI = STEER(I)
         IF (STEERI.LE.0) GO TO 1040
         DO 1030 J=1,DOFEL
            STEERJ = STEER(J)
            IF (STEERJ.LE.0) GO TO 1030
            OFFSET = STEERJ - STEERI + HBAND
            IF (OFFSET.GT.HBAND) GO TO 1030
C
C     RANGE CHECKING ON STEERI 
C
            IF (JTEST.EQ.-1) GO TO 1020
            IERROR = 0
            IF (ISYSK.LT.STEERI) IERROR = 4
            ITEST = ERRMES(JTEST,IERROR,SRNAME)
            IF (ITEST.NE.0) RETURN
C
 1020       SYSK(STEERI,OFFSET) = SYSK(STEERI,OFFSET) + ELK(I,J)
C
 1030    CONTINUE
 1040 CONTINUE
      RETURN
C
      END
C***********************************************************************
C$SPLIT$ASUSM$*********************************************************
C***********************************************************************
      SUBROUTINE ASUSM(SYSK, ISYSK, JSYSK, ELK, IELK, JELK, STEER,
     *     ISTEER, HBAND, DOFEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FOR REAL UNSYMMETRIC SYSTEM MATRIX, ASSEMBLES
C      CONTRIBUTION FROM ELEMENT MATRIX INTO SYSTEM MATRIX
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (IMS)
C      COMMENTED     7 FEB 1980 (KR)
C
C ARGUMENTS IN
C      SYSK    CONTAINS SYSTEM MATRIX INTO WHICH CONTRIBUTIONS
C              FROM CURRENT ELEMENT MATRIX ARE TO BE ASSEMBLED
C      ISYSK   FIRST DIMENSION OF SYSK (.GE. TOTAL NUMBER OF
C              UNCONSTRAINED DEGREES OF FREEDOM)
C      JSYSK   SECOND DIMENSION OF SYSK (.GE. 2*HBAND-1)
C      ELK     ELEMENT MATRIX
C      IELK    FIRST DIMENSION OF ELK (.GE. DOFEL)
C      JELK    SECOND DIMENSION OF ELK (.GE. DOFEL)
C      STEER   CONTAINS FREEDOM NUMBERS ASSOCIATED WITH ELEMENT
C              MATRIX CONTRIBUTIONS TO SYSTEM MATRIX
C      ISTEER  FIRST DIMENSION OF STEER (.GE. DOFEL)
C      HBAND   SEMI-BANDWIDTH OF SYSTEM MATRIX, INCLUDING
C              DIAGONAL
C      DOFEL   MAXIMUM NUMBER OF DEGREES OF FREEDOM ASSOCIATED
C              WITH THIS ELEMENT TYPE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      SYSK    SYSTEM MATRIX
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ASUSM(SYSK, ISYSK, JSYSK, ELK, IELK, JELK,
C    *      STEER, ISTEER, HBAND, DOFEL, ITEST)
C***********************************************************************
C
      INTEGER DOFEL, ERRMES, HBAND, I, IELK, IERROR, ISTEER,
     *     ISYSK, ITEST, J, JELK, JSYSK, JTEST, OFFSET, STEER,
     *     STEERI, STEERJ
      DOUBLE PRECISION ELK, SRNAME, SYSK
      DIMENSION ELK(IELK,JELK), STEER(ISTEER),
     *     SYSK(ISYSK,JSYSK)
      DATA SRNAME /8H ASUSM  /
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (ISTEER.LT.DOFEL) IERROR = 4
      IF (IELK.LT.DOFEL .OR. JELK.LT.DOFEL) IERROR = 3
      IF (JSYSK.LT.2*HBAND-1) IERROR = 2
      IF (HBAND.LE.0 .OR. DOFEL.LE.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 DO 1040 I=1,DOFEL
         STEERI = STEER(I)
         IF (STEERI.LE.0) GO TO 1040
         DO 1030 J=1,DOFEL
            IF (STEERJ.LE.0) GO TO 1030
            OFFSET = STEERJ - STEERI + HBAND
C
C     RANGE CHECKING ON STEERI AND STEERJ
C
            IF (ITEST.EQ.-1) GO TO 1020
            IERROR = 0
            IF (ISYSK.LT.STEERI .OR. JSYSK.LT.OFFSET) IERROR = 5
            ITEST = ERRMES(JTEST,IERROR,SRNAME)
            IF (ITEST.NE.0) RETURN
C
 1020       SYSK(STEERI,OFFSET) = SYSK(STEERI,OFFSET) + ELK(I,J)
C
 1030    CONTINUE
 1040 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$B2C2$*********************************************************
C***********************************************************************
      SUBROUTINE B2C2(B, IB, JB, DER, IDER, JDER, NODEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE STRAIN-DISPLACEMENT MATRIX FOR 2D PLANE
C      ELASTICITY
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (IMS)
C      COMMENTED    12 FEB 1980 (KR)
C
C ARGUMENTS IN
C      IB      FIRST DIMENSION OF ARRAY B (.GE. 3)
C      JB      SECOND DIMENSION OF B (.GE. 2*NODEL)
C      DER     DER(I,J) CONTAINS THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH GLOBAL
C              COORDINATE
C      IDER    FIRST DIMENSION OF DER (.GE. 2)
C      JDER    SECOND DIMENSION OF DER (.GE. NODEL)
C      NODEL   NUMBER OF NODES ON THE ELEMENT
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       CONTAINS THE VALUES OF THE STRAIN-DISPLACEMENT
C              MATRIX
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE B2C2(B, IB, JB, DER, IDER, JDER, NODEL, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IB, IDER, IERROR, ITEST, JB, JDER, K,
     *     L, M, NODEL
      DOUBLE PRECISION B, DER, SRNAME
      DIMENSION B(IB,JB), DER(IDER,JDER)
      DATA SRNAME /8H B2C2   /
C
C     INTIALISATION
C
      K = 3
      L = 2*NODEL
C
C     PARAMETER CHECKING
C
      IF (ITEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IDER.LT.2 .OR. JDER.LT.NODEL) IERROR = 3
      IF (IB.LT.3 .OR. JB.LT.L) IERROR = 2
      IF (NODEL.LE.0) IERROR = 1
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     INITIALISE MATRIX
C
 1010 CALL MATNUL(B, IB, JB, K, L, ITEST)
C
      DO 1020 M=1,NODEL
         K = 2*M
         L = K - 1
         B(1,L) = DER(1,M)
         B(3,K) = DER(1,M)
         B(2,K) = DER(2,M)
         B(3,L) = DER(2,M)
 1020 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$B2P2$*********************************************************
C***********************************************************************
      SUBROUTINE B2P2(B, IB, JB, DER, IDER, JDER, FUN, IFUN,
     *     COORD, ICOORD, JCOORD, NODEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE STRAIN-DISPLACEMENT MATRIX FOR AXISYMMETRIC
C      ELASTICITY
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (IMS)
C      COMMENTED    12 FEB 1980 (KR)
C
C ARGUMENTS IN
C      IB      FIRST DIMENSION OF ARRAY B (.GE. 3)
C      JB      SECOND DIMENSION OF B (.GE. 2*NODEL)
C      DER     DER(I,J) CONTAINS THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH GLOBAL
C              COORDINATE
C      IDER    FIRST DIMENSION OF DER (.GE. 2)
C      JDER    SECOND DIMENSION OF DER (.GE. NODEL)
C      FUN     FUN(I) CONATINS THE VALUE OF THE I'TH SHAPE
C              FUNCTION AT THE POINT UNDER CONSIDERATION
C      IFUN    FIRST DIMENSION OF FUN (.GE. 4)
C      COORD   COORD(I,J) CONTAINS THE J'TH GLOBAL COORDINATE
C              OF THE I'TH NODE
C      ICOORD  FIRST DIMENSION OF COORD (.GE. NUMBER OF NODES
C              IN THE MESH)
C      JCOORD  SECOND DIMENSION OF COORD (.GE. DIMENSIONALITY
C              OF PROBLEM)
C      NODEL   NUMBER OF NODES ON ELEMENT
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       CONATINS VALUES OF STRAIN-DISPLACEMENT MATRIX
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE B2P2(B, IB, JB, DER, IDER, JDER, FUN, IFUN,
C    *     COORD, ICOORD, JCOORD, NODEL, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IB, ICOORD, IDER, IERROR, IFUN, ITEST,
     *     JB, JCOORD, JDER, JTEST, K, L, M, NODEL
      DOUBLE PRECISION B, COORD, DER, FUN, SRNAME, SUM, TOL,
     *     VTOL, X
      DIMENSION B(IB,JB), COORD(ICOORD,JCOORD),
     *     DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H B2P2   /
C
C     INTIALISATION
C
      K = 4
      L = 2*NODEL
      TOL = VTOL(X)
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IDER.LT.2 .OR. JDER.LT.NODEL) IERROR = 3
      IF (IB.LT.3 .OR. JB.LT.L) IERROR = 2
      IF (NODEL.LE.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 CALL MATNUL(B, IB, JB, K, L, ITEST)
C
C     CALCULATE AVERAGE RADIUS
C
      SUM = 0.0D0
      DO 1020 K=1,NODEL
         SUM = SUM + FUN(K)*COORD(K,1)
 1020 CONTINUE
C
C     CHECK VALUE OF SUM - RBAR
C
      IF(JTEST.EQ.-1) GO TO 1030
      IERROR = 0
      IF(DABS(SUM).LT.TOL) IERROR=4
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
 1030 DO 1040 M=1,NODEL
         K = 2*M
         L = K - 1
         B(1,L) = DER(1,M)
         B(3,K) = DER(1,M)
         B(2,K) = DER(2,M)
         B(3,L) = DER(2,M)
         B(4,L) = FUN(M)/SUM
 1040 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$B3C3$*********************************************************
C***********************************************************************
      SUBROUTINE B3C3(B, IB, JB, DER, IDER, JDER, NODEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS STRAIN-DISPLACEMENT MATRIX FOR 3D ELASTICITY
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (IMS)
C      COMMENTED    12 FEB 1980 (KR)
C
C ARGUMENTS IN
C      IB      FIRST DIMENSION OF ARRAY B (.GE. 6)
C      JB      SECOND DIMENSION OF B (.GE. 3*NODEL)
C      DER     DER(I,J) CONTAINS THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH GLOBAL
C              COORDINATE
C      IDER    FIRST DIMENSION OF DER (.GE. 3)
C      JDER    SECOND DIMENSION OF DER (.GE. NODEL)
C      NODEL   NUMBER OF NODES ON ELEMENT
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       CONTAINS VALUES OF STRAIN-DISPLACEMENT MATRIX
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE B3C3(B, IB, JB, DER, IDER, JDER, NODEL, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IB, IDER, IERROR, ITEST, JB, JDER, K,
     *     L, M, N, NODEL
      DOUBLE PRECISION B, DER, SRNAME
      DIMENSION B(IB,JB), DER(IDER,JDER)
      DATA SRNAME /8H B3C3   /
C
C     INTIALISATION
C
      K = 6
      L = 3*NODEL
C
C     PARAMETER CHECKING
C
      IF (ITEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IDER.LT.3 .OR. JDER.LT.NODEL) IERROR = 3
      IF (IB.LT.K .OR. JB.LT.L) IERROR = 2
      IF (NODEL.LE.0) IERROR = 1
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 CALL MATNUL(B, IB, JB, K, L, ITEST)
C
      DO 1020 M=1,NODEL
         N = 3*M
         K = N - 1
         L = K - 1
         B(1,L) = DER(1,M)
         B(4,K) = DER(1,M)
         B(6,N) = DER(1,M)
         B(2,K) = DER(2,M)
         B(4,L) = DER(2,M)
         B(5,N) = DER(2,M)
         B(3,N) = DER(3,M)
         B(5,K) = DER(3,M)
         B(6,L) = DER(3,M)
 1020 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$BQBRK$*********************************************************
C***********************************************************************
      SUBROUTINE BQBRK(ABSS, IABSS, JABSS, WORK, IWORK, JWORK,
     *     NQP, FACNUM, COEF, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS AN EQUIVALENT TWO-DIMENSIONAL QUADRATURE RULE OF
C      A GIVEN THREE-DIMENSIONAL RULE FOR INTEGRATION OVER THE
C      SPECIFIED FACE OF A BRICK ELEMENT
C
C HISTORY
C
C      COPYRIGHT (C) 1981 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 2.0  1 FEB 1981 (CG) 
C      COMMENTED   24 JUN 1981 (CG)
C
C ARGUMENTS IN
C      ABSS    ARRAY HOLDING THE ABSCISSAE OF THE THREE-
C              DIMENSIONAL QUADRATURE RULE TO BE USED
C      IABSS   FIRST DIMENSION OF ARRAY ABSS
C      JABSS   SECOND DIMENSION OF ARRAY ABSS
C      IWORK  FIRST DIMENSION OF ARRAY WORK
C      JWORK  SECOND DIMENSION OF ARRAY WORK
C      NQP     NUMBER OF QUADRATURE POINTS IN THE RULE
C      FACNUM  THE FACE NUMBER FOR WHICH THE TWO-
C              DIMENSIONAL RULE IS REQUIRED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WORK   ARRAY CONTAINING THE ABSCISSAE OF THE
C              EQUIVALENT ONE-DIMENSIONAL RULE
C      COEF    A MULTIPLIER OF THE RULE
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BQBRK(ABSS, IABSS, JABSS, WORK, IWORK, JWORK,
C    *     NQP, FACNUM, COEF, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, FACNUM, I, IABSS, IERROR, ITEST, IWORK,
     *     J, JABSS, JWORK, K, L, NQP
      DOUBLE PRECISION ABSS, COEF, SRNAME, VAL, WORK
      DIMENSION ABSS(IABSS,JABSS), WORK(IWORK,JWORK)
      DATA SRNAME /8H BQBRK  /
C
C     PARAMETER CHECKING
C
      IF (ITEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (NQP.EQ.0) IERROR = 1
      IF (FACNUM.LE.0 .OR. FACNUM.GT.6) IERROR = 2
      IF (IWORK.LT.2 .OR. JWORK.LT.NQP) IERROR = 3
      IF (IABSS.LT.3 .OR. JABSS.LT.NQP) IERROR = 4
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 GO TO (1060, 1070, 1020, 1050, 1030, 1040), FACNUM
C
C     FACE NUMBER 3 : XI = -1
C
 1020 I = 1
      J = 2
      K = 3
      VAL = -1.0D0
      COEF = 1.0D0
      GO TO 1080
C
C     FACE NUMBER 5 : XI = +1
C
 1030 I = 1
      J = 2
      K = 3
      VAL = 1.0D0
      COEF = 1.0D0
      GO TO 1080
C
C     FACE NUMBER 6 : ETA = -1
C
 1040 I = 2
      J = 1
      K = 3
      VAL = -1.0D0
      COEF = 1.0D0
      GO TO 1080
C
C     FACE NUMBER 4 : ETA = +1
C
 1050 I = 2
      J = 1
      K = 3
      VAL = 1.0D0
      COEF = 1.0D0
      GO TO 1080
C
C     FACE NUMBER 1 : ZETA = -1
C
 1060 I = 3
      J = 1
      K = 2
      VAL = -1.0D0
      COEF = 1.0D0
      GO TO 1080
C
C     FACE NUMBER 2 : ZETA = +1
C
 1070 I = 3
      J = 1
      K = 2
      VAL = 1.0D0
      COEF = 1.0D0
C
 1080 DO 1090 L=1,NQP
         ABSS(I,L) = VAL
         ABSS(J,L) = WORK(1,L)
         ABSS(K,L) = WORK(2,L)
 1090 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$BQQUA$*********************************************************
C***********************************************************************
      SUBROUTINE BQQUA(ABSS, IABSS, JABSS, WORK, IWORK, NQP,
     *     SIDNUM, COEF, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS AN EQUIVALENT ONE-DIMENSIONAL QUADRATURE RULE OF
C      A GIVEN TWO-DIMENSIONAL RULE FOR INTEGRATION ALONG THE
C      SPECIFIED SIDE OF A RECTANGULAR ELEMENT
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 2.0  1 FEB 1981 (CG) 
C      COMMENTED   24 JUN 1981 (CG)
C
C ARGUMENTS IN
C      ABSS    ARRAY HOLDING THE ABSCISSAE OF THE TWO-
C              DIMENSIONAL QUADRATURE RULE TO BE USED
C      IABSS   FIRST DIMENSION OF ARRAY ABSS
C      JABSS   SECOND DIMENSION OF ARRAY ABSS
C      IWORK   DIMENSION OF ARRAY WORK
C      NQP     NUMBER OF QUADRATURE POINTS IN THE RULE
C      SIDNUM  THE SIDE NUMBER FOR WHICH THE ONE-
C              DIMENSIONAL RULE IS REQUIRED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WORK    ARRAY CONTAINING THE ABSCISSAE OF THE
C              EQUIVALENT ONE-DIMENSIONAL RULE
C      COEF    A MULTIPLIER OF THE RULE
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BQQUA(ABSS, IABSS, JABSS, WORK, IWORK, NQP,
C    *     SIDNUM, COEF, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWORK, J, JABSS,
     *     K, NQP, SIDNUM
      DOUBLE PRECISION ABSS, COEF, SRNAME, VAL, WORK
      DIMENSION ABSS(IABSS,JABSS), WORK(IWORK)
      DATA SRNAME /8H BQQUA  /
C
C     PARAMETER CHECKING
C
      IF (ITEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IABSS.LT.2 .OR. JABSS.LT.NQP) IERROR = 4
      IF (IWORK.LT.NQP) IERROR = 3
      IF (SIDNUM.LE.0 .OR. SIDNUM.GT.4) IERROR = 2
      IF (NQP.LE.0) IERROR = 1
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 COEF = 1.0D0
      GO TO (1020, 1030, 1040, 1050), SIDNUM
C
C     SIDE NUMBER 1 : XI = -1
C
 1020 I = 1
      J = 2
      VAL = -1.0D0
      GO TO 1060
C
C     SIDE NUMBER 2 : XI = +1
C
 1030 I = 2
      J = 1
      VAL = 1.0D0
      GO TO 1060
C
C     SIDE NUMBER 3 : ETA = -1
C
 1040 I = 1
      J = 2
      VAL = 1.0D0
      GO TO 1060
C
C     SIDE NUMBER 4 : ETA = +1
C
 1050 I = 2
      J = 1
      VAL = -1.0D0
C
 1060 DO 1070 K=1,NQP
         ABSS(I,K) = VAL
         ABSS(J,K) = WORK(K)
 1070 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$BQTRI$*********************************************************
C***********************************************************************
      SUBROUTINE BQTRI(ABSS, IABSS, JABSS, WORK, IWORK, NQP,
     *     SIDNUM, COEF, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS AN EQUIVALENT ONE-DIMENSIONAL QUADRATURE RULE OF
C      A GIVEN TWO-DIMENSIONAL RULE FOR INTEGRATION ALONG THE
C      SPECIFIED SIDE OF A TRIANGULAR ELEMENT
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 2.0  1 FEB 1981 (CG)  
C      COMMENTED   24 JUN 1981 (CG)
C
C ARGUMENTS IN
C      ABSS    ARRAY HOLDING THE ABSCISSAE OF THE TWO-
C              DIMENSIONAL QUADRATURE RULE TO BE USED
C      IABSS   FIRST DIMENSION OF ARRAY ABSS
C      JABSS   SECOND DIMENSION OF ARRAY ABSS
C      IWORK   DIMENSION OF ARRAY WORK
C      NQP     NUMBER OF QUADRATURE POINTS IN THE RULE
C      SIDNUM  THE SIDE NUMBER FOR WHICH THE ONE-
C              DIMENSIONAL RULE IS REQUIRED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WORK    ARRAY CONTAINING THE ABSCISSAE OF THE
C              EQUIVALENT ONE-DIMENSIONAL RULE
C      COEF    A MULTIPLIER OF THE RULE
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BQTRI(ABSS, IABSS, JABSS, WORK, IWORK, NQP,
C    *     SIDNUM, COEF, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWORK, JABSS,
     *     NQP, SIDNUM
      DOUBLE PRECISION ABSS, COEF, ETA, L1, L2, L3, LL1, LL2,
     *     LL3, SRNAME, WORK, XI
      DIMENSION ABSS(IABSS,JABSS), WORK(IWORK)
      DATA SRNAME /8H BQTRI  /
C
C     STATEMENT FUNCTIONS
C
      XI(LL1,LL2,LL3) = 1.0D0 - 3.0D0/2.0D0*(LL2+LL3)
      ETA(LL1,LL2,LL3) = DSQRT(3.0D0)/2.0D0*(LL3-LL2)
C
C     PARAMETER CHECKING
C
      IF (ITEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (IABSS.LE.2 .OR. JABSS.LE.NQP) IERROR = 4
      IF (IWORK.LE.NQP) IERROR = 3
      IF (SIDNUM.LE.0 .OR. SIDNUM.GT.3) IERROR = 2
      IF (NQP.LE.0) IERROR = 1
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 COEF = 0.5D0
      GO TO (1020, 1040, 1060), SIDNUM
C
C     SIDE NUMBER 1 : L3 = 0
C
 1020 L3 = 0.0D0
      DO 1030 I=1,NQP
         L1 = 0.5D0*(1.D0+WORK(I))
         L2 = 1.0D0 - L1
         ABSS(1,I) = XI(L1,L2,L3)
         ABSS(2,I) = ETA(L1,L2,L3)
 1030 CONTINUE
      RETURN
C
C     SIDE NUMBER 2 : L1 = 0
C
 1040 L1 = 0.0D0
      DO 1050 I=1,NQP
         L2 = 0.5D0*(1.D0+WORK(I))
         L3 = 1.0D0 - L2
         ABSS(1,I) = XI(L1,L2,L3)
         ABSS(2,I) = ETA(L1,L2,L3)
 1050 CONTINUE
      RETURN
C
C     SIDE NUMBER 3 : L2 = 0
C
 1060 L2 = 0.0D0
      DO 1070 I=1,NQP
         L3 = 0.5D0*(1.D0+WORK(I))
         L1 = 1.0D0 - L3
         ABSS(1,I) = XI(L1,L2,L3)
         ABSS(2,I) = ETA(L1,L2,L3)
 1070 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$BRK20$*********************************************************
C***********************************************************************
      SUBROUTINE BRK20(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES SHAPE FUNCTIONS AND DERIVATIVES AT A
C      SPECIFIED POINT FOR 20-NODED BRICK ELEMENT.  FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.20)
C      IDER    FIRST DIMENSION OF REAL ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF REAL ARRAY DER (.GE.20)
C      XI      VALUE OF FIRST LOCAL COORDINATE
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF SHAPE FUNCTION VALUES.  FUN(I
C              CONTAINS THE VALUE OF THE I'TH SHAPE FUNCTION AT
C              (XI,ETA,ZETA)
C      DER     ARRAY OF SHAPE FUNCTION DERIVATIVE VALUES.
C              DER(I,J) CONTAINS THE VALUE OF THE DERIVATIVE OF
C              THE J'TH SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE AT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BRK20(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
C    *     ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DNCX, DNCY, DNCZ, DNSXX, DNSXY,
     *     DNSXZ, DNSYX, DNSYY, DNSYZ, DNSZX, DNSZY, DNSZZ,
     *     ETA, FUN, M1, NC, NSX, NSY, NSZ, P1, SRNAME, X,
     *     XI, Y, Z, ZETA, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA M1 /-1.D0/, P1 /1.D0/, SRNAME /8H BRK20  /
      NC(X,Y,Z) = 1.D0/8.D0*(1.D0+XI*X)*(1.D0+ETA*Y)*(1.D0+ZETA*Z)*
     *     (XI*X+ETA*Y+ZETA*Z-2.D0)
      NSX(Y,Z) = 1.D0/4.D0*(1.D0-XI*XI)*(1.D0+ETA*Y)*(1.D0+ZETA*Z)
      NSY(X,Z) = 1.D0/4.D0*(1.D0+XI*X)*(1.D0-ETA*ETA)*(1.D0+ZETA*Z)
      NSZ(X,Y) = 1.D0/4.D0*(1.D0+XI*X)*(1.D0+ETA*Y)*(1.D0-ZETA*
     *     ZETA)
      DNCX(X,Y,Z) = 1.D0/8.D0*X*(1.D0+ETA*Y)*(1.D0+ZETA*Z)*(2.D0*
     *     XI*X+ETA*Y+ZETA*Z-1.D0)
      DNCY(X,Y,Z) = 1.D0/8.D0*Y*(1.D0+XI*X)*(1.D0+ZETA*Z)*(XI*
     *     X+2.D0*ETA*Y+ZETA*Z-1.D0)
      DNCZ(X,Y,Z) = 1.D0/8.D0*Z*(1.D0+XI*X)*(1.D0+ETA*Y)*(XI*X+ETA*
     *     Y+2.D0*ZETA*Z-1.D0)
      DNSXX(Y,Z) = -1.D0/2.D0*XI*(1.D0+ETA*Y)*(1.D0+ZETA*Z)
      DNSXY(Y,Z) = 1.D0/4.D0*Y*(1.D0-XI*XI)*(1.D0+ZETA*Z)
      DNSXZ(Y,Z) = 1.D0/4.D0*Z*(1.D0-XI*XI)*(1.D0+ETA*Y)
      DNSYX(X,Z) = 1.D0/4.D0*X*(1.D0-ETA*ETA)*(1.D0+ZETA*Z)
      DNSYY(X,Z) = -1.D0/2.D0*ETA*(1.D0+XI*X)*(1.D0+ZETA*Z)
      DNSYZ(X,Z) = 1.D0/4.D0*Z*(1.D0-ETA*ETA)*(1.D0+XI*X)
      DNSZX(X,Y) = 1.D0/4.D0*X*(1.D0+ETA*Y)*(1.D0-ZETA*ZETA)
      DNSZY(X,Y) = 1.D0/4.D0*Y*(1.D0+XI*X)*(1.D0-ZETA*ZETA)
      DNSZZ(X,Y) = -1.D0/2.D0*ZETA*(1.D0+XI*X)*(1.D0+ETA*Y)
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.20) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.20) IERROR = 2
                        VAL = 1.0D0+VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA)
     *                     .GT.VAL .OR. DABS(ZETA).GT.VAL)
     *                     IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = NC(M1,M1,M1)
      FUN(2) = NSY(M1,M1)
      FUN(3) = NC(M1,P1,M1)
      FUN(4) = NSX(P1,M1)
      FUN(5) = NC(P1,P1,M1)
      FUN(6) = NSY(P1,M1)
      FUN(7) = NC(P1,M1,M1)
      FUN(8) = NSX(M1,M1)
      FUN(9) = NSZ(M1,M1)
      FUN(10) = NSZ(M1,P1)
      FUN(11) = NSZ(P1,P1)
      FUN(12) = NSZ(P1,M1)
      FUN(13) = NC(M1,M1,P1)
      FUN(14) = NSY(M1,P1)
      FUN(15) = NC(M1,P1,P1)
      FUN(16) = NSX(P1,P1)
      FUN(17) = NC(P1,P1,P1)
      FUN(18) = NSY(P1,P1)
      FUN(19) = NC(P1,M1,P1)
      FUN(20) = NSX(M1,P1)
      DER(1,1) = DNCX(M1,M1,M1)
      DER(2,1) = DNCY(M1,M1,M1)
      DER(3,1) = DNCZ(M1,M1,M1)
      DER(1,2) = DNSYX(M1,M1)
      DER(2,2) = DNSYY(M1,M1)
      DER(3,2) = DNSYZ(M1,M1)
      DER(1,3) = DNCX(M1,P1,M1)
      DER(2,3) = DNCY(M1,P1,M1)
      DER(3,3) = DNCZ(M1,P1,M1)
      DER(1,4) = DNSXX(P1,M1)
      DER(2,4) = DNSXY(P1,M1)
      DER(3,4) = DNSXZ(P1,M1)
      DER(1,5) = DNCX(P1,P1,M1)
      DER(2,5) = DNCY(P1,P1,M1)
      DER(3,5) = DNCZ(P1,P1,M1)
      DER(1,6) = DNSYX(P1,M1)
      DER(2,6) = DNSYY(P1,M1)
      DER(3,6) = DNSYZ(P1,M1)
      DER(1,7) = DNCX(P1,M1,M1)
      DER(2,7) = DNCY(P1,M1,M1)
      DER(3,7) = DNCZ(P1,M1,M1)
      DER(1,8) = DNSXX(M1,M1)
      DER(2,8) = DNSXY(M1,M1)
      DER(3,8) = DNSXZ(M1,M1)
      DER(1,9) = DNSZX(M1,M1)
      DER(2,9) = DNSZY(M1,M1)
      DER(3,9) = DNSZZ(M1,M1)
      DER(1,10) = DNSZX(M1,P1)
      DER(2,10) = DNSZY(M1,P1)
      DER(3,10) = DNSZZ(M1,P1)
      DER(1,11) = DNSZX(P1,P1)
      DER(2,11) = DNSZY(P1,P1)
      DER(3,11) = DNSZZ(P1,P1)
      DER(1,12) = DNSZX(P1,M1)
      DER(2,12) = DNSZY(P1,M1)
      DER(3,12) = DNSZZ(P1,M1)
      DER(1,13) = DNCX(M1,M1,P1)
      DER(2,13) = DNCY(M1,M1,P1)
      DER(3,13) = DNCZ(M1,M1,P1)
      DER(1,14) = DNSYX(M1,P1)
      DER(2,14) = DNSYY(M1,P1)
      DER(3,14) = DNSYZ(M1,P1)
      DER(1,15) = DNCX(M1,P1,P1)
      DER(2,15) = DNCY(M1,P1,P1)
      DER(3,15) = DNCZ(M1,P1,P1)
      DER(1,16) = DNSXX(P1,P1)
      DER(2,16) = DNSXY(P1,P1)
      DER(3,16) = DNSXZ(P1,P1)
      DER(1,17) = DNCX(P1,P1,P1)
      DER(2,17) = DNCY(P1,P1,P1)
      DER(3,17) = DNCZ(P1,P1,P1)
      DER(1,18) = DNSYX(P1,P1)
      DER(2,18) = DNSYY(P1,P1)
      DER(3,18) = DNSYZ(P1,P1)
      DER(1,19) = DNCX(P1,M1,P1)
      DER(2,19) = DNCY(P1,M1,P1)
      DER(3,19) = DNCZ(P1,M1,P1)
      DER(1,20) = DNSXX(M1,P1)
      DER(2,20) = DNSXY(M1,P1)
      DER(3,20) = DNSXZ(M1,P1)
      RETURN
      END
C***********************************************************************
C$SPLIT$BRK32$*********************************************************
C***********************************************************************
      SUBROUTINE BRK32(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A POINT FOR A 32-NODED BRICK ELEMENT.
C      FUNCTION CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.32)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.32)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ZETA    THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR CONTAINING SHAPE FUNCTIONS.  FUN(I)
C              CONTAINS THE VALUE OF THE I'TH SHAPE FUNCTION AT
C              (XI,ETA,ZETA)
C      DER     ARRAY CONTAINING THE DERIVATIVES OF THE SHAPE
C              FUNCTIONS.  DER(I,J) CONTAINS THE VALUE OF THE
C              DERIVATIVE OF THE J'TH SHAPE FUNCTION WITH
C              RESPECT TO THE I'TH COORDINATE AT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BRK32(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DNCX, DNCY, DNCZ, DNSXX, DNSXY,DNSXZ, DNSYX,
     * DNSYY, DNSYZ, DNSZX, DNSZY, DNSZZ,ETA, FUN, M1, MTHRD, NC, NSX,
     * NSY, NSZ, P1, PTHRD,SRNAME, X, XI, Y, Z, ZETA, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H BRK32  /
      NC(X,Y,Z) = 1.D0/64.D0*(1.D0+XI*X)*(1.D0+ETA*Y)*(1.D0+ZETA*Z)*
     *(9.D0*(XI*XI+ETA*ETA+ZETA*ZETA)-19.D0)
      NSX(X,Y,Z) = 9.D0/64.D0*(1.D0-XI*XI)*(1+9.D0*XI*X)*(1.D0+ETA*Y)*
     *(1.D0+ZETA*Z)
      NSY(X,Y,Z) = 9.D0/64.D0*(1.D0-ETA*ETA)*(1.D0+9.D0*ETA*Y)*(1.D0+XI*
     *X)*(1.D0+ZETA*Z)
      NSZ(X,Y,Z) = 9.D0/64.D0*(1.D0-ZETA*ZETA)*(1.D0+9.D0*ZETA*Z)*(1.D0+
     *XI*X)*(1.D0+ETA*Y)
      DNCX(X,Y,Z) = 1.D0/64.D0*(1.D0+ETA*Y)*(1.D0+ZETA*Z)*(X*(9.D0*(XI*
     *XI+ETA*ETA+ZETA*ZETA)-19.D0)+18.D0*XI*(1.D0+XI*X))
      DNCY(X,Y,Z) = 1.D0/64.D0*(1.D0+XI*X)*(1.D0+ZETA*Z)*(Y*(9.D0*(XI*
     *XI+ETA*ETA+ZETA*ZETA)-19.D0)+18.D0*ETA*(1.D0+ETA*Y))
      DNCZ(X,Y,Z) = 1.D0/64.D0*(1.D0+XI*X)*(1.D0+ETA*Y)*(Z*(9.D0*(XI*XI+
     *ETA*ETA+ZETA*ZETA)-19.D0)+18.D0*ZETA*(1.D0+ZETA*Z))
      DNSXX(X,Y,Z) = 9.D0/64.D0*(1.D0+ETA*Y)*(1.D0+ZETA*Z)*(9.D0*X*(1-
     *XI*XI)-2.D0*XI*(1.D0+9.D0*XI*X))
      DNSXY(X,Y,Z) = 9.D0/64.D0*Y*(1.D0-XI*XI)*(1.D0+9.D0*XI*X)*(1.D0+
     *ZETA*Z)
      DNSXZ(X,Y,Z) = 9.D0/64.D0*Z*(1.D0-XI*XI)*(1.D0+9.D0*XI*X)*(1.D0+
     *ETA*Y)
      DNSYX(X,Y,Z) = 9.D0/64.D0*X*(1.D0-ETA*ETA)*(1.D0+9.D0*ETA*Y)*
     *(1.D0+ZETA*Z)
      DNSYY(X,Y,Z) = 9.D0/64.D0*(1.D0+XI*X)*(1.D0+ZETA*Z)*(9.D0*Y*(1-
     *ETA*ETA)-2.D0*ETA*(1.D0+9.D0*ETA*Y))
      DNSYZ(X,Y,Z) = 9.D0/64.D0*Z*(1.D0-ETA*ETA)*(1.D0+9.D0*ETA*Y)*
     *(1.D0+XI*X)
      DNSZX(X,Y,Z) = 9.D0/64.D0*X*(1.D0-ZETA*ZETA)*(1.D0+9.D0*ZETA*Z)*
     *(1.D0+ETA*Y)
      DNSZY(X,Y,Z) = 9.D0/64.D0*Y*(1.D0-ZETA*ZETA)*(1.D0+9.D0*ZETA*Z)*
     *(1.D0+XI*X)
      DNSZZ(X,Y,Z) = 9.D0/64.D0*(1.D0+XI*X)*(1.D0+ETA*Y)*(9.D0*Z*(1-
     *ZETA*ZETA)-2.D0*ZETA*(1.D0+9.D0*ZETA*Z))
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.32) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.32) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL .
     *                  OR. DABS(ZETA).GT.VAL)IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 P1 = 1.D0
      M1 = -1.D0
      PTHRD = 1.D0/3.D0
      MTHRD = -1.D0/3.D0
      FUN(1) = NC(M1,M1,M1)
      FUN(2) = NSY(M1,MTHRD,M1)
      FUN(3) = NSY(M1,PTHRD,M1)
      FUN(4) = NC(M1,P1,M1)
      FUN(5) = NSX(MTHRD,P1,M1)
      FUN(6) = NSX(PTHRD,P1,M1)
      FUN(7) = NC(P1,P1,M1)
      FUN(8) = NSY(P1,PTHRD,M1)
      FUN(9) = NSY(P1,MTHRD,M1)
      FUN(10) = NC(P1,M1,M1)
      FUN(11) = NSX(PTHRD,M1,M1)
      FUN(12) = NSX(MTHRD,M1,M1)
      FUN(13) = NSZ(M1,M1,MTHRD)
      FUN(14) = NSZ(M1,P1,MTHRD)
      FUN(15) = NSZ(P1,P1,MTHRD)
      FUN(16) = NSZ(P1,M1,MTHRD)
      FUN(17) = NSZ(M1,M1,PTHRD)
      FUN(18) = NSZ(M1,P1,PTHRD)
      FUN(19) = NSZ(P1,P1,PTHRD)
      FUN(20) = NSZ(P1,M1,PTHRD)
      FUN(21) = NC(M1,M1,P1)
      FUN(22) = NSY(M1,MTHRD,P1)
      FUN(23) = NSY(M1,PTHRD,P1)
      FUN(24) = NC(M1,P1,P1)
      FUN(25) = NSX(MTHRD,P1,P1)
      FUN(26) = NSX(PTHRD,P1,P1)
      FUN(27) = NC(P1,P1,P1)
      FUN(28) = NSY(P1,PTHRD,P1)
      FUN(29) = NSY(P1,MTHRD,P1)
      FUN(30) = NC(P1,M1,P1)
      FUN(31) = NSX(PTHRD,M1,P1)
      FUN(32) = NSX(MTHRD,M1,P1)
      DER(1,1) = DNCX(M1,M1,M1)
      DER(2,1) = DNCY(M1,M1,M1)
      DER(3,1) = DNCZ(M1,M1,M1)
      DER(1,2) = DNSYX(M1,MTHRD,M1)
      DER(2,2) = DNSYY(M1,MTHRD,M1)
      DER(3,2) = DNSYZ(M1,MTHRD,M1)
      DER(1,3) = DNSYX(M1,PTHRD,M1)
      DER(2,3) = DNSYY(M1,PTHRD,M1)
      DER(3,3) = DNSYZ(M1,PTHRD,M1)
      DER(1,4) = DNCX(M1,P1,M1)
      DER(2,4) = DNCY(M1,P1,M1)
      DER(3,4) = DNCZ(M1,P1,M1)
      DER(1,5) = DNSXX(MTHRD,P1,M1)
      DER(2,5) = DNSXY(MTHRD,P1,M1)
      DER(3,5) = DNSXZ(MTHRD,P1,M1)
      DER(1,6) = DNSXX(PTHRD,P1,M1)
      DER(2,6) = DNSXY(PTHRD,P1,M1)
      DER(3,6) = DNSXZ(PTHRD,P1,M1)
      DER(1,7) = DNCX(P1,P1,M1)
      DER(2,7) = DNCY(P1,P1,M1)
      DER(3,7) = DNCZ(P1,P1,M1)
      DER(1,8) = DNSYX(P1,PTHRD,M1)
      DER(2,8) = DNSYY(P1,PTHRD,M1)
      DER(3,8) = DNSYZ(P1,PTHRD,M1)
      DER(1,9) = DNSYX(P1,MTHRD,M1)
      DER(2,9) = DNSYY(P1,MTHRD,M1)
      DER(3,9) = DNSYZ(P1,MTHRD,M1)
      DER(1,10) = DNCX(P1,M1,M1)
      DER(2,10) = DNCY(P1,M1,M1)
      DER(3,10) = DNCZ(P1,M1,M1)
      DER(1,11) = DNSXX(PTHRD,M1,M1)
      DER(2,11) = DNSXY(PTHRD,M1,M1)
      DER(3,11) = DNSXZ(PTHRD,M1,M1)
      DER(1,12) = DNSXX(MTHRD,M1,M1)
      DER(2,12) = DNSXY(MTHRD,M1,M1)
      DER(3,12) = DNSXZ(MTHRD,M1,M1)
      DER(1,13) = DNSZX(M1,M1,MTHRD)
      DER(2,13) = DNSZY(M1,M1,MTHRD)
      DER(3,13) = DNSZZ(M1,M1,MTHRD)
      DER(1,14) = DNSZX(M1,P1,MTHRD)
      DER(2,14) = DNSZY(M1,P1,MTHRD)
      DER(3,14) = DNSZZ(M1,P1,MTHRD)
      DER(1,15) = DNSZX(P1,P1,MTHRD)
      DER(2,15) = DNSZY(P1,P1,MTHRD)
      DER(3,15) = DNSZZ(P1,P1,MTHRD)
      DER(1,16) = DNSZX(P1,M1,MTHRD)
      DER(2,16) = DNSZY(P1,M1,MTHRD)
      DER(3,16) = DNSZZ(P1,M1,MTHRD)
      DER(1,17) = DNSZX(M1,M1,PTHRD)
      DER(2,17) = DNSZY(M1,M1,PTHRD)
      DER(3,17) = DNSZZ(M1,M1,PTHRD)
      DER(1,18) = DNSZX(M1,P1,PTHRD)
      DER(2,18) = DNSZY(M1,P1,PTHRD)
      DER(3,18) = DNSZZ(M1,P1,PTHRD)
      DER(1,19) = DNSZX(P1,P1,PTHRD)
      DER(2,19) = DNSZY(P1,P1,PTHRD)
      DER(3,19) = DNSZZ(P1,P1,PTHRD)
      DER(1,20) = DNSZX(P1,M1,PTHRD)
      DER(2,20) = DNSZY(P1,M1,PTHRD)
      DER(3,20) = DNSZZ(P1,M1,PTHRD)
      DER(1,21) = DNCX(M1,M1,P1)
      DER(2,21) = DNCY(M1,M1,P1)
      DER(3,21) = DNCZ(M1,M1,P1)
      DER(1,22) = DNSYX(M1,MTHRD,P1)
      DER(2,22) = DNSYY(M1,MTHRD,P1)
      DER(3,22) = DNSYZ(M1,MTHRD,P1)
      DER(1,23) = DNSYX(M1,PTHRD,P1)
      DER(2,23) = DNSYY(M1,PTHRD,P1)
      DER(3,23) = DNSYZ(M1,PTHRD,P1)
      DER(1,24) = DNCX(M1,P1,P1)
      DER(2,24) = DNCY(M1,P1,P1)
      DER(3,24) = DNCZ(M1,P1,P1)
      DER(1,25) = DNSXX(MTHRD,P1,P1)
      DER(2,25) = DNSXY(MTHRD,P1,P1)
      DER(3,25) = DNSXZ(MTHRD,P1,P1)
      DER(1,26) = DNSXX(PTHRD,P1,P1)
      DER(2,26) = DNSXY(PTHRD,P1,P1)
      DER(3,26) = DNSXZ(PTHRD,P1,P1)
      DER(1,27) = DNCX(P1,P1,P1)
      DER(2,27) = DNCY(P1,P1,P1)
      DER(3,27) = DNCZ(P1,P1,P1)
      DER(1,28) = DNSYX(P1,PTHRD,P1)
      DER(2,28) = DNSYY(P1,PTHRD,P1)
      DER(3,28) = DNSYZ(P1,PTHRD,P1)
      DER(1,29) = DNSYX(P1,MTHRD,P1)
      DER(2,29) = DNSYY(P1,MTHRD,P1)
      DER(3,29) = DNSYZ(P1,MTHRD,P1)
      DER(1,30) = DNCX(P1,M1,P1)
      DER(2,30) = DNCY(P1,M1,P1)
      DER(3,30) = DNCZ(P1,M1,P1)
      DER(1,31) = DNSXX(PTHRD,M1,P1)
      DER(2,31) = DNSXY(PTHRD,M1,P1)
      DER(3,31) = DNSXZ(PTHRD,M1,P1)
      DER(1,32) = DNSXX(MTHRD,M1,P1)
      DER(2,32) = DNSXY(MTHRD,M1,P1)
      DER(3,32) = DNSXZ(MTHRD,M1,P1)
      RETURN
      END
C***********************************************************************
C$SPLIT$BRK8$*********************************************************
C***********************************************************************
      SUBROUTINE BRK8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 8-NODED BRICK ELEMENT.  THE
C      FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.8)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.8)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE BRK8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, ETAM, ETAP, FUN, SRNAME, XI,
     *     XIM, XIP, ZETA, ZETAM, ZETAP, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H BRK8   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.8) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.8) IERROR = 2
                        VAL=1.0D0+VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA)
     *                     .GT.VAL .OR. DABS(ZETA).GT.VAL)
     *                     IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ETAM = 1.0D0 - ETA
      ETAP = 1.0D0 + ETA
      XIM = 1.0D0 - XI
      XIP = 1.0D0 + XI
      ZETAM = 1.0D0 - ZETA
      ZETAP = 1.0D0 + ZETA
      FUN(1) = 0.125D0*XIM*ETAM*ZETAM
      FUN(2) = 0.125D0*XIM*ETAP*ZETAM
      FUN(3) = 0.125D0*XIP*ETAP*ZETAM
      FUN(4) = 0.125D0*XIP*ETAM*ZETAM
      FUN(5) = 0.125D0*XIM*ETAM*ZETAP
      FUN(6) = 0.125D0*XIM*ETAP*ZETAP
      FUN(7) = 0.125D0*XIP*ETAP*ZETAP
      FUN(8) = 0.125D0*XIP*ETAM*ZETAP
      DER(1,1) = -0.125D0*ETAM*ZETAM
      DER(1,2) = -0.125D0*ETAP*ZETAM
      DER(1,3) = 0.125D0*ETAP*ZETAM
      DER(1,4) = 0.125D0*ETAM*ZETAM
      DER(1,5) = -0.125D0*ETAM*ZETAP
      DER(1,6) = -0.125D0*ETAP*ZETAP
      DER(1,7) = 0.125D0*ETAP*ZETAP
      DER(1,8) = 0.125D0*ETAM*ZETAP
      DER(2,1) = -0.125D0*XIM*ZETAM
      DER(2,2) = 0.125D0*XIM*ZETAM
      DER(2,3) = 0.125D0*XIP*ZETAM
      DER(2,4) = -0.125D0*XIP*ZETAM
      DER(2,5) = -0.125D0*XIM*ZETAP
      DER(2,6) = 0.125D0*XIM*ZETAP
      DER(2,7) = 0.125D0*XIP*ZETAP
      DER(2,8) = -0.125D0*XIP*ZETAP
      DER(3,1) = -0.125D0*XIM*ETAM
      DER(3,2) = -0.125D0*XIM*ETAP
      DER(3,3) = -0.125D0*XIP*ETAP
      DER(3,4) = -0.125D0*XIP*ETAM
      DER(3,5) = 0.125D0*XIM*ETAM
      DER(3,6) = 0.125D0*XIM*ETAP
      DER(3,7) = 0.125D0*XIP*ETAP
      DER(3,8) = 0.125D0*XIP*ETAM
      RETURN
      END
C***********************************************************************
C$SPLIT$CHOBAK$*********************************************************
C***********************************************************************
      SUBROUTINE CHOBAK(A, IA, JA, R, IR, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PERFORMS BAKWARD SUBSTITUTION ON A MATRIX PROCESSED BY
C      CHORDN AND CHOFWD
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE LOWER HALF OF THE POSITIVE
C              DEFINITE BAND MATRIX OF ORDER N AND WITH SEMI-
C              BANDWIDTH HBAND, REDUCED BY CHORDN OR CHOSOL
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.HBAND)
C      R       ON ENTRY, CONTAINS ELEMENTS OF N RHS'S AFTER
C              PROCESSING BY CHOFWD
C      IR      DIMENSION OF VECTOR R (.GE.N)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF MATRIX A
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      R       ON EXIT, CONTAINS SOLUTION VECTOR
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE CHOBAK(A, IA, JA, R, IR, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IJ, IR, ITEST,
     *     J, JA, L, M, N, W
      DOUBLE PRECISION A, R, SRNAME, X
      DIMENSION A(IA,JA), R(IR)
      DATA SRNAME /8H CHOBAK /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IR.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = HBAND - 1
      R(N) = R(N)/A(N,W+1)
      I = N - 1
 1020 X = 0.0D0
      L = I + W
      IF (I.GT.N-W) L = N
      M = I + 1
      DO 1030 J=M,L
      IJ = W + I - J + 1
      X = X + A(J,IJ)*R(J)
 1030 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
      I = I - 1
      IF (I.NE.0) GO TO 1020
      RETURN
      END
C***********************************************************************
C$SPLIT$CHOFWD$*********************************************************
C***********************************************************************
      SUBROUTINE CHOFWD(A, IA, JA, R, IR, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PERFORMS FORWARD SUBSTITUTION ON A MATRIX REDUCED BY
C      CHORDN
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE LOWER HALF OF THE POSITIVE
C              DEFINITE SYMMETRIC BAND MATRIX OF ORDER N AND
C              SEMI-BANDWIDTH HBAND.  A SHOULD PREVIOUSLY HAVE
C              BEEN REDUCED USING CHORDN OR CHOSOL
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.HBAND)
C      R       ON ENTRY, CONTAINS THE VECTOR OF RHS'S
C      IR      DIMENSION OF R (.GE.N)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF A
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      R       ON EXIT, CONTAINS THE REDUCED VECTOR OF RHS'S
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE CHOFWD(A, IA, JA, R, IR, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IJ, IR, ITEST,
     *     J, JA, K, N, W
      DOUBLE PRECISION A, R, SRNAME, X
      DIMENSION A(IA,JA), R(IR)
      DATA SRNAME /8H CHOFWD /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IR.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = HBAND - 1
      R(1) = R(1)/A(1,W+1)
      DO 1030 I=2,N
      X = 0.0D0
      K = 1
      IF (I.LE.W+1) K = W - I + 2
      DO 1020 J=K,W
      IJ = I + J - W - 1
      X = X + A(I,J)*R(IJ)
 1020 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$CHORDN$*********************************************************
C***********************************************************************
      SUBROUTINE CHORDN(A, IA, JA, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PERFORMS CHOLESKI REDUCTION ON A REAL SYMMETRIC POSITIVE
C      DEFINITE BANDED MATRIX.  ONLY THE LOWER BAND AND
C      DIAGONAL ARE STORED IN A RECTANGULAR ARRAY A
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED AND EXTRA ERROR CHECKING ADDED 12 FEB 1980 (KR)
C
C ARGUMENTS IN
C      A       ON ENTRY, CONTAINS LOWER BAND AND DIAGONAL OF
C              PD REAL SYMMETRIC MATRIX
C      IA      FIRST DIMENSION OF A (.GE. N)
C      JA      SECOND DIMENSION OF A (.GE. HBAND)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF A (INCLUDING DIAGONAL)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       REDUCED MATRIX L, WHERE THE INPUT MATRIX A HAS
C              BEEN REDUCED TO TRIANGULAR MATRICES L AND LT
C              WHERE A=L LT
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE CHORDN(A, IA, JA, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IK, ITEST, J, JA,
     *     K, L, LA, LB, LK, N, W, JTEST
      DOUBLE PRECISION A, SRNAME, X
      DIMENSION A(IA,JA)
      DATA SRNAME /8H CHORDN /
C
                        JTEST=ITEST
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = HBAND - 1
      DO 1070 I=1,N
      X = 0.0D0
      DO 1020 J=1,W
      X = X + A(I,J)*A(I,J)
 1020 CONTINUE
                        IF (ITEST.EQ.-1) GO TO 1030
                        IERROR = 0
                        IF ((A(I,W+1)-X).LE.0.0D0) IERROR = 3
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1030 A(I,W+1) = DSQRT(A(I,W+1)-X)
      DO 1060 K=1,W
      X = 0.0D0
      IF (I+K.GT.N) GO TO 1060
      IF (K.EQ.W) GO TO 1050
      L = W - K
 1040 IK = I + K
      LK = L + K
      X = X + A(IK,L)*A(I,LK)
      L = L - 1
      IF (L.NE.0) GO TO 1040
 1050 LA = I + K
      LB = W - K + 1
      A(LA,LB) = (A(LA,LB)-X)/A(I,W+1)
 1060 CONTINUE
 1070 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$CHOSOL$*********************************************************
C***********************************************************************
      SUBROUTINE CHOSOL(A, IA, JA, R, IR, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SOLVES A SET OF REAL SYMMETRIC POSITIVE DEFINITE BANDED
C      EQUATIONS WITH A SINGLE RIGHT HAND SIDE BY CHOLESKI
C      DECOMPOSITION.  ONLY THE LOWER BAND AND DIAGONAL ARE
C      STORED IN A RECTANGULAR ARRAY A
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 FEB 1980 (KR)
C
C ARGUMENTS IN
C      A       ON ENTRY CONTAINS LOWER HALF OF PD SYMMETRIC
C              BAND MATRIX STORED AS A RECTANGULAR ARRAY
C      IA      FIRST DIMENSION OF A (.GE. N)
C      JA      SECOND DIMENSION OF A (.GE. HBAND)
C      R       CONTAINS ELEMENTS OF RIGHT HAND SIDE
C      IR      DIMENSION OF R (.GE. N)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF A (INCLUDES DIAGONAL)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ON EXIT, CONTAINS LOWER TRIANGULAR REDUCED
C      R       MATRIX SOLUTION VECTOR
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE CHOSOL(A, IA, JA, R, IR, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IJ, IK, IR, ITEST,
     *     J, JA, K, L, LA, LB, LK, M, N, W, JTEST
      DOUBLE PRECISION A, R, SRNAME, X
      DIMENSION A(IA,JA), R(IR)
      DATA SRNAME /8H CHOSOL /
C
                        JTEST=ITEST
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IR.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = HBAND - 1
      DO 1070 I=1,N
      X = 0.0D0
      DO 1020 J=1,W
      X = X + A(I,J)*A(I,J)
 1020 CONTINUE
                        IF (ITEST.EQ.-1) GO TO 1030
                        IERROR = 0
                        IF ((A(I,W+1)-X).LE.0.0D0) IERROR = 4
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1030 A(I,W+1) = DSQRT(A(I,W+1)-X)
      DO 1060 K=1,W
      X = 0.0D0
      IF (I+K.GT.N) GO TO 1060
      IF (K.EQ.W) GO TO 1050
      L = W - K
 1040 IK = I + K
      LK = L + K
      X = X + A(IK,L)*A(I,LK)
      L = L - 1
      IF (L.NE.0) GO TO 1040
 1050 LA = I + K
      LB = W - K + 1
      A(LA,LB) = (A(LA,LB)-X)/A(I,W+1)
 1060 CONTINUE
 1070 CONTINUE
      R(1) = R(1)/A(1,W+1)
      DO 1090 I=2,N
      X = 0.0D0
      K = 1
      IF (I.LE.W+1) K = W - I + 2
      DO 1080 J=K,W
      IJ = I + J - W - 1
      X = X + A(I,J)*R(IJ)
 1080 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
 1090 CONTINUE
      R(N) = R(N)/A(N,W+1)
      I = N - 1
 1100 X = 0.0D0
      L = I + W
      IF (I.GT.N-W) L = N
      M = I + 1
      DO 1110 J=M,L
      IJ = W + I - J + 1
      X = X + A(J,IJ)*R(J)
 1110 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
      I = I - 1
      IF (I.NE.0) GO TO 1100
      RETURN
      END
C***********************************************************************
C$SPLIT$CHOSUB$*********************************************************
C***********************************************************************
      SUBROUTINE CHOSUB(A, IA, JA, R, IR, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PERFORMS FORWARD AND BACKWARD SUBSTITUTION ON A MATRIX
C      REDUCED BY CHORDN
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE LOWER HALF OF THE POSITIVE
C              DEFINITE SYMMETRIC BAND MATRIX OF ORDER N AND
C              SEMI-BANDWIDTH HBAND.  A SHOULD PREVIOUSLY HAVE
C              BEEN REDUCED USING CHORDN OR CHOSOL
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.HBAND)
C      R       ON ENTRY, CONTAINS THE VECTOR OF RHS'S
C      IR      DIMENSION OF R (.GE.N)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF A
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      R       ON EXIT, CONTAINS THE SOLUTION VECTOR
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE CHOSUB(A, IA, JA, R, IR, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IJ, IR, ITEST,
     *     J, JA, K, L, M, N, W
      DOUBLE PRECISION A, R, SRNAME, X
      DIMENSION A(IA,JA), R(IR)
      DATA SRNAME /8H CHOSUB /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IR.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = HBAND - 1
      R(1) = R(1)/A(1,W+1)
      DO 1030 I=2,N
      X = 0.0D0
      K = 1
      IF (I.LE.W+1) K = W - I + 2
      DO 1020 J=K,W
      IJ = I + J - W - 1
      X = X + A(I,J)*R(IJ)
 1020 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
 1030 CONTINUE
      R(N) = R(N)/A(N,W+1)
      I = N - 1
 1040 X = 0.0D0
      L = I + W
      IF (I.GT.N-W) L = N
      M = I + 1
      DO 1050 J=M,L
      IJ = W + I - J + 1
      X = X + A(J,IJ)*R(J)
 1050 CONTINUE
      R(I) = (R(I)-X)/A(I,W+1)
      I = I - 1
      IF (I.NE.0) GO TO 1040
      RETURN
      END
C***********************************************************************
C$SPLIT$DAXI$*********************************************************
C***********************************************************************
      SUBROUTINE DAXI(D, ID, JD, E, NU, NUMSS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE 4 BY 4 STRESS-STRAIN MATRIX FOR USE IN
C      AXISYMMETRIC ISOTROPIC PROBLEMS
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 --- SERC COPYRIGHT
C      COMMENTED WITH SOME CODE CLARIFICATION    13 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ID      FIRST DIMENSION OF MATRIX D (.GE. 4)
C      JD      SECOND DIMENSION OF D (.GE. 4)
C      E       YOUNG'S MODULUS
C      NU      POISSON'S RATIO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      D       STRESS-STRAIN MATRIX
C      NUMSS   ORDER OF STRESS-STRAIN MATRIX, 4 IN THIS CASE
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE DAXI(D, ID, JD, E, NU, NUMSS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, ID, IERROR, ITEST, J, JD, NUMSS
      DOUBLE PRECISION D, E, NU, NU1, NUNU, SRNAME
      DIMENSION D(ID,JD)
      DATA SRNAME /8H DAXI   /
      NUMSS = 4
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NU.LT.0.0D0 .OR. NU.GE.0.5D0)
     *                      IERROR = 2
                        IF (ID.LT.NUMSS .OR. JD.LT.NUMSS)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(D, ID, JD, NUMSS, NUMSS, ITEST)
      NU1 = NU/(1.0D0-NU)
      NUNU = 0.5D0*(1.0D0-2.0D0*NU)/(1.0D0-NU)
      D(1,1) = 1.0D0
      D(2,2) = 1.0D0
      D(3,3) = NUNU
      D(4,4) = 1.0D0
      D(1,2) = NU1
      D(2,1) = NU1
      D(1,4) = NU1
      D(4,1) = NU1
      D(2,4) = NU1
      D(4,2) = NU1
      DO 1030 I=1,4
      DO 1020 J=1,4
      D(I,J) = D(I,J)*E*(1.0D0-NU)/((1.0D0-2.0D0*NU)*(1.0D0+NU))
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DCSBRK$*********************************************************
C***********************************************************************
      SUBROUTINE DCSBRK(JACIN, IJACIN, JJACIN, SIDNUM, COSIN,
     *     ICOSIN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE DIRECTION COSINES OF THE OUTWARD NORMAL
C      TO THE SPECIFIED FACE OF A HEXAHEDRAL ELEMENT GIVEN THE
C      JACOBIAN INVERSE
C
C HISTORY
C      RELEASE 2.0  1 FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    1 FEB 1981 (CG)
C
C ARGUMENTS IN
C      JACIN   ARRAY OF DIMENSION (IJACIN,JJACIN). CONTAINS THE
C              INVERSE OF THE TRANSFORMATION JACOBIAN.
C      IJACIN  FIRST DIMENSION OF JACIN (.GE.3)
C      JJACIN  SECOND DIMENSION OF JACIN (.GE.3)
C      SIDNUM  THE SIDE NUMBER FOR WHICH THE OUTWARD NORMAL
C              IS REQUIRED (.LE.6)
C      ICOSIN  DIMENSION OF VECTOR COSIN (.GE.3)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      COSIN   VECTOR OF DIMENSION ICOSIN. CONTAINS THE DIR-
C              ECTION COSINES OF THE OUTWARD NORMAL
C
C ROUTINES CALLED
C      ERRMES  MATVEC
C
C
C     SUBROUTINE DCSBRK(JACIN,IJACIN,JJACIN,SIDNUM,COSIN,ICOSIN,ITEST)
C***********************************************************************
C
      INTEGER DIMEN, ERRMES, ICOSIN, IERROR, IJACIN, ITEST,
     *     IWORK, JJACIN, SIDNUM
      DOUBLE PRECISION AMOD, COSIN, JACIN, SRNAME, WORK
      DIMENSION COSIN(ICOSIN), JACIN(IJACIN,JJACIN), WORK(3)
      DATA DIMEN /3/, IWORK /3/, SRNAME /8H DCSBRK /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IJACIN.LT.3 .OR. JJACIN.LT.3)
     *                      IERROR = 3
                        IF (ICOSIN.LT.3) IERROR = 2
                        IF (SIDNUM.LE.0 .OR. SIDNUM.GT.6)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 GO TO (1060, 1070, 1020, 1050, 1030, 1040), SIDNUM
 1020 WORK(1) = -1.0D0
      WORK(2) = 0.0D0
      WORK(3) = 0.0D0
      GO TO 1080
 1030 WORK(1) = 1.0D0
      WORK(2) = 0.0D0
      WORK(3) = 0.0D0
      GO TO 1080
 1040 WORK(1) = 0.0D0
      WORK(2) = -1.0D0
      WORK(3) = 0.0D0
      GO TO 1080
 1050 WORK(1) = 0.0D0
      WORK(2) = 1.0D0
      WORK(3) = 0.0D0
      GO TO 1080
 1060 WORK(1) = 0.0D0
      WORK(2) = 0.0D0
      WORK(3) = -1.0D0
      GO TO 1080
 1070 WORK(1) = 0.0D0
      WORK(2) = 0.0D0
      WORK(3) = 1.0D0
 1080 CALL MATVEC(JACIN, IJACIN, JJACIN, WORK, IWORK, DIMEN,
     *     DIMEN, COSIN, ICOSIN, ITEST)
      AMOD = DSQRT(COSIN(1)*COSIN(1)+COSIN(2)*COSIN(2)+COSIN(3)*
     *     COSIN(3))
      COSIN(1) = COSIN(1)/AMOD
      COSIN(2) = COSIN(2)/AMOD
      COSIN(3) = COSIN(3)/AMOD
      RETURN
      END
C***********************************************************************
C$SPLIT$DCSQUA$*********************************************************
C***********************************************************************
      SUBROUTINE DCSQUA(JACIN, IJACIN, JJACIN, SIDNUM, COSIN,
     *     ICOSIN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE DIRECTION COSINES OF THE OUTWARD NORMAL
C      TO THE SPECIFIED SIDE OF A QUADRILATERAL ELEMENT GIVEN THE
C      JACOBIAN INVERSE
C
C HISTORY
C      RELEASE 2.0  1 FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    1 FEB 1981 (CG)
C
C ARGUMENTS IN
C      JACIN   ARRAY OF DIMENSION (IJACIN,JJACIN). CONTAINS THE
C              INVERSE OF THE TRANSFORMATION JACOBIAN.
C      IJACIN  FIRST DIMENSION OF JACIN (.GE.2)
C      JJACIN  SECOND DIMENSION OF JACIN (.GE.2)
C      SIDNUM  THE SIDE NUMBER FOR WHICH THE OUTWARD NORMAL
C              IS REQUIRED (.LE.4)
C      ICOSIN  DIMENSION OF VECTOR COSIN (.GE.2)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      COSIN   VECTOR OF DIMENSION ICOSIN. CONTAINS THE DIR-
C              ECTION COSINES OF THE OUTWARD NORMAL
C
C ROUTINES CALLED
C      ERRMES  MATVEC
C
C
C     SUBROUTINE DCSQUA(JACIN,IJACIN,JJACIN,SIDNUM,COSIN,ICOSIN,ITEST)
C***********************************************************************
C
      INTEGER DIMEN, ERRMES, ICOSIN, IERROR, IJACIN, ITEST,
     *     IWORK, JJACIN, SIDNUM
      DOUBLE PRECISION AMOD, COSIN, JACIN, SRNAME, WORK
      DIMENSION COSIN(ICOSIN), JACIN(IJACIN,JJACIN), WORK(2)
      DATA DIMEN /2/, IWORK /2/, SRNAME /8H DCSQUA /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IJACIN.LT.2 .OR. JJACIN.LT.2)
     *                      IERROR = 3
                        IF (ICOSIN.LT.2) IERROR = 2
                        IF (SIDNUM.LE.0 .OR. SIDNUM.GT.4)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 GO TO (1020, 1030, 1040, 1050), SIDNUM
 1020 WORK(1) = -1.0D0
      WORK(2) = 0.0D0
      GO TO 1060
 1030 WORK(1) = 0.0D0
      WORK(2) = 1.0D0
      GO TO 1060
 1040 WORK(1) = 1.0D0
      WORK(2) = 0.0D0
      GO TO 1060
 1050 WORK(1) = 0.0D0
      WORK(2) = -1.0D0
 1060 CALL MATVEC(JACIN, IJACIN, JJACIN, WORK, IWORK, DIMEN,
     *     DIMEN, COSIN, ICOSIN, ITEST)
      AMOD = DSQRT(COSIN(1)*COSIN(1)+COSIN(2)*COSIN(2))
      COSIN(1) = COSIN(1)/AMOD
      COSIN(2) = COSIN(2)/AMOD
      RETURN
      END
C***********************************************************************
C$SPLIT$DCSTRI$*********************************************************
C***********************************************************************
      SUBROUTINE DCSTRI(JACIN, IJACIN, JJACIN, SIDNUM, COSIN,
     *     ICOSIN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE DIRECTION COSINES OF THE OUTWARD NORMAL
C      TO THE SPECIFIED SIDE OF A TRIANGULAR ELEMENT GIVEN THE
C      JACOBIAN INVERSE
C
C HISTORY
C      RELEASE 2.0  1 FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    1 FEB 1981 (CG)
C
C ARGUMENTS IN
C      JACIN   ARRAY OF DIMENSION (IJACIN,JJACIN). CONTAINS THE
C              INVERSE OF THE TRANSFORMATION JACOBIAN.
C      IJACIN  FIRST DIMENSION OF JACIN (.GE.2)
C      JJACIN  SECOND DIMENSION OF JACIN (.GE.2)
C      SIDNUM  THE SIDE NUMBER FOR WHICH THE OUTWARD NORMAL
C              IS REQUIRED (.LE.3)
C      ICOSIN  DIMENSION OF VECTOR COSIN (.GE.2)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      COSIN   VECTOR OF DIMENSION ICOSIN. CONTAINS THE DIR-
C              ECTION COSINES OF THE OUTWARD NORMAL
C
C ROUTINES CALLED
C      ERRMES  MATVEC
C
C
C     SUBROUTINE DCSTRI(JACIN,IJACIN,JJACIN,SIDNUM,COSIN,ICOSIN,ITEST)
C***********************************************************************
C
      INTEGER DIMEN, ERRMES, ICOSIN, IERROR, IJACIN, ITEST,
     *     IWORK, JJACIN, SIDNUM
      DOUBLE PRECISION AMOD, COSIN, JACIN, SRNAME, WORK
      DIMENSION COSIN(ICOSIN), JACIN(IJACIN,JJACIN), WORK(2)
      DATA DIMEN /2/, IWORK /2/, SRNAME /8H DCSTRI /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IJACIN.LT.2 .OR. JJACIN.LT.2)
     *                      IERROR = 3
                        IF (ICOSIN.LT.2) IERROR = 2
                        IF (SIDNUM.LE.0 .OR. SIDNUM.GT.3)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 GO TO (1020, 1030, 1040), SIDNUM
 1020 WORK(1) = 0.5D0
      WORK(2) = -DSQRT(3.0D0)/2.0D0
      GO TO 1050
 1030 WORK(1) = -1.0D0
      WORK(2) = 0.0D0
      GO TO 1050
 1040 WORK(1) = 0.5D0
      WORK(2) = DSQRT(3.0D0)/2.0D0
      GO TO 1050
 1050 CALL MATVEC(JACIN, IJACIN, JJACIN, WORK, IWORK, DIMEN,
     *     DIMEN, COSIN, ICOSIN, ITEST)
      AMOD = DSQRT(COSIN(1)*COSIN(1)+COSIN(2)*COSIN(2))
      COSIN(1) = COSIN(1)/AMOD
      COSIN(2) = COSIN(2)/AMOD
      RETURN
      END
C***********************************************************************
C$SPLIT$DIRECT$*********************************************************
C***********************************************************************
      SUBROUTINE DIRECT(NELE, ELTOP, IELTOP, JELTOP, NF, INF, JNF,
     *     DOFNOD, STEER, ISTEER, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CONSTRUCTS THE STEERING VECTOR TO DIRECT ASSEMBLY OF A
C      SYSTEM MATRIX
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    13 FEB 1980 (KR)
C
C ARGUMENTS IN
C      NELE    ELEMENT NUMBER
C      ELTOP   2D ARRAY CONTAINING ELEMENT TYPE, NUMBER OF
C              NODES ON THE ELEMENT, AND THE ELEMENT TOPOLOGIES
C      IELTOP  FIRST DIMENSION OF ELTOP (.GE. NUMBER OF
C              ELEMENTS IN PROBLEM)
C      JELTOP  SECOND DIMENSION OF ELTOP (.GE. NUMBER OF NODES
C              ON ELEMENT + 2)
C      NF      CONTAINS FREEDOM NUMBERS ASSOCIATED WITH EACH
C              NODE
C      INF     FIRST DIMENSION OF NF (.GE. TOTAL NUMBER OF
C              NODES IN PROBLEM)
C      JNF     SECOND DIMENSION OF NF (.GE. DOFNOD)
C      DOFNOD  NUMBER OF DEGREES OF FREEDOM AT EACH NODE
C      ISTEER  DIMENSION OF VECTOR STEER (.GE. TOTAL NUMBER OF
C              DEGREES OF FREEDOM ON ELEMENT)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      STEER   VECTOR CONTAINING FREEDOM NUMBERS ASSOCIATED
C              WITH ELEMENT NELE, ARRANGED IN LOCAL NODE ORDER
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE DIRECT(NELE, ELTOP, IELTOP, JELTOP, NF, INF, JNF,
C    *     DOFNOD, STEER, ISTEER, ITEST)
C***********************************************************************
C
      INTEGER DOFNOD, ELTOP, ERRMES, IDEG, IELTOP, IERROR,
     *     INF, INOD, ISTEER, ITEST, JELTOP, JNF, JNOD, K,
     *     NELE, NF, NODEL, STEER
      DOUBLE PRECISION SRNAME
      DIMENSION ELTOP(IELTOP,JELTOP), NF(INF,JNF),
     *     STEER(ISTEER)
      DATA SRNAME /8H DIRECT /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (JNF.LT.DOFNOD) IERROR = 3
                        IF (IELTOP.LT.NELE) IERROR = 2
                        IF (NELE.LE.0 .OR. DOFNOD.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 NODEL = ELTOP(NELE,2)
                        IF (ITEST.EQ.-1) GO TO 1020
                        IERROR = 0
                        IF (JELTOP.LT.NODEL+2) IERROR = 4
                        IF (ISTEER.LT.DOFNOD*NODEL) IERROR = 6
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1020 K = 1
      DO 1050 INOD=1,NODEL
      JNOD = ELTOP(NELE,INOD+2)
                        IF (ITEST.EQ.-1) GO TO 1030
                        IERROR = 0
                        IF (INF.LT.JNOD) IERROR = 5
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1030 DO 1040 IDEG=1,DOFNOD
      STEER(K) = NF(JNOD,IDEG)
      K = K + 1
 1040 CONTINUE
 1050 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DISO$*********************************************************
C***********************************************************************
      SUBROUTINE DISO(D, ID, JD, E, NU, NUMSS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS 6 BY 6 STRESS-STRAIN MATRIX FOR 3D ISOTROPIC
C      PROBLEMS
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 --- SERC COPYRIGHT
C      COMMENTED AND MINOR CODE CLARIFICATION  13 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ID      FIRST DIMENSION OF MATRIX D (.GE. 6)
C      JD      SECOND DIMENSION OF D (.GE. 6)
C      E       YOUNG'S MODULUS
C      NU      POISSON'S RATIO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      D       STRESS-STRAIN MATRIX
C      NUMSS   ORDER OF STRESS-STRAIN MATRIX (6)
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE DISO(D, ID, JD, E, NU, NUMSS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, ID, IERROR, ITEST, J, JD, NUMSS
      DOUBLE PRECISION D, E, NU, NU1, NUNU, SRNAME
      DIMENSION D(ID,JD)
      DATA SRNAME /8H DISO   /
      NUMSS = 6
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NU.LT.0.0D0 .OR. NU.GE.0.5D0)
     *                      IERROR = 2
                        IF (ID.LT.NUMSS .OR. JD.LT.NUMSS)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(D, ID, JD, NUMSS, NUMSS, ITEST)
      NU1 = NU/(1.0D0-NU)
      NUNU = 0.5D0*(1.0D0-2.0D0*NU)/(1.0D0-NU)
      D(1,1) = 1.0D0
      D(2,2) = 1.0D0
      D(3,3) = 1.0D0
      D(1,2) = NU1
      D(2,1) = NU1
      D(1,3) = NU1
      D(3,1) = NU1
      D(2,3) = NU1
      D(3,2) = NU1
      D(4,4) = NUNU
      D(5,5) = NUNU
      D(6,6) = NUNU
      DO 1030 I=1,6
      DO 1020 J=1,6
      D(I,J) = D(I,J)*E/(2.0D0*(1.0D0+NU)*NUNU)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DPLT$*********************************************************
C***********************************************************************
      SUBROUTINE DPLT(D, ID, JD, E, NU, T, NUMSS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS 3 BY 3 STRESS-STRAIN MATRIX FOR USE IN PLATE
C      BENDING PROBLEMS
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    13 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ID      FIRST DIMENSION OF D (.GE. 3)
C      JD      SECOND DIMENSION OF D (.GE. 3)
C      E       YOUNG'S MODULUS
C      NU      POISSON'S RATIO
C      T       THICKNESS OF PLATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      D       STRESS-STRAIN MATRIX
C      NUMSS   ORDER OF STRESS-STRAIN MATRIX (3)
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE DPLT(D, ID, JD, E, NU, T, NUMSS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, ID, IERROR, ITEST, J, JD, NUMSS
      DOUBLE PRECISION D, E, NU, SRNAME, T, T3
      DIMENSION D(ID,JD)
      DATA SRNAME /8H DPLT   /
      NUMSS = 3
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NU.LT.0.0D0 .OR. NU.GE.0.5D0)
     *                      IERROR = 2
                        IF (ID.LT.NUMSS .OR. JD.LT.NUMSS)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(D, ID, JD, NUMSS, NUMSS, ITEST)
      T3 = T**3
      D(1,1) = 1.0D0
      D(2,2) = 1.0D0
      D(3,3) = (1.0D0-NU)*0.5D0
      D(1,2) = NU
      D(2,1) = NU
      DO 1030 I=1,3
      DO 1020 J=1,3
      D(I,J) = D(I,J)*T3*E/(12.0D0*(1.0D0-NU*NU))
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DPSN$*********************************************************
C***********************************************************************
      SUBROUTINE DPSN(D, ID, JD, E, NU, NUMSS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE 3 BY 3 STRESS-STRAIN MATRIX FOR USE IN PLANE
C      STRAIN PROBLEMS
C
C HISTORY
C      RELEASE 1.1  29 OCT 1980 --- SERC COPYRIGHT
C      COMMENTED    14 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ID      FIRST DIMENSION OF ARRAY D (.GE. 3)
C      JD      SECOND DIMENSION OF D (.GE. 3)
C      E       YOUNG'S MODULUS
C      NU      POISSON'S RATIO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      D       STRESS-STRAIN MATRIX FOR PLANE STRAIN
C      NUMSS   ORDER OF STRESS-STRAIN MATRIX (3)
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE DPSN(D, ID, JD, E, NU, NUMSS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, ID, IERROR, ITEST, J, JD, NUMSS
      DOUBLE PRECISION D, E, NU, NU1, NUNU, SRNAME
      DIMENSION D(ID,JD)
      DATA SRNAME /8H DPSN   /
      NUMSS = 3
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NU.LT.0.0D0 .OR. NU.GE.0.5D0)
     *                      IERROR = 2
                        IF (ID.LT.NUMSS .OR. JD.LT.NUMSS)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(D, ID, JD, NUMSS, NUMSS, ITEST)
      NU1 = NU/(1.0D0-NU)
      NUNU = (0.5D0-NU)/(1.0D0-NU)
      D(1,1) = 1.0D0
      D(2,2) = 1.0D0
      D(3,3) = NUNU
      D(1,2) = NU1
      D(2,1) = NU1
      DO 1030 I=1,3
      DO 1020 J=1,3
      D(I,J) = D(I,J)*E/(2.0D0*(1.0D0+NU)*NUNU)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DPSS$*********************************************************
C***********************************************************************
      SUBROUTINE DPSS(D, ID, JD, E, NU, NUMSS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS 3 BY 3 STRESS-STRAIN MATRIX FOR USE IN PLANE
C      STRESS PROBLEMS
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ID      FIRST DIMENSION OF D (.GE. 3)
C      JD      SECOND DIMENSION OF D (.GE. 3)
C      E       YOUNG'S MODULUS
C      NU      POISSON'S RATIO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      D       STRESS-STRAIN MATRIX FOR PLANE STRESS
C      NUMSS   ORDER OF STRESS-STRAIN MATRIX (3)
C
C ROUTINES CALLED
C      MATNUL  ERRMES
C
C
C     SUBROUTINE DPSS(D, ID, JD, E, NU, NUMSS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, ID, IERROR, ITEST, J, JD, NUMSS
      DOUBLE PRECISION D, E, NU, SRNAME
      DIMENSION D(ID,JD)
      DATA SRNAME /8H DPSS   /
      NUMSS = 3
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NU.LT.0.0D0 .OR. NU.GE.0.5D0)
     *                      IERROR = 2
                        IF (ID.LT.NUMSS .OR. JD.LT.NUMSS)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(D, ID, JD, NUMSS, NUMSS, ITEST)
      D(1,1) = 1.0D0
      D(2,2) = 1.0D0
      D(3,3) = (1.0D0-NU)*0.5D0
      D(1,2) = NU
      D(2,1) = NU
      DO 1030 I=1,3
      DO 1020 J=1,3
      D(I,J) = D(I,J)*E/(1.0D0-NU*NU)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$DYAD$*********************************************************
C***********************************************************************
      SUBROUTINE DYAD(V, IV, W, IW, A, IA, JA, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE DYAD MATRIX A FROM TWO VECTORS V AND W
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979  (CG) --- SERC COPYRIGHT
C      COMMENTED    14 FEB 1980  (KR)
C
C ARGUMENTS IN
C      V       FIRST VECTOR IN MULTIPCATION
C      IV      DIMENSION OF VECTOR V (.GE. N)
C      W       SECOND VECTOR IN MULTIPLICATION
C      IW      DIMENSION OF VECTOR W (.GE. N)
C      IA      FIRST DIMENSION OF DYADIC ARRAY A (.GE. N)
C      JA      SECOND DIMENSION OF A (.GE. N)
C      N       NUMBER OF ELEMENTS OF VECTORS V AND W TO BE USED
C              IN FORMING THE DYAD
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       DYADIC ARRAY FORMED BY PRODUCT OF V AND W
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE DYAD(V, IV, W, IW, A, IA, JA, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, IV, IW, J, JA,
     *     N
      DOUBLE PRECISION A, SRNAME, V, W
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H DYAD   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 3
                        IF (N.GT.IV) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        IF (N.GT.IA .OR. N.GT.JA) IERROR = 4
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,N
      DO 1020 J=1,N
      A(I,J) = V(I)*W(J)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$ELGEOM$*********************************************************
C***********************************************************************
      SUBROUTINE ELGEOM(NELE, ELTOP, IELTOP, JELTOP, COORD,
     *     ICOORD, JCOORD, GEOM, IGEOM, JGEOM, DIMEN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CONSTRUCTS THE ELEMENT GEOMETRY ARRAY FOR THE SPECIFIED
C      ELEMENT IN THE LOCAL NODE ORDER
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 FEB 1980 (KR)
C
C ARGUMENTS IN
C      NELE    ELEMENT NUMBER FOR WHICH THE NODAL COORDINATE
C              ARRAY IS REQUIRED
C      ELTOP   CONTAINS ELEMENT TYPE, NUMBER OF NODES, AND
C              ELEMENT TOPOLOGIES FOR ALL THE ELEMENTS
C      IELTOP  FIRST DIMENSION OF ELTOP (.GE. MAXIMUM NODE
C              NUMBER ON REGION)
C      JELTOP  SECOND DIMENSION OF ELTOP (.GE. NUMBER OF NODES
C              ON ELEMENT + 2)
C      COORD   COORD(I,J) CONTAINS THE J'TH GLOBAL COORDINATE
C              OF THE I'TH NODE
C      ICOORD  FIRST DIMENSION OF COORD (.GE. MAXIMUM NUMBER OF
C              NODES IN THE MESH)
C      JCOORD  SECOND DIMENSION OF COORD (.GE. DIMEN)
C      IGEOM   FIRST DIMENSION OF ARRAY GEOM (.GE. NUMBER OF
C              NODES ON THE ELEMENT)
C      JGEOM   SECOND DIMENSION OF GEOM (.GE. DIMEN)
C      DIMEN   DIMENSIONALITY OF THE MESH
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      GEOM    CONTAINS GLOBAL COORDINATES OF THE NODES
C              ASSOCIATED WITH ELEMENT NELE IN THE LOCAL NODE
C              NUMBERING ORDER
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ELGEOM(NELE, ELTOP, IELTOP, JELTOP, COORD, ICOORD,
C    *     JCOORD, GEOM, IGEOM, JGEOM, DIMEN, ITEST)
C***********************************************************************
C
      INTEGER DIMEN, ELTOP, ERRMES, ICOORD, IDIM, IELTOP, IERROR,
     *     IGEOM, INOD, ITEST, JCOORD, JELTOP, JGEOM, JNOD,
     *     NELE, NODEL
      DOUBLE PRECISION COORD, GEOM, SRNAME
      DIMENSION COORD(ICOORD,JCOORD), ELTOP(IELTOP,JELTOP),
     *     GEOM(IGEOM,JGEOM)
      DATA SRNAME /8H ELGEOM /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (JGEOM.LT.DIMEN) IERROR = 4
                        IF (JCOORD.LT.DIMEN) IERROR = 3
                        IF (IELTOP.LT.NELE) IERROR = 2
                        IF (NELE.LE.0 .OR. DIMEN.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010                   NODEL = ELTOP(NELE,2)
                        IF (ITEST.EQ.-1) GO TO 1020
                        IERROR = 0
                        IF (JELTOP.LT.NODEL+2) IERROR = 5
                        IF (IGEOM.LT.NODEL) IERROR = 7
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1020                   DO 1050 JNOD=1,NODEL
                        INOD = ELTOP(NELE,JNOD+2)
                        IF (ITEST.EQ.-1) GO TO 1030
                        IERROR = 0
                        IF (ICOORD.LT.INOD) IERROR = 6
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1030                   DO 1040 IDIM=1,DIMEN
                        GEOM(JNOD,IDIM) = COORD(INOD,IDIM)
 1040                   CONTINUE
 1050                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$ERRMES$*********************************************************
C***********************************************************************
      INTEGER FUNCTION ERRMES(ITEST, IERROR, SRNAME)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUE OF IERROR OR TERMINATES THE PROGRAM,
C      PRINTING A FAILURE MESSAGE
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (CG) 
C      COMMENTED    14 FEB 1980 (KR)
C
C ARGUMENTS IN
C      ITEST   CONTAINS EITHER 0 (HARD FAIL) OR 1 (SOFT FAIL).
C              ANY OTHER ENTRY GIVES HARD FAIL.
C      IERROR  CONTAINS THE NUMBER OF THE DETECTED ERROR
C      SRNAME  CONTAINS UP TO 8 CHARACTERS - USUALLY A LIBRARY
C              ROUTINE NAME
C
C ARGUMENTS OUT
C      ERRMES  ROUTINE NAME, CONTAINS THE VALUE OF IERROR
C
C ROUTINES CALLED
C      CAN CALL AUXILIARY ROUTINE IN SOME VERSIONS OF LIBRARY
C
C
C     INTEGER FUNCTION ERRMES(ITEST, IERROR, SRNAME)
C***********************************************************************
C
      INTEGER IERROR, ITEST, UNIT
      DOUBLE PRECISION SRNAME
C
C     PRIME
C
      DATA UNIT /1/
C
C     IBM
C
C     DATA UNIT /6/
C
C     GEC
C
C     DATA UNIT /2/
C
C     HARD FAILURE
C
      IF (ITEST.EQ.-99) GO TO 1020
      IF (ITEST.EQ.1 .OR. IERROR.EQ.0) GO TO 1010
      WRITE (UNIT,9010) SRNAME, IERROR
      STOP
C
C     SOFT FAILURE
C
 1010 ERRMES = IERROR
      RETURN
C
C     TO RETURN RELEASE MESSAGE
C
 1020 WRITE (UNIT,9020)
      RETURN
 9010 FORMAT (43H ERROR DETECTED BY LEVEL 0 LIBRARY ROUTINE , A8,
     *     11H - ITEST = , I5//)                                    
 9020 FORMAT (25H RELEASE 2.0  -  1 SEP 82)
      END
C***********************************************************************
C$SPLIT$GAURDN$*********************************************************
C***********************************************************************
      SUBROUTINE GAURDN(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
     *     IROPIV, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      DECOMPOSES A REAL UNSYMMETRIC MATRIX OF ORDER N INTO
C      TRIANGULAR MATRICES USING GAUSSIAN ELIMINATION WITH
C      PARTIAL PIVOTING
C
C HISTORY
C      RELEASE 1.1 29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED   10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSIONS (IA,JA).  ON ENTRY, CONTAINS
C              THE ELEMENTS OF THE BAND MATRIX
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.MIN(2*HBAND-1,N))
C      IAL     FIRST DIMENSION OF ARRAY AL (.GE.N)
C      JAL     SECOND DIMENSION OF ARRAY AL (.GE.HBAND-1)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF MATRIX A
C      IROPIV  DIMENSION OF VECTOR ROPIV
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ARRAY OF DIMENSIONS (IA,JA).  ON EXIT, CONTAINS
C              THE UPPER TRIANGULAR MATRIX U, WITH THE
C              DIAGONAL ELEMENTS OF U STORED AS THEIR
C              RECIPROCALS.  THE I'TH ROW OF U IS STORED IN THE
C              I'TH ROW OF A, STARTING WITH THE DIAGONAL
C              ELEMENT OF U IN A(I,1)
C      ROPIV   VECTOR OF LENGTH IROPIV, CONTAINING DETAILS OF
C              ROW INTERCHANGES.  IF NO INTERCHANGE OCCURS AT
C              THE R'TH MAJOR STEP THEN ROPIV(R)=R; IF THE R
C              AND J ROWS ARE INTERCHANGED THEN ROPIV(R)=J
C
C ROUTINES CALLED
C      VEPS    ERRMES
C
C
C     SUBROUTINE GAURDN(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
C    *     IROPIV, ITEST)
C***********************************************************************
      INTEGER ERRMES, HBAND, I, IA, IAL, IERROR, IK, IR, IROPIV,
     *     ITEST, IW, J, JA, JAL, JJ, JR, K, L, M, N, ROPIV, JTEST
      DOUBLE PRECISION A, AL, EPS, ONE, SRNAME, VEPS, X, Y,
     *     ZERO
      DIMENSION A(IA,JA), AL(IAL,JAL), ROPIV(IROPIV)
      DATA ONE /1.0D0/, SRNAME /8H GAURDN /, ZERO /0.0D0/
      JTEST = ITEST
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IA.LT.N .OR. JA.LT.2*HBAND-1)
     *                      IERROR = 4
                        IF (IAL.LT.N .OR. JAL.LT.HBAND) IERROR = 3
                        IF (IROPIV.LT.N) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IERROR = 5
      EPS = VEPS(X)
      IW = MIN0(N,2*HBAND-1)
      M = HBAND
      K = IW - HBAND
      IF (K.LE.0) GO TO 1050
      DO 1040 I=1,K
      L = IW - M
      DO 1020 J=1,M
      JJ = J + L
      A(I,J) = A(I,JJ)
 1020 CONTINUE
      M = M + 1
      DO 1030 J=M,IW
      A(I,J) = ZERO
 1030 CONTINUE
 1040 CONTINUE
 1050 M = N - IW + HBAND + 1
      J = IW + 1
      IF (M.GT.N) GO TO 1080
      DO 1070 I=M,N
      J = J - 1
      DO 1060 K=J,IW
      A(I,K) = ZERO
C+++++
C     ZEROS INSERTED
C
 1060 CONTINUE
 1070 CONTINUE
 1080 DO 1110 I=1,N
      X = ZERO
      DO 1090 J=1,IW
      X = X + DABS(A(I,J))
 1090 CONTINUE
      IF (X.GT.ZERO) GO TO 1100
      IR = I
      GO TO 1200
C+++++
C     ROW NORMS OF A CALCULATED AND THEIR RECIPROCALS STORED
C     IN FIRST COLUMN OF AL
C
 1100 AL(I,1) = ONE/X
 1110 CONTINUE
      IERROR = 6
      DO 1190 IR=1,N
      X = ZERO
      M = MIN0(IR+HBAND-1,N)
      DO 1120 I=IR,M
      Y = DABS(A(I,1))*AL(I,1)
      IF (Y.LE.X) GO TO 1120
      X = Y
      J = I
 1120 CONTINUE
C+++++
C     IR'TH PIVOT ELEMENT SELECTED.
C
      IF (X.LT.EPS) GO TO 1200
      ROPIV(IR) = J
      IF (J.EQ.IR) GO TO 1140
      DO 1130 I=1,IW
      X = A(IR,I)
      A(IR,I) = A(J,I)
      A(J,I) = X
C+++++
C     ROW IR AND J INTERCHANGED.
C
 1130 CONTINUE
      AL(J,1) = AL(IR,1)
 1140 JR = IR + 1
      Y = ONE/A(IR,1)
      IF (JR.GT.M) GO TO 1180
      DO 1170 I=JR,M
      X = A(I,1)*Y
      IF (IW.LT.2) GO TO 1160
      DO 1150 J=2,IW
      A(I,J-1) = A(I,J) - X*A(IR,J)
 1150 CONTINUE
 1160 IK = I - IR
      AL(IR,IK) = X
      A(I,IW) = ZERO
 1170 CONTINUE
C+++++
C     ELIMINATION COMPLETED
C
 1180 A(IR,1) = Y
 1190 CONTINUE
      RETURN
 1200 A(IR,1) = ZERO
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      RETURN
      END
C***********************************************************************
C$SPLIT$GAUSOL$*********************************************************
C***********************************************************************
      SUBROUTINE GAUSOL(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
     *     IROPIV, R, IR, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE SOLUTION OF A SET OF UNSYMMETRIC REAL
C      BANDED EQUATIONS WITH A SINGLE RHS USING GAUSSIAN
C      ELIMINATION WITH PARTIAL PIVOTING
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  ON ENTRY, CONTAINS
C              THE ELEMENTS OF THE BAND MATRIX
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.MIN(2*HBAND-1,N))
C      IAL     FIRST DIMENSION OF ARRAY AL (.GE.N)
C      JAL     SECOND DIMENSION OF ARRAY AL (.GE.HBAND-1)
C      N       ORDER OF BAND MATRIX A
C      HBAND   SEMI-BANDWIDTH OF MATRIX A
C      IROPIV  DIMENSION OF VECTOR ROPIV (.GE.N)
C      R       ON ENTRY, CONTAINS THE VECTOR OF RHS'S
C      IR      DIMENSION OF R (.GE.N)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ON EXIT, CONTAINS THE UPPER TRIANGULAR MATRIX U,
C              WITH THE DIAGONAL ELEMENTS OF U STORED AS THEIR
C              RECIPROCALS.  THE I'TH ROW OF U IS STORED IN THE
C              I'TH ROW OF A, WITH THE DIAGONAL ELEMENT OF U IN
C              THE LOCATION A(I,1)
C      AL      CONTAINS THE SUB-DIAGONAL ELEMENTS OF L, THE
C              LOWER TRIANGULAR MATRIX.  THE MULTIPLIERS L(I,R)
C              OBTAINED AT THE R'TH MAJOR STEP OF THE
C              ELIMINATION ARE STORED IN A(R,I-R)
C      ROPIV   CONTAINS DETAILS OF THE ROW INTERCHANGES.
C              ROPIV(R)=R IF NO INTERCHANGE OCCURS AT THE R'TH
C              MAJOR STEP; IF ROWS R AND J ARE INTERCHANGED
C              THEN ROPIV(R)=J
C      R       ON EXIT, CONTAINS THE SOLUTION VECTOR
C
C ROUTINES CALLED
C      VEPS    ERRMES
C
C
C     SUBROUTINE GAUSOL(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
C    *     IROPIV, R, IR, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IAL, IERROR, II, IK, IR,
     *     IRO, IROPIV, ITEST, IW, J, JA, JAL, JJ, JR, K, KK,
     *     L, M, N, ROPIV, JTEST
      DOUBLE PRECISION A, AL, EPS, ONE, R, SRNAME, VEPS, X,
     *     Y, ZERO
      DIMENSION A(IA,JA), AL(IAL,JAL), R(IR), ROPIV(IROPIV)
      DATA ONE /1.0D0/, SRNAME /8H GAUSOL /, ZERO /0.0D0/
      JTEST = ITEST
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IA.LT.N .OR. JA.LT.2*HBAND-1)
     *                      IERROR = 5
                        IF (IAL.LT.N .OR. JAL.LT.HBAND) IERROR = 4
                        IF (IROPIV.LT.N) IERROR = 3
                        IF (IR.LT.N) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(JTEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IERROR = 6
      EPS = VEPS(X)
      IW = MIN0(N,2*HBAND-1)
      M = HBAND
      K = IW - HBAND
      IF (K.LE.0) GO TO 1050
      DO 1040 I=1,K
      L = IW - M
      DO 1020 J=1,M
      JJ = J + L
      A(I,J) = A(I,JJ)
 1020 CONTINUE
      M = M + 1
      DO 1030 J=M,IW
      A(I,J) = ZERO
 1030 CONTINUE
 1040 CONTINUE
 1050 M = N - IW + HBAND + 1
      J = IW + 1
      IF (M.GT.N) GO TO 1080
      DO 1070 I=M,N
      J = J - 1
      DO 1060 K=J,IW
      A(I,K) = ZERO
C+++++
C     INSERT ZEROS
C
 1060 CONTINUE
 1070 CONTINUE
 1080 DO 1110 I=1,N
      X = ZERO
      DO 1090 J=1,IW
      X = X + DABS(A(I,J))
 1090 CONTINUE
      IF (X.GT.ZERO) GO TO 1100
      IRO = I
      GO TO 1270
C+++++
C     ROPIV NORMS OF A CALCULATED AND THEIRO RECIPROCALS
C     STORED IN FIROST COLUMN OF AL
C
 1100 AL(I,1) = ONE/X
 1110 CONTINUE
      IERROR = 7
      DO 1190 IRO=1,N
      X = ZERO
      M = MIN0(IRO+HBAND-1,N)
      DO 1120 I=IRO,M
      Y = DABS(A(I,1))*AL(I,1)
      IF (Y.LE.X) GO TO 1120
      X = Y
      J = I
 1120 CONTINUE
C+++++
C     IRO'TH PIVOT ELEMENT SELECTED
C
      IF (X.LT.EPS) GO TO 1270
      ROPIV(IRO) = J
      IF (J.EQ.IRO) GO TO 1140
      DO 1130 I=1,IW
      X = A(IRO,I)
      A(IRO,I) = A(J,I)
      A(J,I) = X
C+++++
C     ROW PIVOTS IRO AND J INTERCHANGED
C
 1130 CONTINUE
      AL(J,1) = AL(IRO,1)
 1140 JR = IRO + 1
      Y = ONE/A(IRO,1)
      IF (JR.GT.M) GO TO 1180
      DO 1170 I=JR,M
      X = A(I,1)*Y
      IF (IW.LT.2) GO TO 1160
      DO 1150 J=2,IW
      A(I,J-1) = A(I,J) - X*A(IRO,J)
 1150 CONTINUE
 1160 IK = I - IRO
      AL(IRO,IK) = X
      A(I,IW) = ZERO
 1170 CONTINUE
C+++++
C     ELIMINATION COMPLETE
C
 1180 A(IRO,1) = Y
 1190 CONTINUE
      M = HBAND - 1
      DO 1220 K=1,N
      M = MIN0(M+1,N)
      J = ROPIV(K)
      IF (J.EQ.K) GO TO 1200
      X = R(K)
C+++++
C     ROW PIVOTS K AND J INTERCHANGED
C
      R(K) = R(J)
      R(J) = X
 1200 IK = K + 1
      IF (IK.GT.M) GO TO 1230
      X = R(K)
      DO 1210 I=IK,M
      II = I - K
      R(I) = R(I) - X*AL(K,II)
C+++++
C     FORWARD SUBSTITUTION COMPLETE
C
 1210 CONTINUE
 1220 CONTINUE
 1230 DO 1260 K=1,N
      M = MIN0(K,IW)
      I = N + 1 - K
      II = I - 1
      Y = A(I,1)
      X = R(I)
      IF (M.EQ.1) GO TO 1250
      DO 1240 J=2,M
      KK = J + II
      X = X - A(I,J)*R(KK)
 1240 CONTINUE
C+++++
C     BACKWARD SUBSTITUTION COMPLETE
C
 1250 R(I) = X*Y
 1260 CONTINUE
      RETURN
 1270 A(IRO,1) = ZERO
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      RETURN
      END
C***********************************************************************
C$SPLIT$GAUSUB$*********************************************************
C***********************************************************************
      SUBROUTINE GAUSUB(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
     *     IROPIV, R, IR, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE SOLUTION OF A SET OF UNSYMMETRIC REAL
C      BANDED LINEAR EQUATIONS WITH A SINGLE RHS.  THE BANDED
C      MATRIX HAS PREVIOUSLY BEEN DECOMPOSED INTO TRIANGULAR
C      MATRICES USING GAURDN
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSIONS (IA,JA).  ON ENTRY, CONTAINS
C              THE ELEMENTS OF THE BAND MATRIX IN LU FORM,
C              AFTER PROCESSING BY GAURDN
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.MIN(2*HBAND-1,N))
C      IAL     FIRST DIMENSION OF AL (.GE.N)
C      JAL     SECOND DIMENSION OF AL (.GE.HBAND-1)
C      N       ORDER OF BANDED MATRIX A
C      HBAND   SEMI-BANDWIDTH OF A
C      ROPIV   VECTOR OF DIMENSION IROPIV.  CONTAINS DETAILS
C              OF ROW INTERCHANGES PERFORMED BY GAURDN
C      IROPIV  DIMENSION OF ROPIV (.GE.N)
C      R       ON ENTRY, CONTAINS THE VECTOR OF THE RHS,
C              LENGTH IR
C      IR      DIMENSION OF R (.GE.N)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      R       ON EXIT, CONTAINS SOLUTION VECTOR
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE GAUSUB(A, IA, JA, AL, IAL, JAL, N, HBAND, ROPIV,
C    *     IROPIV, R, IR, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IAL, IERROR, II, IK, IR,
     *     IROPIV, ITEST, IW, J, JA, JAL, K, KK, M, N, ROPIV
      DOUBLE PRECISION A, AL, R, SRNAME, X, Y
      DIMENSION A(IA,JA), AL(IAL,JAL), R(IR), ROPIV(IROPIV)
      DATA SRNAME /8H GAUSUB /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IR.LT.N) IERROR = 5
                        IF (IA.LT.N .OR. JA.LT.2*HBAND-1)
     *                      IERROR = 4
                        IF (IAL.LT.N .OR. JAL.LT.HBAND) IERROR = 3
                        IF (IROPIV.LT.N) IERROR = 2
                        IF (N.LE.0 .OR. HBAND.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IW = MIN0(N,2*HBAND-1)
      M = HBAND - 1
      DO 1040 K=1,N
      M = MIN0(M+1,N)
      J = ROPIV(K)
      IF (J.EQ.K) GO TO 1020
      X = R(K)
C+++++
C     ROWS K AND J INTERCHANGED
C
      R(K) = R(J)
      R(J) = X
 1020 IK = K + 1
      IF (IK.GT.M) GO TO 1050
      X = R(K)
      DO 1030 I=IK,M
      II = I - K
      R(I) = R(I) - X*AL(K,II)
C+++++
C     FORWARD SUBSTITUTION COMPLETE
C
 1030 CONTINUE
 1040 CONTINUE
 1050 DO 1080 K=1,N
      M = MIN0(K,IW)
      I = N + 1 - K
      II = I - 1
      Y = A(I,1)
      X = R(I)
      IF (M.EQ.1) GO TO 1070
      DO 1060 J=2,M
      KK = J + II
      X = X - A(I,J)*R(KK)
 1060 CONTINUE
C+++++
C     BACKWARD SUBSTITUTION COMPLETE
C
 1070 R(I) = X*Y
 1080 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$HOUSE$*********************************************************
C***********************************************************************
      SUBROUTINE HOUSE(A, IA, JA, T, IT, JT, DIAG, IDIAG, SUB,
     *     ISUB, N, TOL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      USES HOUSEHOLDER'S METHOD TO REDUCE A REAL SYMMETRIC
C      MATRIX TO TRIDIAGONAL FORM FOR USE WITH QLVAL, QLVEC
C      A IS STORED AS A FULL MATRIX
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    19 FEB 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY CONTAINING THE ELEMENTS OF THE SYMMETRIC
C              MATRIX
C      IA      FIRST DIMENSION OF A (.GE. N)
C      JA      SECOND DIMENSION OF A (.GE. N)
C      IT      FIRST DIMENSION OF ARRAY T (.GE. N)
C      JT      SECOND DIMENSION OF T (.GE. N)
C      IDIAG   DIMENSION OF VECTOR DIAG (.GE. N)
C      ISUB    DIMENSION OF VECTOR SUB (.GE. N)
C      N       ORDER OF MATRIX A
C      TOL     VALUE OF RMIN/EPS, WHERE RMIN IS THE SMALLEST
C              POSITIVE NUMBER EXACTLY REPRESENTABLE ON THE
C              COMPUTER, AND EPS IS THE SMALLEST POSITIVE
C              NUMBER SUCH THAT 1.+EPS>1.
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      T       CONTAINS THE ORTHOGONAL MATRIX 'Q', THE PRODUCT
C              OF THE HOUSEHOLDER TRANSFORMATION MATRICES
C      DIAG    CONTAINS DIAGONAL ELEMENTS OF TRIDIAGONAL MATRIX
C      SUB     CONTAINS THE N-1 OFF-DIAGONAL ELEMENTS OF THE
C              TRIDIAGONAL MATRIX STORED IN SUB(2) TO SUB(N).
C              SUB(1)=0.
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE HOUSE(A, IA, JA, T, IT, JT, DIAG, IDIAG,
C    *     SUB, ISUB, N, TOL, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IDIAG, IERROR, II, ISUB, IT, ITEST,
     *     J, JA, J1, JT, K, L, N
      DOUBLE PRECISION A, DIAG, F, G, H, HH, SRNAME, SUB, T,
     *     TOL
      DIMENSION A(IA,JA), DIAG(IDIAG), SUB(ISUB), T(IT,JT)
      DATA SRNAME /8H HOUSE  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IDIAG.LT.N .OR. ISUB.LT.N) IERROR = 2
                        IF (IA.LT.N .OR. JA.LT.N) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,N
      DO 1020 J=1,I
      T(I,J) = A(I,J)
 1020 CONTINUE
 1030 CONTINUE
      IF (N.EQ.1) GO TO 1150
      DO 1140 II=2,N
      I = N - II + 2
      L = I - 2
      F = T(I,I-1)
      G = 0.0D0
      IF (L.EQ.0) GO TO 1050
      DO 1040 K=1,L
      G = G + T(I,K)*T(I,K)
C+++++
C     IF G IS TOO SMALL FOR ORTHOGONALITY TO BE GUARANTEED THE
C     TRANSFORMATION IS SKIPPED
C
 1040 CONTINUE
 1050 H = G + F*F
      IF (G.GT.TOL) GO TO 1060
      SUB(I) = F
      H = 0.0D0
      GO TO 1130
 1060 L = L + 1
      G = DSQRT(H)
      IF (F.GE.0.0D0) G = -G
      SUB(I) = G
      H = H - F*G
      T(I,I-1) = F - G
      F = 0.0D0
      DO 1100 J=1,L
C+++++
C     FORM ELEMENT OF A*U
C
      T(J,I) = T(I,J)/H
      G = 0.0D0
      DO 1070 K=1,J
      G = G + T(J,K)*T(I,K)
 1070 CONTINUE
      J1 = J + 1
      IF (J1.GT.L) GO TO 1090
      DO 1080 K=J1,L
C+++++
C     FORM ELEMENT OF P
C
      G = G + T(K,J)*T(I,K)
 1080 CONTINUE
 1090 SUB(J) = G/H
C+++++
C     FORM K
C
      F = F + G*T(J,I)
C+++++
C     FORM REDUCED A
C
 1100 CONTINUE
      HH = F/(H+H)
      DO 1120 J=1,L
      F = T(I,J)
      G = SUB(J) - HH*F
      SUB(J) = G
      DO 1110 K=1,J
      T(J,K) = T(J,K) - F*SUB(K) - G*T(I,K)
 1110 CONTINUE
 1120 CONTINUE
 1130 DIAG(I) = H
 1140 CONTINUE
C+++++
C     ACCUMULATION OF TRANSFORMATION MATRICES
C
 1150 SUB(1) = 0.0D0
      DIAG(1) = 0.0D0
      DO 1210 I=1,N
      L = I - 1
      IF (DIAG(I).EQ.0.0D0) GO TO 1190
      DO 1180 J=1,L
      G = 0.0D0
      DO 1160 K=1,L
      G = G + T(I,K)*T(K,J)
 1160 CONTINUE
      DO 1170 K=1,L
      T(K,J) = T(K,J) - G*T(K,I)
 1170 CONTINUE
 1180 CONTINUE
 1190 DIAG(I) = T(I,I)
      T(I,I) = 1.0D0
      IF (L.EQ.0) GO TO 1210
      DO 1200 J=1,L
      T(I,J) = 0.0D0
      T(J,I) = 0.0D0
 1200 CONTINUE
 1210 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$JACO$*********************************************************
C***********************************************************************
      SUBROUTINE JACO(A, IA, JA, DIAG, IDIAG, SUB, ISUB, N, HBAND,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      REDUCES A REAL SYMMETRIC BAND MATRIX TO TRIDIAGONAL FORM
C      USING JACOBI ROTATIONS, FOR USE WITH QLVQL OR QLVEC.
C      THE LOWER TRIANGLE OF THE MATRIX IS STORED IN A
C      RECTANGULAR ARRAY.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    26 FEB 1980 (KR)
C
C ARGUMENTS IN
C      A       CONTAINS THE ELEMENTS OF THE LOWER TRIANGLE OF
C              THE POSITIVE DEFINITE BAND MATRIX
C      IA      FIRST DIMENSION OF A (.GE. N)
C      JA      SECOND DIMENSION OF A (.GE. HBAND)
C      IDIAG   DIMENSION OF VECTOR DIAG (.GE. N)
C      ISUB    DIMENSION OF VECTOR SUB (.GE. N)
C      N       ORDER OF MATRIX A
C      HBAND   SEMI-BANDWIDTH OF MATRIX A (INCLUDES DIAGONAL)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       DESTROYED ON SUCCESFUL EXIT
C      DIAG    CONTAINS THE DIAGONAL ELEMENTS OF THE
C              TRIDIAGONAL MATRIX
C      SUB     CONTAINS THE N-1 OFF-DIAGONAL ELEMENTS OF THE
C              TRIDIAGONAL MATRIX STORED IN SUB(2) TO SUB(N),
C              WITH SUB(1)=0
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE JACO(A, IA, JA, DIAG, IDIAG, SUB, ISUB, N, HBAND,
C    *     ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IDIAG, IERROR, IR, IRR,
     *     ISUB, ITEST, IUGL, J, J2, JA, JL, JM, K, KR, L,
     *     M, MAXL, MAXR, N, N2
      DOUBLE PRECISION A, B, C, C2, CS, DIAG, G, S, S2, SRNAME,
     *     SUB, U, U1
      DIMENSION A(IA,JA), DIAG(IDIAG), SUB(ISUB)
      DATA SRNAME /8H JACO   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (ISUB.LT.N) IERROR = 4
                        IF (IDIAG.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,N
      DO 1020 J=1,HBAND
      L = HBAND + 1 - J
      K = I + 1 - L
      IF (K.LE.0) GO TO 1020
      A(K,L) = A(I,J)
 1020 CONTINUE
 1030 CONTINUE
      KR = HBAND - 1
      DO 1050 I=1,KR
      M = HBAND - I
      DO 1040 J=1,M
      K = N + 1 - I
      L = HBAND + 1 - J
      A(K,L) = 0.0
 1040 CONTINUE
 1050 CONTINUE
      M = HBAND - 1
      N2 = N - 2
      IF (N2.LT.1) GO TO 1140
      DO 1130 K=1,N2
      MAXR = M
      IF (N-K.LT.M) MAXR = N - K
      DO 1120 IRR=2,MAXR
      IR = 2 + MAXR - IRR
      KR = K + IR
      DO 1110 J=KR,N,M
      IF (J.EQ.KR) GO TO 1060
      IF (G.EQ.0.0D0) GO TO 1120
      JM = J - M
      B = -A(JM-1,M+1)/G
      IUGL = J - M
      GO TO 1070
 1060 IF (A(K,IR+1).EQ.0.0D0) GO TO 1120
      B = -A(K,IR)/A(K,IR+1)
      IUGL = K
 1070 S = 1.0D0/DSQRT(1.0D0+B*B)
      C = B*S
      C2 = C*C
      S2 = S*S
      CS = C*S
      U = C2*A(J-1,1) - 2.0D0*CS*A(J-1,2) + S2*A(J,1)
      U1 = S2*A(J-1,1) + 2.0D0*CS*A(J-1,2) + C2*A(J,1)
      A(J-1,2) = CS*(A(J-1,1)-A(J,1)) + (C2-S2)*A(J-1,2)
      A(J-1,1) = U
      A(J,1) = U1
      J2 = J - 2
      DO 1080 L=IUGL,J2
      JL = J - L
      U = C*A(L,JL) - S*A(L,JL+1)
      A(L,JL+1) = S*A(L,JL) + C*A(L,JL+1)
      A(L,JL) = U
 1080 CONTINUE
      JM = J - M
      IF (J.NE.KR) A(JM-1,M+1) = C*A(JM-1,M+1) - S*G
      MAXL = M - 1
      IF (N-J.LT.M-1) MAXL = N - J
      IF (MAXL.LE.0) GO TO 1100
      DO 1090 L=1,MAXL
      U = C*A(J-1,L+2) - S*A(J,L+1)
      A(J,L+1) = S*A(J-1,L+2) + C*A(J,L+1)
      A(J-1,L+2) = U
 1090 CONTINUE
 1100 IF (J+M.GT.N) GO TO 1110
      G = -S*A(J,M+1)
      A(J,M+1) = C*A(J,M+1)
 1110 CONTINUE
 1120 CONTINUE
 1130 CONTINUE
 1140 SUB(1) = 0.0D0
      DO 1150 I=1,N
      DIAG(I) = A(I,1)
 1150 CONTINUE
      IF (2.GT.N) GO TO 1170
      DO 1160 I=2,N
      SUB(I) = A(I-1,2)
 1160 CONTINUE
 1170 RETURN
      END
C***********************************************************************
C$SPLIT$LI2FN$*********************************************************
C***********************************************************************
      SUBROUTINE LI2FN(FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 2-NODED C0
C      CONTINUOUS LINE ELEMENT.  ONLY THE FUNCTION WILL BE
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    26 FEB 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF THE VECTOR FUN (.GE. 2)
C      IDER    DIMENSION OF THE VECTOR DER (.GE. 2)
C      XI      SPECIFIES THE VALUE OF THE LOCAL COORDINATE AT
C              WHICH THE FUNCTION AND ITS DERIVATIVE ARE
C              REQUIRED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     FUN(I) CONTAINS THE VALUE OF THE I'TH SHAPE
C              FUNCTION AT XI
C      DER     DER(I) CONTAINS THE VALUE OF THE DERIVATIVE OF
C              THE I'TH SHAPE FUNCTION AT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE LI2FN(FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H LI2FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.2 .OR. IDER.LT.2) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 0.5D0*(1.0D0-XI)
      FUN(2) = 0.5D0*(1.0D0+XI)
      DER(1) = -0.5D0
      DER(2) = 0.5D0
      RETURN
      END
C***********************************************************************
C$SPLIT$LI3FN$*********************************************************
C***********************************************************************
      SUBROUTINE LI3FN(FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTION AND ITS
C      DERIVATIVE AT A SPECIFIED POINT FOR A 3-NODED C0
C      CONTINUOUS LINE ELEMENT.  FUNCTION CONTINUOUS ACROSS
C      ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.3)
C      IDER    DIMENSION OF VECTOR DER (.GE.3)
C      XI      VALUE OF LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT XI
C      DER     VECTOR OF LENGTH IDER.  DER(I) CONTAINS THE
C              VALUE OF THE DERIVATIVE OF THE I'TH SHAPE
C              FUNCTION AT THE POINT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE LI3FN(FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H LI3FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.3 .OR. IDER.LT.3) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 0.5D0*XI*(XI-1.0D0)
      FUN(2) = 1.0D0 - XI*XI
      FUN(3) = 0.5D0*XI*(XI+1.0D0)
      DER(1) = 0.5D0*(2.0D0*XI-1.0D0)
      DER(2) = -2.0D0*XI
      DER(3) = 0.5D0*(2.0D0*XI+1.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$LI4FN$*********************************************************
C***********************************************************************
      SUBROUTINE LI4FN(FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 4-NODED C0
C      CONTINUOUS ELEMENT.  FUNCTION CONTINUOUS ACROSS ELEMENT
C      BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.4)
C      IDER    DIMENSION OF VECTOR DER (.GE.4)
C      XI      VALUE OF LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT XI
C      DER     VECTOR OF DIMENSION IDER.  DER(I) CONTAINS THE
C              VALUE OF THE DERIVATIVE OF THE I'TH SHAPE
C              FUNCTION AT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE LI4FN(FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H LI4FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.4 .OR. IDER.LT.4) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/16.0D0*(1.0D0-XI)*(9.0D0*XI*XI-1.0D0)
      FUN(2) = 9.0D0/16.0D0*(XI*XI-1.0D0)*(3.0D0*XI-1.0D0)
      FUN(3) = 9.0D0/16.0D0*(1.0D0-XI*XI)*(3.0D0*XI+1.0D0)
      FUN(4) = 1.0D0/16.0D0*(XI+1.0D0)*(9.0D0*XI*XI-1.0D0)
      DER(1) = -1.0D0/16.0D0*(-1.0D0-18.0D0*XI+27.0D0*XI*XI)
      DER(2) = 9.0D0/16.0D0*(9.0D0*XI*XI-2.0D0*XI-3.0D0)
      DER(3) = 9.0D0/16.0D0*(3.0D0-2.0D0*XI-9.0D0*XI*XI)
      DER(4) = 1.0D0/16.0D0*(27.0D0*XI*XI+18.0D0*XI-1.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$MATADD$*********************************************************
C***********************************************************************
      SUBROUTINE MATADD(A, IA, JA, B, IB, JB, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      ADDS THE MATRIX A TO B, STORING THE RESULT IN A
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA)
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      B       ARRAY OF DIMENSION (IB,JB)
C      IB      FIRST DIMENSION OF B (.GE.M)
C      JB      SECOND DIMENSION OF B (.GE.N)
C      M       NUMBER OF ROWS OF A AND B TO BE ADDED
C      N       NUMBER OF COLUMNS OF A AND B TO BE ADDED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ON EXIT, CONTAINS SUM OF A AND B
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATADD(A, IA, JA, B, IB, JB, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IB, IERROR, ITEST, J, JA, JB,
     *     M, N
      DOUBLE PRECISION A, B, SRNAME
      DIMENSION A(IA,JA), B(IB,JB)
      DATA SRNAME /8H MATADD /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (M.GT.IB .OR. N.GT.JB) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,M
      DO 1020 J=1,N
      A(I,J) = A(I,J) + B(I,J)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$MATCOP$*********************************************************
C***********************************************************************
      SUBROUTINE MATCOP(A, IA, JA, B, IB, JB, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      COPIES MATRIX A INTO MATRIX B
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA) WHICH IS TO BE COPIED
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      IB      FIRST DIMENSION OF ARRAY B (.GE.M)
C      JB      SECOND DIMENSION OF B (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE COPIED
C      N       NUMBER OF COLUMNS OF A TO BE COPIED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       ARRAY OF DIMENSION (IB,JB) INTO WHICH A IS
C              COPIED
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATCOP(A, IA, JA, B, IB, JB, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IB, IERROR, ITEST, J, JA, JB,
     *     M, N
      DOUBLE PRECISION A, B, SRNAME
      DIMENSION A(IA,JA), B(IB,JB)
      DATA SRNAME /8H MATCOP /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR=0
                        IF (M.GT.IB .OR. N.GT.JB) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,M
      DO 1020 J=1,N
      B(I,J) = A(I,J)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$ASFUL$*********************************************************
C***********************************************************************
      SUBROUTINE ASFUL(SYSK, ISYSK, JSYSK, ELK, IELK, JELK, STEER,
     *     ISTEER, DOFEL, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      ASSEMBLES FULL REAL SYSTEM MATRIX
C
C HISTORY
C
C      COPYRIGHT (C) 1979 : SERC, RUTHERFORD APPLETON LABORATORY
C                           CHILTON, DIDCOT, OXFORDSHIRE OX11 0QX
C
C      RELEASE 1.1  29 OCT 1979 (CG)
C      COMMENTED     6 FEB 1980 (KR)
C
C ARGUMENTS IN
C      SYSK    CONTAINS SYSTEM MATRIX PRIOR TO ADDITION OF
C              CURRENT ELEMNT MATRIX CONTRIBUTION
C      ISYSK   FIRST DIMENSION OF SYSK (.GE. TOTAL NUMBER OF
C              UNCONSTRAINED DEGREES OF FREEDOM)
C      JSYSK   SECOND DIMENSION OF SYSK (.GE. TOTAL NUMBER OF
C              UNCONSTRAINED DEGREES OF FREEDOM)
C      ELK     ELEMENT MATRIX
C      IELK    FIRST DIMENSION OF ELK (.GE. DOFEL)
C      JELK    SECOND DIMENSION OF ELK (.GE. DOFEL)
C      STEER   CONTAINS FREEDOM NUMBERS ASSOCIATED WITH ELEMENT
C              MATRIX CONTRIBUTIONS TO SYSTEM MATRIX
C      ISTEER  DIMENSION OF STEER (.GE. DOFEL)
C      DOFEL   MAXIMUM NUMBER OF DEGREES OF FREEDOM ASSOCIATED
C              WITH ELEMENT TYPE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      SYSK    SYSTEM MATRIX
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ASFUL(SYSK, ISYSK, JSYSK, ELK, IELK, JELK,
C    *     STEER, ISTEER, DOFEL, ITEST)
C***********************************************************************
C
      INTEGER DOFEL, ERRMES, I, IELK, IERROR, ISTEER, ISYSK,
     *     ITEST, J, JELK, JSYSK, JTEST, STEER, STEERI, STEERJ
      DOUBLE PRECISION ELK, SRNAME, SYSK
      DIMENSION ELK(IELK,JELK), STEER(ISTEER),
     *     SYSK(ISYSK,JSYSK)
      DATA SRNAME /8H ASFUL  /
C
C     PARAMETER CHECKING
C
      JTEST = ITEST
      IF (JTEST.EQ.-1) GO TO 1010
      IERROR = 0
      IF (ISTEER.LT.DOFEL) IERROR = 3
      IF (IELK.LT.DOFEL .OR. JELK.LT.DOFEL) IERROR = 2
      IF (DOFEL.LE.0) IERROR = 1
      ITEST = ERRMES(JTEST,IERROR,SRNAME)
      IF (ITEST.NE.0) RETURN
C
C     MAIN LOOPS
C
 1010 DO 1040 I=1,DOFEL
         STEERI = STEER(I)
         IF (STEERI.LE.0) GO TO 1040
         DO 1030 J=1,DOFEL
            STEERJ = STEER(J)
            IF (STEERJ.LE.0) GO TO 1030
C
C     RANGE CHECKING ON STEERI AND STEERJ
C
            IF (JTEST.EQ.-1) GO TO 1020
            IERROR = 0
            IF (ISYSK.LT.STEERI .OR. JSYSK.LT.STEERJ) IERROR = 4
            ITEST = ERRMES(JTEST,IERROR,SRNAME)
            IF (ITEST.NE.0) RETURN
C
 1020       SYSK(STEERI,STEERJ) = SYSK(STEERI,STEERJ) + ELK(I,J)
C
 1030    CONTINUE
 1040 CONTINUE
C
      RETURN
      END
C***********************************************************************
C$SPLIT$MATIDN$*********************************************************
C***********************************************************************
      SUBROUTINE MATIDN(A, IA, JA, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SETS THE MATRIX A TO THE IDENTITY MATRIX
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IA      FIRST DIMENSION OF ARRAY A (.GE.M)
C      JA      SECOND DIMENSION OF ARRAY A (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE ASSIGNED VALUES
C      N       NUMBER OF COLUMNS OF A TO BE ASSIGNED VALUES
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ARRAY OF DIMENSION (IA,JA).  A(I,J) IS SET TO 1
C              IF I=J, 0 OTHERWISE
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATIDN(A, IA, JA, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, J, JA, L, M, N
      DOUBLE PRECISION A, SRNAME
      DIMENSION A(IA,JA)
      DATA SRNAME /8H MATIDN /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (N.LE.0 .OR. M.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1030 I=1,M
                        DO 1020 J=1,N
                        A(I,J) = 0.0D0
 1020                   CONTINUE
 1030                   CONTINUE
                        L = MIN0(M,N)
                        DO 1040 I=1,L
                        A(I,I) = 1.0D0
 1040                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$MATINV$*********************************************************
C***********************************************************************
      SUBROUTINE MATINV(A, IA, JA, B, IB, JB, N, DET, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE INVERSE OF MATRIX A IN B
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA) TO BE INVERTED
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      IB      FIRST DIMENSION OF ARRAY B (.GE.N)
C      JB      SECOND DIMENSION OF ARRAY B (.GE.N)
C      N       ORDER OF MATRIX A (.GT.1 .AND. .LT. 4)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       ARRAY OF DIMENSION (IB,JB) CONTAINING INVERSE OF
C              A
C      DET     CONTAINS VALUE OF DETERMINANT OF MATRIX A
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATINV(A, IA, JA, B, IB, JB, N, DET, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IA, IB, IERROR, ITEST, JA, JB, K, L,
     *     M, N
      DOUBLE PRECISION A, B, DET, SRNAME, UNFLO, X
      DIMENSION A(IA,JA), B(IB,JB)
      DATA SRNAME /8H MATINV /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IB .OR. N.GT.JB) IERROR = 3
                        IF (N.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (N.LE.1 .OR. N.GE.4) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 M = N - 1
      GO TO (1020, 1060), M
 1020 DET = A(1,1)*A(2,2) - A(1,2)*A(2,1)
                        IF (ITEST.EQ.-1) GO TO 1030
                        IERROR = 0
                        IF (DABS(DET).LT.UNFLO(X)) IERROR = 4
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1030 B(1,1) = A(2,2)
      B(1,2) = -A(1,2)
      B(2,1) = -A(2,1)
      B(2,2) = A(1,1)
      DO 1050 K=1,2
      DO 1040 L=1,2
      B(K,L) = B(K,L)/DET
 1040 CONTINUE
 1050 CONTINUE
      RETURN
 1060 DET = A(1,1)*(A(2,2)*A(3,3)-A(3,2)*A(2,3))
      DET = DET - A(1,2)*(A(2,1)*A(3,3)-A(3,1)*A(2,3))
      DET = DET + A(1,3)*(A(2,1)*A(3,2)-A(3,1)*A(2,2))
                        IF (ITEST.EQ.-1) GO TO 1070
                        IERROR = 0
                        IF (DABS(DET).LT.UNFLO(X)) IERROR = 4
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1070 B(1,1) = A(2,2)*A(3,3) - A(3,2)*A(2,3)
      B(2,1) = -A(2,1)*A(3,3) + A(3,1)*A(2,3)
      B(3,1) = A(2,1)*A(3,2) - A(3,1)*A(2,2)
      B(1,2) = -A(1,2)*A(3,3) + A(3,2)*A(1,3)
      B(2,2) = A(1,1)*A(3,3) - A(3,1)*A(1,3)
      B(3,2) = -A(1,1)*A(3,2) + A(3,1)*A(1,2)
      B(1,3) = A(1,2)*A(2,3) - A(2,2)*A(1,3)
      B(2,3) = -A(1,1)*A(2,3) + A(2,1)*A(1,3)
      B(3,3) = A(1,1)*A(2,2) - A(2,1)*A(1,2)
      DO 1090 K=1,3
      DO 1080 L=1,3
      B(K,L) = B(K,L)/DET
 1080 CONTINUE
 1090 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$MATMUL$*********************************************************
C***********************************************************************
      SUBROUTINE MATMUL(A, IA, JA, B, IB, JB, C, IC, JC, L, M, N,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRE-MULTIPLIES MATRIX B BY A, STORING THE RESULT IN C
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA)
C      IA      FIRST DIMENSION OF A (.GE.L)
C      JA      SECOND DIMENSION OF A (.GE.M)
C      B       ARRAY OF DIMENSION (IB,JB)
C      IB      FIRST DIMENSION OF B (.GE.M)
C      JB      SECOND DIMENSION OF B (.GE.N)
C      IC      FIRST DIMENSION OF ARRAY C (.GE.L)
C      JC      SECOND DIMENSION OF ARRAY C (.GE.N)
C      L       NUMBER OF ROWS OF A TO BE USED IN MULTIPLICATION
C      M       NUMBER OF COLUMNS OF A AND NUMBER OF ROWS OF B
C              TO BE USED IN MULTIPLICATION
C      N       NUMBER OF COLUMNS OF B TO BE USED IN
C              MULTIPLICATION
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      C       CONTAINS RESULT OF MATRIX MULTIPLICATION (C=A*B)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATMUL(A, IA, JA, B, IB, JB, C, IC, JC, L, M, N,
C    *     ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IB, IC, IERROR, ITEST, J, JA,
     *     JB, JC, K, L, M, N
      DOUBLE PRECISION A, B, C, SRNAME, X
      DIMENSION A(IA,JA), B(IB,JB), C(IC,JC)
      DATA SRNAME /8H MATMUL /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (L.GT.IC .OR. N.GT.JC) IERROR = 4
                        IF (M.GT.IB .OR. N.GT.JB) IERROR = 3
                        IF (L.GT.IA .OR. M.GT.JA) IERROR = 2
                        IF (L.LE.0 .OR. M.LE.0 .OR. N.LE.0)
     *                      IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010   DO 1040 I=1,L
        DO 1030 J=1,N
        X = 0.0D0
        DO 1020 K=1,M
        X = X + A(I,K)*B(K,J)
 1020   CONTINUE
        C(I,J) = X
 1030   CONTINUE
 1040   CONTINUE
        RETURN
        END
C***********************************************************************
C$SPLIT$MATNUL$*********************************************************
C***********************************************************************
      SUBROUTINE MATNUL(A, IA, JA, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SETS MATRIX A TO THE NULL MATRIX
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IA      FIRST DIMENSION OF ARRAY A (.GE.M)
C      JA      SECOND DIMENSION OF ARRAY A (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE SET TO ZERO
C      N       NUMBER OF COLUMNS OF A TO BE SET TO ZERO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ARRAY OF DIMENSION (IA,JA).  A(I,J)=0 FOR
C              I=1(1)M AND J=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATNUL(A, IA, JA, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, J, JA, M, N
      DOUBLE PRECISION A, SRNAME
      DIMENSION A(IA,JA)
      DATA SRNAME /8H MATNUL /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010                   DO 1030 I=1,M
                        DO 1020 J=1,N
                        A(I,J) = 0.0D0
 1020                   CONTINUE
 1030                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$MATRAN$*********************************************************
C***********************************************************************
      SUBROUTINE MATRAN(A, IA, JA, B, IB, JB, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE TRANSPOSE OF THE MATRIX A
C
C HISTORY
C      RELEASE 1.1  20 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA) TO BE TRANSPOSED
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      IB      FIRST DIMENSION OF ARRAY B (.GE.N)
C      JB      SECOND DIMENSION OF ARRAY B (.GE.M)
C      M       NUMBER OF ROWS OF A TO BE TRANSPOSED
C      N       NUMBER OF COLUMNS OF A TO BE TRANSPOSED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      B       ARRAY OF DIMENSION (IB,JB).  B(J,I)=A(I,J) FOR
C              I=1(1)M AND J=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATRAN(A, IA, JA, B, IB, JB, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IB, IERROR, ITEST, J, JA, JB,
     *     M, N
      DOUBLE PRECISION A, B, SRNAME
      DIMENSION A(IA,JA), B(IB,JB)
      DATA SRNAME /8H MATRAN /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IB .OR. M.GT.JB) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1030 I=1,M
                        DO 1020 J=1,N
                        B(J,I) = A(I,J)
 1020                   CONTINUE
 1030                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$MATSUB$*********************************************************
C***********************************************************************
      SUBROUTINE MATSUB(A, IA, JA, B, IB, JB, M, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SUBTRACTS MATRIX B FROM A, STORING THE RESULT IN A
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    12 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA)
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      B       ARRAY OF DIMENSION (IB,JB) TO BE SUBTRACTED FROM
C              A
C      IB      FIRST DIMENSION OF B (.GE.M)
C      JB      SECOND DIMENSION OF B (.GE.N)
C      M       NUMBER OF ROWS OF A AND B TO BE SUBTRACTED
C      N       NUMBER OF COLUMNS OF A AND B TO BE SUBTRACTED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      A       ARRAY OF DIMENSION (IA,JA).  ON EXIT, A(I,J)
C              IS SET TO A(I,J)-B(I,J) FOR I=1(1)M AND J=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATSUB(A, IA, JA, B, IB, JB, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IB, IERROR, ITEST, J, JA, JB,
     *     M, N
      DOUBLE PRECISION A, B, SRNAME
      DIMENSION A(IA,JA), B(IB,JB)
      DATA SRNAME /8H MATSUB /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (M.GT.IB .OR. N.GT.JB) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1030 I=1,M
                        DO 1020 J=1,N
                        A(I,J) = A(I,J) - B(I,J)
 1020                   CONTINUE
 1030                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$MATVEC$*********************************************************
C***********************************************************************
      SUBROUTINE MATVEC(A, IA, JA, V, IV, M, N, W, IW, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      POST-MULTIPLIES THE MATRIX A BY THE VECTOR V, STORING
C      THE RESULT IN THE VECTOR W
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA)
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF V (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE USED IN THE
C              MULTIPLICATION
C      N       NUMBER OF COLUMNS OF A AND THE NUMBER OF
C              ELEMENETS OF V TO BE USED IN THE MULTIPLICATION
C      IW      DIMENSION OF VECTOR W (.GE.M)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW; CONTAINS THE RESULT OF
C              THE OPERATION W=A*V
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MATVEC(A, IA, JA, V, IV, M, N, W, IW, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, IV, IW, J, JA,
     *     M, N
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H MATVEC /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (M.GT.IW) IERROR = 4
                        IF (N.GT.IV) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1030 I=1,M
                        X = 0.0D0
                        DO 1020 J=1,N
                        X = X + A(I,J)*V(J)
 1020                   CONTINUE
                        W(I) = X
 1030                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$MVSYB$*********************************************************
C***********************************************************************
      SUBROUTINE MVSYB(A, IA, JA, V, IV, W, IW, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      POST-MULTIPLIES A REAL SYMMETRIC BANDED MATRIX STORED AS
C      A LOWER TRIANGLE BY A VECTOR
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE LOWER HALF OF THE REAL SYMMETRIC
C              BAND MATRIX OF ORDER N AND SEMI-BANDWIDTH HBAND
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.HBAND)
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF VECTOR V (.GE.N)
C      IW      DIMENSION OF VECTOR W (.GE.N)
C      N       ORDER OF THE REAL SYMMETRIC BAND MATRIX
C      HBAND   SEMI-BANDWIDTH OF THE REAL SYMMETRIC BAND MATRIX
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW.  CONTAINS THE RESULT OF
C              THE OPERATION W=A*V
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MVSYB(A, IA, JA, V, IV, W, IW, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IA, IERROR, IJ, ITEST, IV, IW,
     *     J, JA, JI, N                        
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H MVSYB  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IW.LT.N) IERROR = 4
                        IF (IV.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1060 I=1,N
      X = 0.0D0
      J = HBAND
 1020 IF (I+J.LE.HBAND) GO TO 1030
      IJ = I + J - HBAND
      X = X + A(I,J)*V(IJ)
      J = J - 1
      IF (J.NE.0) GO TO 1020
 1030 J = HBAND - 1
 1040 IF (I-J.GE.N-HBAND+1) GO TO 1050
      JI = I - J + HBAND
      X = X + A(JI,J)*V(JI)
      J = J - 1
      IF (J.NE.0) GO TO 1040
 1050 W(I) = X
 1060 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$MVUSB$*********************************************************
C***********************************************************************
      SUBROUTINE MVUSB(A, IA, JA, V, IV, W, IW, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      POST-MULTIPLIES A REAL UNSYMMETRIC BANDED MATRIX STORED AS
C      A RECTANGULAR ARRAY BY A VECTOR
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE REAL UNSYMMETRIC BAND MATRIX
C              OF ORDER N AND SEMI-BANDWIDTH HBAND
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.2*HBAND-1)
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF VECTOR V (.GE.N)
C      IW      DIMENSION OF VECTOR W (.GE.N)
C      N       ORDER OF THE REAL UNSYMMETRIC BAND MATRIX
C      HBAND   SEMI-BANDWIDTH OF THE REAL UNSYMMETRIC BAND MATRIX
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW.  CONTAINS THE RESULT OF
C              THE OPERATION W=A*V
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE MVUSB(A, IA, JA, V, IV, W, IW, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IERROR, IF, IS, ITEST,
     *     IV, IW, J, N, K
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H MVUSB  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IW.LT.N) IERROR = 4
                        IF (IV.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.2*HBAND-1)
     *                      IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1030 I=1,N
      X = 0.0D0
      IS = MAX0(HBAND+1-I,1)
      IF = MIN0(N+HBAND-I,2*HBAND-1)
      DO 1020 J=IS,IF
      K = I + J - HBAND
      X = X + A(I,J)*V(K)
 1020 CONTINUE
      W(I) = X
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$PRTMAT$*********************************************************
C***********************************************************************
      SUBROUTINE PRTMAT(A, IA, JA, M, N, NOUT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRINTS A TWO-DIMENSIONAL ARRAY IN A STANDARD FORMAT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      A       ARRAY OF DIIMENSION (IA,JA) CONTAINING NUMBERS
C              TO BE PRINTED
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE PRINTED
C      N       NUMBER OF COLUMNS OF A TO BE PRINTED
C      NOUT    FORTRAN UNIT NUMBER
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE PRTMAT(A, IA, JA, M, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, J, JA, M, N, NOUT
      DOUBLE PRECISION A, SRNAME
      DIMENSION A(IA,JA)
      DATA SRNAME /8H PRTMAT /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IA.LT.M .OR. JA.LT.N) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1020 I=1,M
      WRITE (NOUT,9010) (A(I,J),J=1,N)
 1020 CONTINUE
      RETURN
 9010 FORMAT (1H , 6D12.4)
      END
C***********************************************************************
C$SPLIT$PRTTOP$*********************************************************
C***********************************************************************
      SUBROUTINE PRTTOP(TOTELS, ELTOP, IELTOP, JELTOP, NOUT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRINTS ELEMENT TOPOLOGIES IN A STANDARD FORMAT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      TOTELS  TOTAL NUMBER OF ELEMENTS IN THE MESH
C      ELTOP   INTEGER ARRAY OF DIMENSION (IELTOP,JELTOP)
C              CONTAINING ELEMENT TOPOLOGIES, ELEMENT TYPE, AND
C              NUMBER OF NODES ON THE ELEMENT
C      IELTOP  FIRST DIMENSION OF ELTOP (.GE.TOTELS)
C      JELTOP  SECOND DIMENSION OF ELTOP (.GE.NUMBER OF NODES
C              ON ELEMENT + 2)
C      NOUT    FORTRAN UNIT NUMBER
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE PRTTOP(TOTELS,ELTOP,IELTOP,JELTOP,ITEST)
C***********************************************************************
C
      INTEGER ELTOP, ERRMES, I, IELTOP, IERROR, ITEST, J, JELTOP,
     *     K, L, NOUT, TOTELS
      DOUBLE PRECISION SRNAME
      DIMENSION ELTOP(IELTOP,JELTOP)
      DATA SRNAME /8H PRTTOP /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IELTOP.LT.TOTELS) IERROR = 2
                        IF (TOTELS.LE.0) IERROR = 1
                        ITEST = ERRMES(IERROR,ITEST,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 WRITE (NOUT,9010)
      WRITE (NOUT,9020) TOTELS
      WRITE (NOUT,9030)
      DO 1030 I=1,TOTELS
      L = ELTOP(I,2)
      K = L + 2
                        IF (ITEST.EQ.-1) GO TO 1020
                        IERROR = 0
                        IF (JELTOP.LT.K) IERROR = 3
                        ITEST = ERRMES(IERROR,ITEST,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1020 WRITE (NOUT,9040) I, (ELTOP(I,J),J=1,K)
 1030 CONTINUE
      RETURN
 9010 FORMAT (1H ////27H **** ELEMENT TOPOLOGY ****//1H )
 9020 FORMAT (22H NUMBER OF ELEMENTS = , I3)
 9030 FORMAT (/1H , 2X, 4HELEM, 4X, 5HELTYP, 4X, 5HNODEL, 4X,
     *     5HNODES/1H )
 9040 FORMAT (1H , 2X, I4, 4X, I3, 7X, I3, 4X, 9(I4, 2X)/1H , 27X,
     *     9(I4, 2X))
      END
C***********************************************************************
C$SPLIT$PRTVAL$*********************************************************
C***********************************************************************
      SUBROUTINE PRTVAL(VAL, IVAL, NF, INF, JNF, DOFNOD, TOTNOD,
     *     NOUT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRINTS OUT THE NODAL VALUES OF THE SOLUTION IN A
C      STANDARD FORMAT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C      RECODED      01 NOV 1981 (NB)
C
C ARGUMENTS IN
C      VAL     VECTOR OF DIMENSION IVAL CONTAINING SOLUTION
C              VALUES,AND PRESCRIBED BOUNDARY VALUES
C      IVAL    DIMENSION OF VAL (.GE.TOTAL NUMBER OF FREEDOMS
C              IN SYSTEM)
C      NF      INTEGER ARRAY OF DIMENSION (INF,JNF) CONTAINING
C              FREEDOM NUMBERS ASSOCIATED WITH EACH NODE
C      INF     FIRST DIMENSION OF NF (.GE.TOTNOD)
C      JNF     SECOND DIMENSION OF NF (.GE.DOFNOD)
C      DOFNOD  NUMBER OF DEGREES OF FREEDOM AT EACH NODE
C      TOTNOD  TOTAL NUMBER OF NODES IN MESH
C      NOUT    FORTRAN UNIT NUMBER
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE PRTVAL(VAL, IVAL, NF, INF, JNF, DOFNOD,
C    *      TOTNOD, NOUT, ITEST)
C***********************************************************************
C
      INTEGER DOFNOD, ERRMES, I, IERROR, INF ,ITEST, IVAL, 
     *     J, JNF, K, N, NF, NODE, NOUT, TOTNOD
      DOUBLE PRECISION VAL, WORK, SRNAME
      DIMENSION VAL(IVAL), WORK(5), NF(INF,JNF), NODE(5)
      DATA SRNAME /8H PRTVAL /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (INF.LT.TOTNOD .OR. JNF.LT.DOFNOD)
     *                      IERROR = 2
                        IF (DOFNOD.LE.0 .OR. TOTNOD.LE.0)
     *                      IERROR = 1
                        ITEST = ERRMES(IERROR,ITEST,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IF (DOFNOD.EQ.1) GO TO 1080
      IF (DOFNOD.EQ.2) WRITE (NOUT,9010)
      IF (DOFNOD.EQ.3) WRITE (NOUT,9020)
      IF (DOFNOD.EQ.4) WRITE (NOUT,9030)
      IF (DOFNOD.GE.5) WRITE (NOUT,9040)
      N = 0
      DO 1070 I=1,TOTNOD
      DO 1060 J=1,DOFNOD
      N = N + 1
      NODE(N) = I
      K = NF(I,J)
                        IF (ITEST.EQ.-1) GO TO 1020
                        IERROR = 0
                        IF (IVAL.LT.K) IERROR = 3
                        ITEST = ERRMES(IERROR,ITEST,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1020 WORK(N) = 0.0D0
      IF (K.EQ.0) GO TO 1040
      IF (K.GT.0) GO TO 1030
      K = IABS(K)
 1030 WORK(N) = VAL(K)
 1040 IF (((DOFNOD.EQ.2) .AND. (N.NE.4)) .OR. (DOFNOD.NE.2)) GO TO
     *     1050
      WRITE (NOUT,9080) NODE(1), WORK(1), WORK(2), NODE(3),
     *     WORK(3), WORK(4)
      N = 0
      GO TO 1060
 1050 IF ((DOFNOD.EQ.2) .OR. (N.NE.DOFNOD)) GO TO 1060
      WRITE (NOUT,9060) I, (WORK(K),K=1,DOFNOD)
      N = 0
 1060 CONTINUE
 1070 CONTINUE
      IF (N.EQ.0) RETURN
      IF (DOFNOD.EQ.2) WRITE (NOUT,9080) NODE(1), WORK(1), WORK(2)
      IF (DOFNOD.NE.2) WRITE (NOUT,9060) I, (WORK(K),K=1,N)
      RETURN
 1080 WRITE (NOUT,9050)
      N = 0
      DO 1110 I=1,TOTNOD
      N = N + 1
      NODE(N) = I
      K = NF(I,1)
      WORK(N) = 0.0D0
      IF (K.EQ.0) GO TO 1100
      IF (K.GT.0) GO TO 1090
      K = IABS(K)
 1090 WORK(N) = VAL(K)
 1100 IF (N.NE.4) GO TO 1110
      WRITE (NOUT,9070) (NODE(J),WORK(J),J=1,4)
      N = 0
 1110 CONTINUE
      IF (N.EQ.0) RETURN
      WRITE (NOUT,9070) (NODE(J),WORK(J),J=1,N)
      RETURN
 9010 FORMAT (/1H , 2(4HNODE, 6X, 2(5HVALUE, 9X))/1H )
 9020 FORMAT (/5H NODE, 6X, 3(5HVALUE, 9X)/1H )
 9030 FORMAT (/5H NODE, 6X, 4(5HVALUE, 9X)/1H )
 9040 FORMAT (/5H NODE, 6X, 5(5HVALUE, 9X)/1H )
 9050 FORMAT (/1H , 4(4HNODE, 5X, 5HVALUE, 5X)/1H )
 9060 FORMAT (1H , I4, 1X, 5(D12.5, 2X)/1H , 5X, 5(D12.5,
     *     2X)/1H , 5X, 5(D12.5, 2X))
 9070 FORMAT (1H , 4(I4, 1X, D12.5, 2X))
 9080 FORMAT (1H , 2(I4, 1X, 2(D12.5, 2X), 5X))
      END
C***********************************************************************
C$SPLIT$PRTVEC$*********************************************************
C***********************************************************************
      SUBROUTINE PRTVEC(V, IV, N, NOUT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRINTS A VECTOR IN A STANDARD FORMAT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF DIMENSION IV CONTAINING NUMBERS TO BE
C              PRINTED
C      IV      DIMENSION OF V (.GE.N)
C      N       NUMBER OF ELEMENTS OF V TO BE PRINTED
C      NOUT    FORTRAN UNIT NUMBER
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE PRTVEC(V, IV, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IV, N, NOUT
      DOUBLE PRECISION SRNAME, V
      DIMENSION V(IV)
      DATA SRNAME /8H PRTVEC /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IV.LT.N) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 WRITE (NOUT,9010) (V(I),I=1,N)
      RETURN
 9010 FORMAT (1H , 6D12.4)
      END
C***********************************************************************
C$SPLIT$QBRK6$*********************************************************
C***********************************************************************
      SUBROUTINE QBRK6(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A SIX-POINT GAUSS TYPE
C      QUADRATURE RULE FOR USE IN EVALUATING THE INTEGRAL OF A
C      3D FUNCTION OVER A CUBE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    15 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=6))
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.3)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP(=6))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS TO
C              BE USED IN THE 6-POINT QUADRATURE FORMULA
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN QUADRATURE
C              FORMULA
C      NQP     NUMBER OF QUADRATURE POINTS TO BE USED (=6)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QBRK6(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWGHT, JABSS,
     *     NQP
      DOUBLE PRECISION ABSS, SRNAME, W, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QBRK6  /
      NQP = 6
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.3 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = 8.0D0/6.0D0
      DO 1020 I=1,6
      WGHT(I) = W
      ABSS(1,I) = 0.0D0
      ABSS(2,I) = 0.0D0
      ABSS(3,I) = 0.0D0
 1020 CONTINUE
      ABSS(1,5) = -1.0D0
      ABSS(1,6) = 1.0D0
      ABSS(2,3) = -1.0D0
      ABSS(2,4) = 1.0D0
      ABSS(3,1) = -1.0D0
      ABSS(3,2) = 1.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QBRK8$*********************************************************
C***********************************************************************
      SUBROUTINE QBRK8(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 8-POINT GAUSS TYPE
C      QUADRATURE RULE FOR USE IN EVALUATING THE INTEGRAL OF A
C      3D FUNCTION OVER A CUBE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    15 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=8))
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.3)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP(=8))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS TO
C              BE USED IN THE 8-POINT QUADRATURE FORMULA
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN QUADRATURE
C              FORMULA
C      NQP     NUMBER OF QUADRATURE POINTS TO BE USED (=8)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QBRK8(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWGHT, JABSS,
     *     NQP
      DOUBLE PRECISION ABSS, SRNAME, W, WGHT, XY
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QBRK8  /
      NQP = 8
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.3 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = 1.0D0
      XY = DSQRT(1.0D0/3.0D0)
      DO 1020 I=1,8
      WGHT(I) = W
      ABSS(1,I) = XY
      ABSS(2,I) = XY
      ABSS(3,I) = XY
 1020 CONTINUE
      DO 1030 I=1,4
      ABSS(3,I) = -ABSS(1,1)
 1030 CONTINUE
      DO 1040 I=1,2
      ABSS(1,I+1) = -ABSS(1,1)
      ABSS(1,I+5) = -ABSS(1,1)
      ABSS(2,I) = -ABSS(1,1)
      ABSS(2,I+4) = -ABSS(1,1)
 1040 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$QLIN2$*********************************************************
C***********************************************************************
      SUBROUTINE QLIN2(WGHT, IWGHT, ABSS, IABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE WEIGHTS AND ABSCISSAE OF A 2-POINT GAUSS-
C      LEGENDRE QUADRATURE FORMULA FOR USE IN EVALUATING A 1D
C      INTEGRAL OVER A FINITE RANGE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    15 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=2))
C      IABSS   DIMENSION OF VECTOR ABSS (.GE.NQP(=2))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS TO
C              BE USED IN THE 2-POINT QUADRATURE FORMULA
C      ABSS    VECTOR OF DIMENSION IABSS.  CONTAINS ABSCISSAE
C              OF POINTS TO BE USED IN 2-POINT QUADRATURE
C              FORMULA
C      NQP     NUMBER OF QUADRATURE POINTS (=2)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QLIN2(WGHT, IWGHT, ABSS, IABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, NQP
      DOUBLE PRECISION ABSS, SRNAME, WGHT
      DIMENSION ABSS(IABSS), WGHT(IWGHT)
      DATA SRNAME /8H QLIN2  /
      NQP = 2
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.NQP) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ABSS(1) = 1.0D0/DSQRT(3.0D0)
      ABSS(2) = -ABSS(1)
      WGHT(1) = 1.0D0
      WGHT(2) = 1.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QLIN3$*********************************************************
C***********************************************************************
      SUBROUTINE QLIN3(WGHT, IWGHT, ABSS, IABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 3-POINT GAUSS-
C      LEGENDRE QUADRATURE FORMULA FOR USE IN EVALUATING A 1D
C      INTEGRAL OVER A FINITE RANGE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    15 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=3))
C      IABSS   DIMENSION OF VECTOR ABSS (.GE.NQP(=3))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS FOR
C              3-POINT FORMULA
C      ABSS    VECTOR OF DIMENSION IABSS.  CONTAINS ABSCISSAE
C              OF POINTS FOR USE IN 3-POINT FORMULA
C      NQP     NUMBER OF QUADRATURE POINTS (=3)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QLIN3(WGHT, IWGHT, ABSS, IABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, NQP
      DOUBLE PRECISION ABSS, SRNAME, WGHT
      DIMENSION ABSS(IABSS), WGHT(IWGHT)
      DATA SRNAME /8H QLIN3  /
      NQP = 3
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.NQP) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ABSS(1) = 0.2D0*DSQRT(15.0D0)
      ABSS(2) = 0.0D0
      ABSS(3) = -ABSS(1)
      WGHT(1) = 5.0D0/9.0D0
      WGHT(3) = WGHT(1)
      WGHT(2) = 8.0D0/9.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QLVAL$*********************************************************
C***********************************************************************
      SUBROUTINE QLVAL(DIAG, IDIAG, SUB, ISUB, N, EPS, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES ALL THE EIGENVALUES OF A REAL SYMMETRIC
C      TRIDIAGONAL MATRIX OR OF A FULL REAL SYMMETRIC MATRIX
C      THAT HAS BEEN REDUCED TO TRIDIAGONAL FORM USING
C      SUBROUTINE HOUSE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    15 OCT 1980 (KR)
C
C ARGUMENTS IN
C      DIAG    VECTOR OF LENGTH IDIAG.  ON ENTRY, CONTAINS THE
C              DIAGONAL ELEMENTS OF THE TRIDIAGONAL MATRIX
C      IDIAG   DIMENSION OF VECTOR DIAG (.GE.N)
C      SUB     VECTOR OF DIMENSION ISUB.  ON ENTRY, CONTAINS
C              SUB-DIAGONAL ELEMENTS OF TRIDIAGONAL MATRIX IN
C              ELEMENTS SUB(2) TO SUB(N).  SUB(1) MAY BE
C              ARBITRARY.  CONTENTS DESTROYED DURING EXECUTION
C              OF SUBROUTINE
C      ISUB    DIMENSION OF SUB (.GE.N)
C      N       ORDER OF TRIDIAGONAL MATRIX
C      EPS     SMALLEST POSITIVE NUMBER SUCH THAT 1.+EPS>1.
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      DIAG    VECTOR OF DIMENSION IDIAG.  ON EXIT, CONTAINS
C              EIGENVALUES IN ASCENDING ORDER
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QLVAL(DIAG, IDIAG, SUB, ISUB, N, EPS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, I1, IDIAG, IERROR, II, ISUB, ITEST,
     *     J, L, M, M1, N
      DOUBLE PRECISION B, C, DIAG, EPS, F, G, H, P, R, S, SRNAME,
     *     SUB
      DIMENSION DIAG(IDIAG), SUB(ISUB)
      DATA SRNAME /8H QLVAL  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IDIAG.LT.N .OR. ISUB.LT.N) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IF (N.EQ.1) GO TO 1030
      DO 1020 I=2,N
      SUB(I-1) = SUB(I)
 1020 CONTINUE
 1030 SUB(N) = 0.0D0
      B = 0.0D0
      F = 0.0D0
      DO 1180 L=1,N
      J = 0
      H = EPS*(DABS(DIAG(L))+DABS(SUB(L)))
C+++++
C     LOOK FOR SMALL SUB-DIAGONAL ELEMENT
C
      IF (B.LT.H) B = H
      DO 1040 M=L,N
      IF (DABS(SUB(M)).LE.B) GO TO 1050
 1040 CONTINUE
 1050 IF (M.EQ.L) GO TO 1140
 1060 IF (J.EQ.30) GO TO 1190
C+++++
C     FORM SHIFT
C
      J = J + 1
      G = DIAG(L)
      H = DIAG(L+1) - G
      IF (DABS(H).GE.DABS(SUB(L))) GO TO 1070
      P = H*0.5D0/SUB(L)
      R = DSQRT(P*P+1.0D0)
      H = P + R
      IF (P.LT.0.0D0) H = P - R
      DIAG(L) = SUB(L)/H
      GO TO 1080
 1070 P = 2.0D0*SUB(L)/H
      R = DSQRT(P*P+1.0D0)
      DIAG(L) = SUB(L)*P/(1.0D0+R)
 1080 H = G - DIAG(L)
      I1 = L + 1
      IF (I1.GT.N) GO TO 1100
      DO 1090 I=I1,N
      DIAG(I) = DIAG(I) - H
 1090 CONTINUE
C+++++
C     QL TRANSFORMATION
C
 1100 F = F + H
      P = DIAG(M)
      C = 1.0D0
      S = 0.0D0
      M1 = M - 1
      DO 1130 II=L,M1
      I = M1 - II + L
      G = C*SUB(I)
      H = C*P
      IF (DABS(P).LT.DABS(SUB(I))) GO TO 1110
      C = SUB(I)/P
      R = DSQRT(C*C+1.0D0)
      SUB(I+1) = S*P*R
      S = C/R
      C = 1.0D0/R
      GO TO 1120
 1110 C = P/SUB(I)
      R = DSQRT(C*C+1.0D0)
      SUB(I+1) = S*SUB(I)*R
      S = 1.0D0/R
      C = C/R
 1120 P = C*DIAG(I) - S*G
      DIAG(I+1) = H + S*(C*G+S*DIAG(I))
 1130 CONTINUE
      SUB(L) = S*P
      DIAG(L) = C*P
      IF (DABS(SUB(L)).GT.B) GO TO 1060
C+++++
C     ORDER EIGENVALUE
C
 1140 P = DIAG(L) + F
      IF (L.EQ.1) GO TO 1160
      DO 1150 II=2,L
      I = L - II + 2
      IF (P.GE.DIAG(I-1)) GO TO 1170
      DIAG(I) = DIAG(I-1)
 1150 CONTINUE
 1160 I = 1
 1170 DIAG(I) = P
 1180 CONTINUE
      ITEST = 0
      RETURN
 1190 IF (ITEST.EQ.-1) RETURN
      IERROR = 3
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      RETURN
      END
C***********************************************************************
C$SPLIT$QLVEC$*********************************************************
C***********************************************************************
      SUBROUTINE QLVEC(DIAG, IDIAG, SUB, ISUB, T, IT, JT, N, EPS,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES ALL THE EIGENVALUES AND EIGENVECTORS OF A
C      REAL SYMMETRIC TRIDIAGONAL MATRIX, OR OF A FULL REAL
C      SYMMETRIC MATRIX REDUCED TO TRIDIAGONAL FORM BY
C      SUBROUTINE HOUSE
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    16 OCT 1980 (KR)
C
C ARGUMENTS IN
C      DIAG    VECTOR OF LENGTH IDIAG.  ON ENTRY, CONTAINS
C              DIAGONAL ELEMENTS OF TRIDIAGONAL MATRIX
C      IDIAG   DIMENSION OF VECTOR DIAG (.GE.N)
C      SUB     VECTOR OF LENGTH ISUB.  ON ENTRY, CONTAINS
C              SUB-DIAGONAL ELEMENTS OF TRIDIAGONAL MATRIX IN
C              SUB(2) TO SUB(N).  ON EXIT, CONTENTS OF SUB ARE
C              DESTROYED
C      ISUB    DIMENSION OF VECTOR SUB (.GE.N)
C      T       ARRAY OF DIMENSION (IT,JT).  THERE ARE TWO MODES
C              OF OPERATION:
C                (I)  EIGEN VECTORS OF TRIDIAGONAL MATRIX
C                     ON ENTRY T SHOULD CONTAIN THE IDENTITY
C                     MATRIX OF ORDER N
C                (II) EIGENVECTORS OF FULL SYMMETRIC MATRIX
C                     ON ENTRY T SHOULD CONTAIN THE ORTHOGONAL
C                     MATRIX OBTAINED FROM SUBROUTINE HOUSE
C      IT      FIRST DIMENSION OF ARRAY T (.GE.N)
C      JT      SECOND DIMENSION OF T (.GE.N)
C      N       ORDER OF TRIDIAGONAL MATRIX
C      EPS     SMALLEST POSITIVE NUMBER SUCH THAT 1.+EPS>1.
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      DIAG    VECTOR OF DIMENSION IDIAG.  ON EXIT, CONTAINS
C              THE EIGENVALUES IN ASCENDING ORDER
C      T       ARRAY OF DIMENSION (IT,JT).  ON EXIT, T CONTAINS
C              THE NORMALISED EIGENVECTORS , WITH T(I,J),
C              I=1(1)N CONTAINING THE EIGENVECTOR CORRESPONDING
C              TO THE EIGENVALUE IN DIAG(J)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QLVEC(DIAG, IDIAG, SUB, ISUB, T, IT, JT, N,
C    *                 EPS, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, I1, IDIAG, IERROR, II, ISUB, IT, ITEST,
     *     J, JT, K, L, M, M1, N
      DOUBLE PRECISION B, C, DIAG, EPS, F, G, H, P, R, S, SRNAME,
     *     SUB, T
      DIMENSION DIAG(IDIAG), SUB(ISUB), T(IT,JT)
      DATA SRNAME /8H QLVEC  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IT.LT.N .OR. JT.LT.N) IERROR = 3
                        IF (IDIAG.LT.N .OR. ISUB.LT.N) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 IF (N.EQ.1) GO TO 1030
      DO 1020 I=2,N
      SUB(I-1) = SUB(I)
 1020 CONTINUE
 1030 SUB(N) = 0.0D0
      B = 0.0D0
      F = 0.0D0
      DO 1160 L=1,N
      J = 0
      H = EPS*(DABS(DIAG(L))+DABS(SUB(L)))
C+++++
C     LOOK FOR SMALL SUB-DIAGONAL ELEMENT
C
      IF (B.LT.H) B = H
      DO 1040 M=L,N
      IF (DABS(SUB(M)).LE.B) GO TO 1050
 1040 CONTINUE
 1050 IF (M.EQ.L) GO TO 1150
 1060 IF (J.EQ.30) GO TO 1210
C+++++
C     FORM SHIFT
C
      J = J + 1
      G = DIAG(L)
      H = DIAG(L+1) - G
      IF (DABS(H).GE.DABS(SUB(L))) GO TO 1070
      P = H*0.5D0/SUB(L)
      R = DSQRT(P*P+1.0D0)
      H = P + R
      IF (P.LT.0.0D0) H = P - R
      DIAG(L) = SUB(L)/H
      GO TO 1080
 1070 P = 2.0D0*SUB(L)/H
      R = DSQRT(P*P+1.0D0)
      DIAG(L) = SUB(L)*P/(1.0D0+R)
 1080 H = G - DIAG(L)
      I1 = L + 1
      IF (I1.GT.N) GO TO 1100
      DO 1090 I=I1,N
      DIAG(I) = DIAG(I) - H
 1090 CONTINUE
C+++++
C     QL TRANSFORMATION
C
 1100 F = F + H
      P = DIAG(M)
      C = 1.0D0
      S = 0.0D0
      M1 = M - 1
      DO 1140 II=L,M1
      I = M1 - II + L
      G = C*SUB(I)
      H = C*P
      IF (DABS(P).LT.DABS(SUB(I))) GO TO 1110
      C = SUB(I)/P
      R = DSQRT(C*C+1.0D0)
      SUB(I+1) = S*P*R
      S = C/R
      C = 1.0D0/R
      GO TO 1120
 1110 C = P/SUB(I)
      R = DSQRT(C*C+1.0D0)
      SUB(I+1) = S*SUB(I)*R
      S = 1.0D0/R
      C = C/R
 1120 P = C*DIAG(I) - S*G
C+++++
C     FORM VECTOR
C
      DIAG(I+1) = H + S*(C*G+S*DIAG(I))
      DO 1130 K=1,N
      H = T(K,I+1)
      T(K,I+1) = S*T(K,I) + C*H
      T(K,I) = C*T(K,I) - S*H
 1130 CONTINUE
 1140 CONTINUE
      SUB(L) = S*P
      DIAG(L) = C*P
      IF (DABS(SUB(L)).GT.B) GO TO 1060
 1150 DIAG(L) = DIAG(L) + F
C+++++
C     ORDER EIGENVALUES AND EIGENVECTORS
C
 1160 CONTINUE
      DO 1200 I=1,N
      K = I
      P = DIAG(I)
      I1 = I + 1
      IF (I1.GT.N) GO TO 1180
      DO 1170 J=I1,N
      IF (DIAG(J).GE.P) GO TO 1170
      K = J
      P = DIAG(J)
 1170 CONTINUE
 1180 IF (K.EQ.I) GO TO 1200
      DIAG(K) = DIAG(I)
      DIAG(I) = P
      DO 1190 J=1,N
      P = T(J,I)
      T(J,I) = T(J,K)
      T(J,K) = P
 1190 CONTINUE
 1200 CONTINUE
      ITEST = 0
      RETURN
 1210 IF (ITEST.EQ.-1) RETURN
      IERROR = 1
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      RETURN
      END
C***********************************************************************
C$SPLIT$QQUA4$*********************************************************
C***********************************************************************
      SUBROUTINE QQUA4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 4-POINT GAUSSIAN
C      PRODUCT QUADRATURE RULE FOR USE IN EVALUATING THE
C      INTEGRAL OF A 2D FUNCTION OVER A RECTANGULAR REGION
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    16 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP)
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.2)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS TO
C              BE USED IN 4-POINT FORMULA
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN FORMULA
C      NQP     NUMBER OF POINTS TO BE USED IN FORMULA (=4)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QQUA4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, JABSS, NQP
      DOUBLE PRECISION ABSS, AREA, SRNAME, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QQUA4  /
      NQP = 4
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.2 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 AREA = 4.0D0
      WGHT(1) = AREA*0.25D+0
      WGHT(2) = AREA*0.25D+0
      WGHT(3) = AREA*0.25D+0
      WGHT(4) = AREA*0.25D+0
      ABSS(1,1) = -1.0D0/DSQRT(3.0D0)
      ABSS(1,2) = ABSS(1,1)
      ABSS(1,3) = +1.0D0/DSQRT(3.0D0)
      ABSS(1,4) = ABSS(1,3)
      ABSS(2,1) = -1.0D0/DSQRT(3.0D0)
      ABSS(2,2) = +1.0D0/DSQRT(3.0D0)
      ABSS(2,3) = ABSS(2,2)
      ABSS(2,4) = ABSS(2,1)
      RETURN
      END
C***********************************************************************
C$SPLIT$QQUA9$*********************************************************
C***********************************************************************
      SUBROUTINE QQUA9(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 9-POINT GAUSSIAN
C      PRODUCT QUADRATURE RULE FOR EVALUATING THE INTEGRAL OF A
C      2D FUNCTION OVER A RECTANGULAR REGION
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    16 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP)
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.2)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF LENGTH IWGHT.  CONTAINS WEIGHTS TO BE
C              USED IN QUADRATURE FORMULA
C      ABSS    CONTAINS ABSCISSAE OF POINTS TO BE USED IN
C              FORMULA
C      NQP     NUMBER OF QUADRATURE POINTS (=9)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QQUA9(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, JABSS, NQP
      DOUBLE PRECISION ABSS, AREA, SRNAME, WGHT, XY
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QQUA9  /
      NQP = 9
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.2 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 AREA = 4.0D0
      WGHT(1) = AREA*25.0D0/324.0D0
      WGHT(3) = WGHT(1)
      WGHT(5) = WGHT(1)
      WGHT(7) = WGHT(1)
      WGHT(2) = AREA*10.0D0/81.0D0
      WGHT(4) = WGHT(2)
      WGHT(6) = WGHT(2)
      WGHT(8) = WGHT(2)
      WGHT(9) = AREA*16.0D0/81.0D0
      XY = DSQRT(3.0D0/5.0D0)
      ABSS(1,1) = -XY
      ABSS(2,1) = -XY
      ABSS(1,2) = -XY
      ABSS(2,2) = 0.0D0
      ABSS(1,3) = -XY
      ABSS(2,3) = XY
      ABSS(1,4) = 0.0D0
      ABSS(2,4) = XY
      ABSS(1,5) = XY
      ABSS(2,5) = XY
      ABSS(1,6) = XY
      ABSS(2,6) = 0.0D0
      ABSS(1,7) = XY
      ABSS(2,7) = -XY
      ABSS(1,8) = 0.0D0
      ABSS(2,8) = -XY
      ABSS(1,9) = 0.0D0
      ABSS(2,9) = 0.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QTET4$*********************************************************
C***********************************************************************
      SUBROUTINE QTET4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 4-POINT RULE FOR
C      EVALUATING THE INTEGRAL OF A 3D FUNCTION OVER A
C      TETRAHEDRAL REGION
C
C HISTORY
C      RELEASE 2.0   6 OCT 1980 (CG) --- SERC COPYRIGHT
C      COMMENTED    16 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP)
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.3)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF DIMENSION IWGHT.  CONTAINS WEIGHTS FOR
C              4-POINT QUADRATURE RULE
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN QUADRATURE
C              RULE
C      NQP     NUMBER OF QUADRATURE POINTS (=4)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QTET4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWGHT, JABSS,
     *     NQP
      DOUBLE PRECISION ABSS, ALPHA, BETA, GAMA, SRNAME, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QTET4  /
      NQP = 4
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.3 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ALPHA = 0.223807D0
      BETA = 0.387298D0
      GAMA = 0.158114D0
      DO 1020 I=1,4
      WGHT(I) = 1.0D0/16.0D0*DSQRT(6.0D0)
 1020 CONTINUE
      ABSS(1,1) = 2.0D0*ALPHA
      ABSS(2,1) = 0.0D0
      ABSS(3,1) = -GAMA
      ABSS(1,2) = -ALPHA
      ABSS(2,2) = -BETA
      ABSS(3,2) = -GAMA
      ABSS(1,3) = -ALPHA
      ABSS(2,3) = BETA
      ABSS(3,3) = -GAMA
      ABSS(1,4) = 0.0D0
      ABSS(2,4) = 0.0D0
      ABSS(3,4) = 3.0D0*GAMA
      RETURN
      END
C***********************************************************************
C$SPLIT$QTRI4$*********************************************************
C***********************************************************************
      SUBROUTINE QTRI4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 4-POINT GAUSS-TYPE
C      QUADRATURE RULE FOR EVALUATING THE INTEGRAL OF A 2D
C      FUNCTION OVER A TRIANGULAR REGION
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP)
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.2)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF LENGTH IWGHT, CONTAINING NQP WEIGHTS
C              OF QUADRATURE FORMULA
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN QUADRATURE
C              RULE
C      NQP     NUMBER OF QUADRATURE POINTS (=4)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QTRI4(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, JABSS, NQP
      DOUBLE PRECISION ABSS, AREA, SRNAME, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QTRI4  /
      NQP = 4
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.2 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 AREA = 3.0D0*DSQRT(3.0D0)/4.0D0
      WGHT(1) = AREA*1.0D0/12.0D0
      WGHT(2) = AREA*1.0D0/12.0D0
      WGHT(3) = AREA*1.0D0/12.0D0
      WGHT(4) = AREA*3.0D0/4.0D0
      ABSS(1,1) = 1.0D0
      ABSS(2,1) = 0.0D0
      ABSS(1,2) = -0.5D0
      ABSS(2,2) = -DSQRT(3.0D0)/2.0D0
      ABSS(1,3) = -0.5D0
      ABSS(2,3) = +DSQRT(3.0D0)/2.0D0
      ABSS(1,4) = 0.0D0
      ABSS(2,4) = 0.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QTRI7$*********************************************************
C***********************************************************************
      SUBROUTINE QTRI7(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE OF A 7-POINT GAUSS-TYPE
C      QUADRATURE RULE FOR EVALUATING THE INTEGRAL OF A 2D
C      FUNCTION OVER A TRIANGULAR REGION
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP)
C      IABSS   FIRST DIMENSION OF ARRAY ABSS (.GE.2)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF LENGTH IWGHT, CONTAINING NQP WEIGHTS
C              OF QUADRATURE FORMULA
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF POINTS TO BE USED IN QUADRATURE
C              RULE
C      NQP     NUMBER OF QUADRATURE POINTS (=7)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QTRI7(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IABSS, IERROR, ITEST, IWGHT, JABSS, NQP
      DOUBLE PRECISION ABSS, AREA, SRNAME, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QTRI7  /
      NQP = 7
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.2 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 AREA = 3.0D0*DSQRT(3.0D0)/4.0D0
      WGHT(1) = AREA*3.0D0/60.0D0
      WGHT(2) = AREA*8.0D0/60.0D0
      WGHT(3) = WGHT(1)
      WGHT(4) = WGHT(2)
      WGHT(5) = WGHT(1)
      WGHT(6) = WGHT(2)
      WGHT(7) = AREA*27.0D0/60.0D0
      ABSS(1,1) = 1.0D0
      ABSS(1,2) = 0.25D0
      ABSS(1,3) = -0.5D0
      ABSS(1,4) = -0.5D0
      ABSS(1,5) = -0.5D0
      ABSS(1,6) = 0.25D0
      ABSS(1,7) = 0.0D0
      ABSS(2,1) = 0.0D0
      ABSS(2,2) = -DSQRT(3.0D0)/4.0D0
      ABSS(2,3) = -DSQRT(3.0D0)/2.0D0
      ABSS(2,4) = 0.0D0
      ABSS(2,5) = DSQRT(3.0D0)/2.0D0
      ABSS(2,6) = DSQRT(3.0D0)/4.0D0
      ABSS(2,7) = 0.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QU12FN$*********************************************************
C***********************************************************************
      SUBROUTINE QU12FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR AN 12-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.12)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.12)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT (XI,ETA)
C              FOR I=1(1)12
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE, FOR I=1(1)2 AND J=1(1)12
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QU12FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, SRNAME, XI, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QU12FN /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.12) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.12) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(2) = 9.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0-3.0D0*ETA)
      FUN(3) = 9.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0+3.0D0*ETA)
      FUN(4) = 1.0D0/32.0D0*(1.0D0-XI)*(1.0D0+ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(5) = 9.0D0/32.0D0*(1.0D0+ETA)*(1.0D0-XI*XI)*(1.0D0-3.0D0*
     *     XI)
      FUN(6) = 9.0D0/32.0D0*(1.0D0+ETA)*(1.0D0-XI*XI)*(1.0D0+3.0D0*
     *     XI)
      FUN(7) = 1.0D0/32.0D0*(1.0D0+XI)*(1.0D0+ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(8) = 9.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0+3.0D0*ETA)
      FUN(9) = 9.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0-3.0D0*ETA)
      FUN(10) = 1.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(11) = 9.0D0/32.0D0*(1.0D0-ETA)*(1.0D0-XI*XI)*
     *     (1.0D0+3.0D0*XI)
      FUN(12) = 9.0D0/32.0D0*(1.0D0-ETA)*(1.0D0-XI*XI)*
     *     (1.0D0-3.0D0*XI)
      DER(1,1) = 1.0D0/32.0D0*(1.0D0-ETA)*(10.D0-27.D0*XI*XI+18.D0*
     *     XI-9.D0*ETA*ETA)
      DER(2,1) = 1.D0/32.D0*(1.D0-XI)*(10.D0-27.D0*ETA*ETA+18.D0*
     *     ETA-9.D0*XI*XI)
      DER(1,2) = -9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0-3.D0*ETA)
      DER(2,2) = 9.D0/32.D0*(1.D0-XI)*(9.D0*ETA*ETA-2.D0*ETA-3.D0)
      DER(1,3) = -9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0+3.D0*ETA)
      DER(2,3) = 9.D0/32.D0*(1.D0-XI)*(-9.D0*ETA*ETA-2.D0*ETA+3.D0)
      DER(1,4) = 1.D0/32.D0*(1.D0+ETA)*(10.D0-27.D0*XI*XI+18.D0*
     *     XI-9.D0*ETA*ETA)
      DER(2,4) = 1.D0/32.D0*(1.D0-XI)*(-10.D0+27.D0*ETA*ETA+18.D0*
     *     ETA+9.D0*XI*XI)
      DER(1,5) = 9.D0/32.D0*(1.D0+ETA)*(9.D0*XI*XI-2.D0*XI-3.D0)
      DER(2,5) = 9.D0/32.D0*(1.D0-XI*XI)*(1.D0-3.D0*XI)
      DER(1,6) = 9.D0/32.D0*(1.D0+ETA)*(3.D0-2.D0*XI-9.D0*XI*XI)
      DER(2,6) = 9.D0/32.D0*(1.D0-XI*XI)*(1.D0+3.D0*XI)
      DER(1,7) = 1.D0/32.D0*(1.D0+ETA)*(-10.D0+27.D0*XI*XI+18.D0*
     *     XI+9.D0*ETA*ETA)
      DER(2,7) = 1.D0/32.D0*(1.D0+XI)*(-10.D0+27.D0*ETA*ETA+18.D0*
     *     ETA+9.D0*XI*XI)
      DER(1,8) = 9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0+3.D0*ETA)
      DER(2,8) = 9.D0/32.D0*(1.D0+XI)*(3.D0-2.D0*ETA-9.D0*ETA*ETA)
      DER(1,9) = 9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0-3.D0*ETA)
      DER(2,9) = 9.D0/32.D0*(1.D0+XI)*(9.D0*ETA*ETA-2.D0*ETA-3.D0)
      DER(1,10) = 1.D0/32.D0*(1.D0-ETA)*(-10.D0+27.D0*XI*XI+18.D0*
     *     XI+9.D0*ETA*ETA)
      DER(2,10) = 1.D0/32.D0*(1.D0+XI)*(10.D0-27.D0*ETA*ETA+18.D0*
     *     ETA-9.D0*XI*XI)
      DER(1,11) = 9.D0/32.D0*(1.D0-ETA)*(3.D0-2.D0*XI-9.D0*XI*XI)
      DER(2,11) = -9.D0/32.D0*(1.D0-XI*XI)*(1.D0+3.D0*XI)
      DER(1,12) = 9.D0/32.D0*(1.D0-ETA)*(9.D0*XI*XI-2.D0*XI-3.D0)
      DER(2,12) = -9.D0/32.D0*(1.D0-XI*XI)*(1.D0-3.D0*XI)
      RETURN
      END
C***********************************************************************
C$SPLIT$QU4FN$*********************************************************
C***********************************************************************
      SUBROUTINE QU4FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 4-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.4)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.4)
C      XI      FIRST LOCAL COORDINATE VALUE
C      ETA     SECOND LOCAL COORDINATE VALUE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA)
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE AT THE POINT (XI,ETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QU4FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, ETAM, ETAP, FUN, SRNAME, XI,
     *     XIM, XIP, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QU4FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.4) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.4) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ETAM = 0.250D0*(1.0D0-ETA)
      ETAP = 0.250D0*(1.0D0+ETA)
      XIM = 0.250D0*(1.0D0-XI)
      XIP = 0.250D0*(1.0D0+XI)
      FUN(1) = 4.0D0*XIM*ETAM
      FUN(2) = 4.0D0*XIM*ETAP
      FUN(3) = 4.0D0*XIP*ETAP
      FUN(4) = 4.0D0*XIP*ETAM
      DER(1,1) = -ETAM
      DER(2,1) = -XIM
      DER(1,2) = -ETAP
      DER(2,2) = XIM
      DER(1,3) = ETAP
      DER(2,3) = XIP
      DER(1,4) = ETAM
      DER(2,4) = -XIP
      RETURN
      END
C***********************************************************************
C$SPLIT$QU8FN$*********************************************************
C***********************************************************************
      SUBROUTINE QU8FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR AN 8-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.8)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.8)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT (XI,ETA)
C              FOR I=1(1)8
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE, FOR I=1(1)2 AND J=1(1)8
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QU8FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, ETAM, ETAP, FUN, SRNAME, XI,
     *     XIM, XIP, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QU8FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.8) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.8) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ETAM = 0.250D0*(1.0D0-ETA)
      ETAP = 0.250D0*(1.0D0+ETA)
      XIM = 0.250D0*(1.0D0-XI)
      XIP = 0.250D0*(1.0D0+XI)
      DER(1,1) = ETAM*(2.0D0*XI+ETA)
      DER(1,2) = -8.0D0*ETAM*ETAP
      DER(1,3) = ETAP*(2.0D0*XI-ETA)
      DER(1,4) = -4.0D0*ETAP*XI
      DER(1,5) = ETAP*(2.0D0*XI+ETA)
      DER(1,6) = 8.0D0*ETAP*ETAM
      DER(1,7) = ETAM*(2.0D0*XI-ETA)
      DER(1,8) = -4.0D0*ETAM*XI
      DER(2,1) = XIM*(XI+2.0D0*ETA)
      DER(2,2) = -4.0D0*XIM*ETA
      DER(2,3) = XIM*(2.0D0*ETA-XI)
      DER(2,4) = 8.0D0*XIM*XIP
      DER(2,5) = XIP*(XI+2.0D0*ETA)
      DER(2,6) = -4.0D0*XIP*ETA
      DER(2,7) = XIP*(2.0D0*ETA-XI)
      DER(2,8) = -8.0D0*XIM*XIP
      FUN(1) = 4.0D0*ETAM*XIM*(-XI-ETA-1.0D0)
      FUN(2) = 32.0D0*XIM*ETAM*ETAP
      FUN(3) = 4.0D0*ETAP*XIM*(-XI+ETA-1.0D0)
      FUN(4) = 32.0D0*XIM*XIP*ETAP
      FUN(5) = 4.0D0*XIP*ETAP*(XI+ETA-1.0D0)
      FUN(6) = 32.0D0*XIP*ETAP*ETAM
      FUN(7) = 4.0D0*XIP*ETAM*(XI-ETA-1.0D0)
      FUN(8) = 32.0D0*XIM*XIP*ETAM
      RETURN
      END
C***********************************************************************
C$SPLIT$QUAM12$*********************************************************
C***********************************************************************
      SUBROUTINE QUAM12(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR AN 12-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.12)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.12)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT (XI,ETA)
C              FOR I=1(1)12
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE, FOR I=1(1)2 AND J=1(1)12
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QUAM12(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, SRNAME, XI, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QUAM12 /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.12) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.12) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(2) = 9.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0-3.0D0*ETA)
      FUN(3) = 9.0D0/32.0D0*(1.0D0-XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0+3.0D0*ETA)
      FUN(4) = 1.0D0/32.0D0*(1.0D0-XI)*(1.0D0+ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(5) = 9.0D0/32.0D0*(1.0D0+ETA)*(1.0D0-XI*XI)*(1.0D0-3.0D0*
     *     XI)
      FUN(6) = 9.0D0/32.0D0*(1.0D0+ETA)*(1.0D0-XI*XI)*(1.0D0+3.0D0*
     *     XI)
      FUN(7) = 1.0D0/32.0D0*(1.0D0+XI)*(1.0D0+ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(8) = 9.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0+3.0D0*ETA)
      FUN(9) = 9.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA*ETA)*
     *     (1.0D0-3.0D0*ETA)
      FUN(10) = 1.0D0/32.0D0*(1.0D0+XI)*(1.0D0-ETA)*(-10.0D0+9.0D0*
     *     (XI*XI+ETA*ETA))
      FUN(11) = 9.0D0/32.0D0*(1.0D0-ETA)*(1.0D0-XI*XI)*
     *     (1.0D0+3.0D0*XI)
      FUN(12) = 9.0D0/32.0D0*(1.0D0-ETA)*(1.0D0-XI*XI)*
     *     (1.0D0-3.0D0*XI)
      DER(1,1) = 1.0D0/32.0D0*(1.0D0-ETA)*(10.D0-27.D0*XI*XI+18.D0*
     *     XI-9.D0*ETA*ETA)
      DER(2,1) = 1.D0/32.D0*(1.D0-XI)*(10.D0-27.D0*ETA*ETA+18.D0*
     *     ETA-9.D0*XI*XI)
      DER(1,2) = -9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0-3.D0*ETA)
      DER(2,2) = 9.D0/32.D0*(1.D0-XI)*(9.D0*ETA*ETA-2.D0*ETA-3.D0)
      DER(1,3) = -9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0+3.D0*ETA)
      DER(2,3) = 9.D0/32.D0*(1.D0-XI)*(-9.D0*ETA*ETA-2.D0*ETA+3.D0)
      DER(1,4) = 1.D0/32.D0*(1.D0+ETA)*(10.D0-27.D0*XI*XI+18.D0*
     *     XI-9.D0*ETA*ETA)
      DER(2,4) = 1.D0/32.D0*(1.D0-XI)*(-10.D0+27.D0*ETA*ETA+18.D0*
     *     ETA+9.D0*XI*XI)
      DER(1,5) = 9.D0/32.D0*(1.D0+ETA)*(9.D0*XI*XI-2.D0*XI-3.D0)
      DER(2,5) = 9.D0/32.D0*(1.D0-XI*XI)*(1.D0-3.D0*XI)
      DER(1,6) = 9.D0/32.D0*(1.D0+ETA)*(3.D0-2.D0*XI-9.D0*XI*XI)
      DER(2,6) = 9.D0/32.D0*(1.D0-XI*XI)*(1.D0+3.D0*XI)
      DER(1,7) = 1.D0/32.D0*(1.D0+ETA)*(-10.D0+27.D0*XI*XI+18.D0*
     *     XI+9.D0*ETA*ETA)
      DER(2,7) = 1.D0/32.D0*(1.D0+XI)*(-10.D0+27.D0*ETA*ETA+18.D0*
     *     ETA+9.D0*XI*XI)
      DER(1,8) = 9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0+3.D0*ETA)
      DER(2,8) = 9.D0/32.D0*(1.D0+XI)*(3.D0-2.D0*ETA-9.D0*ETA*ETA)
      DER(1,9) = 9.D0/32.D0*(1.D0-ETA*ETA)*(1.D0-3.D0*ETA)
      DER(2,9) = 9.D0/32.D0*(1.D0+XI)*(9.D0*ETA*ETA-2.D0*ETA-3.D0)
      DER(1,10) = 1.D0/32.D0*(1.D0-ETA)*(-10.D0+27.D0*XI*XI+18.D0*
     *     XI+9.D0*ETA*ETA)
      DER(2,10) = 1.D0/32.D0*(1.D0+XI)*(10.D0-27.D0*ETA*ETA+18.D0*
     *     ETA-9.D0*XI*XI)
      DER(1,11) = 9.D0/32.D0*(1.D0-ETA)*(3.D0-2.D0*XI-9.D0*XI*XI)
      DER(2,11) = -9.D0/32.D0*(1.D0-XI*XI)*(1.D0+3.D0*XI)
      DER(1,12) = 9.D0/32.D0*(1.D0-ETA)*(9.D0*XI*XI-2.D0*XI-3.D0)
      DER(2,12) = -9.D0/32.D0*(1.D0-XI*XI)*(1.D0-3.D0*XI)
      RETURN
      END
C***********************************************************************
C$SPLIT$QUAM4$*********************************************************
C***********************************************************************
      SUBROUTINE QUAM4(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 4-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.4)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.4)
C      XI      FIRST LOCAL COORDINATE VALUE
C      ETA     SECOND LOCAL COORDINATE VALUE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA)
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE AT THE POINT (XI,ETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QUAM4(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, ETAM, ETAP, FUN, SRNAME, XI,
     *     XIM, XIP, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QUAM4  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.4) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.4) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ETAM = 0.250D0*(1.0D0-ETA)
      ETAP = 0.250D0*(1.0D0+ETA)
      XIM = 0.250D0*(1.0D0-XI)
      XIP = 0.250D0*(1.0D0+XI)
      FUN(1) = 4.0D0*XIM*ETAM
      FUN(2) = 4.0D0*XIM*ETAP
      FUN(3) = 4.0D0*XIP*ETAP
      FUN(4) = 4.0D0*XIP*ETAM
      DER(1,1) = -ETAM
      DER(2,1) = -XIM
      DER(1,2) = -ETAP
      DER(2,2) = XIM
      DER(1,3) = ETAP
      DER(2,3) = XIP
      DER(1,4) = ETAM
      DER(2,4) = -XIP
      RETURN
      END
C***********************************************************************
C$SPLIT$QUAM8$*********************************************************
C***********************************************************************
      SUBROUTINE QUAM8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR AN 8-NODED C0
C      CONTINUOUS QUADRILATERAL ELEMENT.  THE APPROXIMATED
C      FUNCTION WILL BE CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.8)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.8)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT (XI,ETA)
C              FOR I=1(1)8
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH
C              COORDINATE, FOR I=1(1)2 AND J=1(1)8
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QUAM8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, ETAM, ETAP, FUN, SRNAME, XI,
     *     XIM, XIP, VAL, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H QUAM8  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.8) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.8) IERROR = 2
                        VAL = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI).GT.VAL .OR. DABS(ETA).GT.VAL)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 ETAM = 0.250D0*(1.0D0-ETA)
      ETAP = 0.250D0*(1.0D0+ETA)
      XIM = 0.250D0*(1.0D0-XI)
      XIP = 0.250D0*(1.0D0+XI)
      DER(1,1) = ETAM*(2.0D0*XI+ETA)
      DER(1,2) = -8.0D0*ETAM*ETAP
      DER(1,3) = ETAP*(2.0D0*XI-ETA)
      DER(1,4) = -4.0D0*ETAP*XI
      DER(1,5) = ETAP*(2.0D0*XI+ETA)
      DER(1,6) = 8.0D0*ETAP*ETAM
      DER(1,7) = ETAM*(2.0D0*XI-ETA)
      DER(1,8) = -4.0D0*ETAM*XI
      DER(2,1) = XIM*(XI+2.0D0*ETA)
      DER(2,2) = -4.0D0*XIM*ETA
      DER(2,3) = XIM*(2.0D0*ETA-XI)
      DER(2,4) = 8.0D0*XIM*XIP
      DER(2,5) = XIP*(XI+2.0D0*ETA)
      DER(2,6) = -4.0D0*XIP*ETA
      DER(2,7) = XIP*(2.0D0*ETA-XI)
      DER(2,8) = -8.0D0*XIM*XIP
      FUN(1) = 4.0D0*ETAM*XIM*(-XI-ETA-1.0D0)
      FUN(2) = 32.0D0*XIM*ETAM*ETAP
      FUN(3) = 4.0D0*ETAP*XIM*(-XI+ETA-1.0D0)
      FUN(4) = 32.0D0*XIM*XIP*ETAP
      FUN(5) = 4.0D0*XIP*ETAP*(XI+ETA-1.0D0)
      FUN(6) = 32.0D0*XIP*ETAP*ETAM
      FUN(7) = 4.0D0*XIP*ETAM*(XI-ETA-1.0D0)
      FUN(8) = 32.0D0*XIM*XIP*ETAM
      RETURN
      END
C***********************************************************************
C$SPLIT$QWDG6$*********************************************************
C***********************************************************************
      SUBROUTINE QWDG6(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE FOR A 6-POINT QUADRATURE
C      RULE FOR EVALUATING THE INTEGRAL OF A 3D FUNCTION OVER
C      A PENTAHEDRAL REGION
C
C HISTORY
C      RELEASE 2.0   6 OCT 1980 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=6))
C      IABSS   FIRST DIMENSION ARRAY ABSS (.GE.3)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP(=6))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF LENGTH IWGHT.  CONTAINS WEIGHTS OF
C              QUADRATURE RULE
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF QUADRATURE POINTS
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QWDG6(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP,
C    *     ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWGHT, JABSS,
     *     NQP
      DOUBLE PRECISION ABSS, SRNAME, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QWDG6  /
      NQP = 6
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.3 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1020 I=1,6
      WGHT(I) = 1.0D0/4.0D0*DSQRT(3.0D0)
 1020 CONTINUE
      ABSS(1,1) = 0.0D0
      ABSS(2,1) = 0.0D0
      ABSS(3,1) = -1.0D0
      ABSS(1,2) = -0.5D0
      ABSS(2,2) = -DSQRT(3.0D0)/2.0D0
      ABSS(3,2) = -1.0D0
      ABSS(1,3) = -0.5D0
      ABSS(2,3) = DSQRT(3.0D0)/2.0D0
      ABSS(3,3) = -1.0D0
      ABSS(1,4) = 0.0D0
      ABSS(2,4) = 0.0D0
      ABSS(3,4) = 1.0D0
      ABSS(1,5) = -0.5D0
      ABSS(2,5) = -DSQRT(3.0D0)/2.0D0
      ABSS(3,5) = 1.0D0
      ABSS(1,6) = -0.5D0
      ABSS(2,6) = DSQRT(3.0D0)/2.0D0
      ABSS(3,6) = 1.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$QWDG8$*********************************************************
C***********************************************************************
      SUBROUTINE QWDG8(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS WEIGHTS AND ABSCISSAE FOR A 8-POINT QUADRATURE
C      RULE FOR EVALUATING THE INTEGRAL OF A 3D FUNCTION OVER
C      A PENTAHEDRAL REGION
C
C HISTORY
C      RELEASE 2.0   6 OCT 1980 (CG) --- SERC COPYRIGHT
C      COMMENTED    21 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IWGHT   DIMENSION OF VECTOR WGHT (.GE.NQP(=8))
C      IABSS   FIRST DIMENSION ARRAY ABSS (.GE.3)
C      JABSS   SECOND DIMENSION OF ARRAY ABSS (.GE.NQP(=8))
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      WGHT    VECTOR OF LENGTH IWGHT.  CONTAINS WEIGHTS OF
C              QUADRATURE RULE
C      ABSS    ARRAY OF DIMENSION (IABSS,JABSS).  CONTAINS
C              ABSCISSAE OF QUADRATURE POINTS
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE QWDG8(WGHT, IWGHT, ABSS, IABSS, JABSS, NQP, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IABSS, IERROR, ITEST, IWGHT, JABSS,
     *     NQP
      DOUBLE PRECISION ABSS, SRNAME, W, WGHT
      DIMENSION ABSS(IABSS,JABSS), WGHT(IWGHT)
      DATA SRNAME /8H QWDG8  /
      NQP = 8
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IWGHT.LT.NQP) IERROR = 1
                        IF (IABSS.LT.3 .OR. JABSS.LT.NQP)
     *                      IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 W = (3.D0*DSQRT(3.D0))/2.D0
      WGHT(1) = (3.0D0/8.0D0)*W
      WGHT(2) = (3.0D0/8.0D0)*W
      DO 1020 I=3,8
      WGHT(I) = (1.0D0/24.0D0)*W
 1020 CONTINUE
      ABSS(1,1) = 0.0D0
      ABSS(2,1) = 0.0D0
      ABSS(3,1) = 1.0D0
      ABSS(1,2) = 0.0D0
      ABSS(2,2) = 0.0D0
      ABSS(3,2) = -1.0D0
      ABSS(1,3) = 1.0D0
      ABSS(2,3) = 0.0D0
      ABSS(3,3) = -1.0D0
      ABSS(1,4) = -0.5D0
      ABSS(2,4) = DSQRT(3.0D0)/2.0D0
      ABSS(3,4) = -1.0D0
      ABSS(1,5) = -0.5D0
      ABSS(2,5) = -ABSS(2,4)
      ABSS(3,5) = -1.0D0
      ABSS(1,6) = 1.0D0
      ABSS(2,6) = 0.0D0
      ABSS(3,6) = 1.0D0
      ABSS(1,7) = -0.5D0
      ABSS(2,7) = ABSS(2,4)
      ABSS(3,7) = 1.0D0
      ABSS(1,8) = -0.5D0
      ABSS(2,8) = ABSS(2,5)
      ABSS(3,8) = 1.0D0
      RETURN
      END
C***********************************************************************
C$SPLIT$ROD2$*********************************************************
C***********************************************************************
      SUBROUTINE ROD2(FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 2-NODED C0
C      CONTINUOUS LINE ELEMENT.  ONLY THE FUNCTION WILL BE
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    26 FEB 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF THE VECTOR FUN (.GE. 2)
C      IDER    DIMENSION OF THE VECTOR DER (.GE. 2)
C      XI      SPECIFIES THE VALUE OF THE LOCAL COORDINATE AT
C              WHICH THE FUNCTION AND ITS DERIVATIVE ARE
C              REQUIRED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     FUN(I) CONTAINS THE VALUE OF THE I'TH SHAPE
C              FUNCTION AT XI
C      DER     DER(I) CONTAINS THE VALUE OF THE DERIVATIVE OF
C              THE I'TH SHAPE FUNCTION AT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ROD2(FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H ROD2   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.2 .OR. IDER.LT.2) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 0.5D0*(1.0D0-XI)
      FUN(2) = 0.5D0*(1.0D0+XI)
      DER(1) = -0.5D0
      DER(2) = 0.5D0
      RETURN
      END
C***********************************************************************
C$SPLIT$ROD3$*********************************************************
C***********************************************************************
      SUBROUTINE ROD3(FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTION AND ITS
C      DERIVATIVE AT A SPECIFIED POINT FOR A 3-NODED C0
C      CONTINUOUS LINE ELEMENT.  FUNCTION CONTINUOUS ACROSS
C      ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.3)
C      IDER    DIMENSION OF VECTOR DER (.GE.3)
C      XI      VALUE OF LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT XI
C      DER     VECTOR OF LENGTH IDER.  DER(I) CONTAINS THE
C              VALUE OF THE DERIVATIVE OF THE I'TH SHAPE
C              FUNCTION AT THE POINT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ROD3(FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H ROD3   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.3 .OR. IDER.LT.3) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 0.5D0*XI*(XI-1.0D0)
      FUN(2) = 1.0D0 - XI*XI
      FUN(3) = 0.5D0*XI*(XI+1.0D0)
      DER(1) = 0.5D0*(2.0D0*XI-1.0D0)
      DER(2) = -2.0D0*XI
      DER(3) = 0.5D0*(2.0D0*XI+1.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$ROD4$*********************************************************
C***********************************************************************
      SUBROUTINE ROD4 (FUN, IFUN, DER, IDER, XI, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 4-NODED C0
C      CONTINUOUS ELEMENT.  FUNCTION CONTINUOUS ACROSS ELEMENT
C      BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    11 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.4)
C      IDER    DIMENSION OF VECTOR DER (.GE.4)
C      XI      VALUE OF LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT XI
C      DER     VECTOR OF DIMENSION IDER.  DER(I) CONTAINS THE
C              VALUE OF THE DERIVATIVE OF THE I'TH SHAPE
C              FUNCTION AT XI
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE ROD4 (FUN, IFUN, DER, IDER, XI, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST
      DOUBLE PRECISION DER, FUN, SRNAME, XI, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER), FUN(IFUN)
      DATA SRNAME /8H ROD4   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.4 .OR. IDER.LT.4) IERROR = 1
                        XMAX = 1.0D0 + VEPS(DUMMY)
                        IF (DABS(XI) .GT. XMAX) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/16.0D0*(1.0D0-XI)*(9.0D0*XI*XI-1.0D0)
      FUN(2) = 9.0D0/16.0D0*(XI*XI-1.0D0)*(3.0D0*XI-1.0D0)
      FUN(3) = 9.0D0/16.0D0*(1.0D0-XI*XI)*(3.0D0*XI+1.0D0)
      FUN(4) = 1.0D0/16.0D0*(XI+1.0D0)*(9.0D0*XI*XI-1.0D0)
      DER(1) = -1.0D0/16.0D0*(-1.0D0-18.0D0*XI+27.0D0*XI*XI)
      DER(2) = 9.0D0/16.0D0*(9.0D0*XI*XI-2.0D0*XI-3.0D0)
      DER(3) = 9.0D0/16.0D0*(3.0D0-2.0D0*XI-9.0D0*XI*XI)
      DER(4) = 1.0D0/16.0D0*(27.0D0*XI*XI+18.0D0*XI-1.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$SCAPRD$*********************************************************
C***********************************************************************
      SUBROUTINE SCAPRD(V, IV, W, IW, N, PRODCT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      FORMS THE SCALAR PRODUCT OF TWO VECTORS V AND W, STORING
C      THE RESULT IN PRODCT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF LENGTH IV
C      IV      DIMENSION OF V (.GE.N)
C      W       VECTOR OF LENGTH IW
C      IW      DIMENSION OF W (.GE.N)
C      N       NUMBER OF ELEMENTS OF V (AND W) TO BE USED IN
C              FORMING SCALAR PRODUCT
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      PRODCT  CONTAINS: SIGMA I = 1 TO N OF (V(I)*W(I))
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE SCAPRD(V, IV, W, IW, N, PRODCT, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IV, IW, N
      DOUBLE PRECISION PRODCT, SRNAME, V, W
      DIMENSION V(IV), W(IW)
      DATA SRNAME /8H SCAPRD /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 3
                        IF (N.GT.IV) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   PRODCT = 0.0D0
                        DO 1020 I=1,N
                        PRODCT = PRODCT + V(I)*W(I)
 1020                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$SHAPFN$*********************************************************
C***********************************************************************
      SUBROUTINE SHAPFN(N, IN, JN, FUN, IFUN, NODEL, NDE, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CONSTRUCTS THE SHAPE FUNCTION MATRIX N FOR A SYSTEM OF COUPLED
C      DIFFERENTIAL EQUATIONS.  THIS ROUTINE IS MOST FREQUENTLY USED
C      IN FORMING THE CONSISTENT ELEMENT AND SYSTEM MASS MATRICES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IN      FIRST DIMENSION OF ARRAY N (.GE.NDE)
C      JN      SECOND DIMENSION OF N (.GE.NODEL*NDE)
C      FUN     VECTOR OF LENGTH IFUN.  CONTAINS VALUES OF THE
C              SHAPE FUNCTIONS AT THE POINT WHERE SHAPE
C              FUNCTION MATRIX REQUIRED
C      IFUN    LENGTH OF VECTOR FUN (.GE.NODEL)
C      NODEL   NUMBER OF SHAPE FUNCTIONS TO BE USED IN
C              CONSTRUCTING SHAPE FUNCTION MATRIX N (USUALLY
C              NUMBER OF NODES IN ELEMENT UNDER CONSIDERATION)
C      NDE     NUMBER OF COUPLED EQUATIONS BEING CONSIDERED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      N       ARRAY OF DIMENSION (IN,JN).  CONTAINS THE
C              VALUES OF THE SHAPE FUNCTION MATRIX
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE SHAPFN(N, IN, JN, FUN, IFUN, NODEL, NDE ,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, IFUN, IJ, IN, ITEST, J, JN, NDE,
     *     NODEL
      DOUBLE PRECISION FUN, N, SRNAME
      DIMENSION FUN(IFUN), N(IN,JN)
      DATA SRNAME /8H SHAPFN /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (NODEL.LE.0 .OR. NDE.LE.0) IERROR = 1
                        IF (IN.LT.NDE .OR. JN.LT.NODEL*NDE)
     *                      IERROR = 2
                        IF (IFUN.LT.NODEL) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 CALL MATNUL(N, IN, JN, NDE, NODEL*NDE, ITEST)
      DO 1030 J=1,NODEL
      DO 1020 I=1,NDE
      IJ = (J-1)*NDE + I
      N(I,IJ) = FUN(J)
 1020 CONTINUE
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$SIDENO$*********************************************************
C***********************************************************************
      SUBROUTINE SIDENO(TOTELS, ELTOP, IELTOP, JELTOP, M, BDCND,
     *     IBDCND, JBDCND, NUMSID, BLIST, IBLIST, JBLIST, ITEST)
C
C-----------------------------------------------------------------------
C PURPOSE
C      THE ROUTINE GENERATES A LIST OF ELEMENT AND SIDE
C      NUMBERS FROM A LIST OF BOUNDARY NODES. THE NODE LIST
C      MUST BE A CONTINUOUS SEQUENCE OF NODE IN THE SAME
C      SENSE AS THE LOCAL NODE ORDERING.
C
C HISTORY
C      RELEASE 2.0  JAN 1982 (CG) --- SERC COPYRIGHT
C
C ARGUMENTS IN
C      TOTELS  THE TOTAL NUMBER OF ELEMENTS IN THE MESH
C      ELTOP   THE ELEMENT TOPOLOGY ARRAY CONTAINING ELEMENT
C              TYPE NUMBER, NUMBER OF NODES ON ELEMENT AND
C              TOPOLOGY LIST
C      IELTOP  FIRST DIMENSION OF ELTOP
C      JELTOP  SECOND DIMENSION OF ELTOP
C      M       BOUNDARY CONDITION LIST NUMBER
C      BDCND   BOUNDARY CONDITION ARRAY CONTAINING BOUNDARY
C              CONDITION TYPE, NUMBER OF NODES ON ELEMENT SIDE
C              NUMBER OF NODES IN LIST AND NODE LIST.
C      IBDCND  FIRST DIMENSION OF BDCND ARRAY
C      JBDCND  SECOND DIMENSION OF BDCND ARRAY
C      IBLIST  FIRST DIMENSION BLIST
C      JBLIST  SECOND DIMENSION OF BLIST
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      NUMSID  NUMBER OF ELEMENT SIDES GENERATED FROM THE
C              CURRENT BOUNDARY NODE LIST
C      BLIST   ARRAY CONTAINING ELEMENT NUMBER AND SIDE NUMBER
C
C ROUTINES CALLED
C      ERRMES
C
C
C
C     SUBROUTINE SIDENO(TOTELS,ELTOP,IELTOP,JELTOP,M,BDCND,
C    *     IBDCND,JBDCND,NUMSID,BLIST,IBLIST,JBLIST,ITEST)
C***********************************************************************
C
      INTEGER BDCND, BLIST, BNUM1, ELTOP, ERRMES, I, IBDCND, IBLIST,
     *     IELTOP, IERROR, IK, ITEST, J, JBDCND, JBLIST, JELTOP, K,
     *     L, M, N, N1, NB, NELE, NODEL, NSIDE1, NUMSID, TOTELS
      DOUBLE PRECISION SRNAME
      DIMENSION BDCND(IBDCND,JBDCND), BLIST(IBLIST,JBLIST),
     *     ELTOP(IELTOP,JELTOP)
      DATA SRNAME /8H SIDENO /
      IF(ITEST.EQ.-1) GOTO 999
      IERROR=0
      IF(JBLIST.LT.2) IERROR=4
      IF(IBDCND.LT.M) IERROR=3
      IF(IELTOP.LT.TOTELS) IERROR=2
      IF(TOTELS.LE.0.OR.M.LE.0) IERROR=1
      ITEST=ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
999   NSIDE1 = BDCND(M,3) - 1
      BNUM1 = BDCND(M,2) - NSIDE1
      N = 0
      DO 1050 I=1,BNUM1,NSIDE1
      IF(ITEST.EQ.-1) GOTO 998
      IERROR=0
      IF(I.GT.JBDCND) IERROR=6
      ITEST=ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
998   NB = BDCND(M,I+3)
      DO 1040 J=1,TOTELS
      NODEL = ELTOP(J,2)
      DO 1010 K=1,NODEL
      IF(ITEST.EQ.-1) GOTO 997
      IERROR=0
      IF(K+2.GT.JELTOP) IERROR=5
      ITEST=ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
997   IF (NB.EQ.ELTOP(J,K+2)) GO TO 1020
 1010 CONTINUE
      GO TO 1040
 1020 NELE = J
      IF (NODEL.EQ.10) NODEL = NODEL - 1
      N1 = K
      DO 1030 K=1,NSIDE1
      L = MOD(N1+K-1,NODEL) + 3
      IK = I + K + 3
      IF(ITEST.EQ.-1) GOTO 996
      IERROR=0
      IF(L.GT.JELTOP) IERROR=5
      ITEST=ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
996   IF (BDCND(M,IK).NE.ELTOP(J,L)) GO TO 1040
 1030 CONTINUE
      N = N + 1
      IF(ITEST.EQ.-1) GOTO 995
      IERROR=0
      IF(N.GT.IBLIST) IERROR=7
      ITEST=ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
995   BLIST(N,1) = NELE
      BLIST(N,2) = (N1-1)/NSIDE1 + 1
      GO TO 1050
 1040 CONTINUE
 1050 CONTINUE
      NUMSID = N
      RETURN
      END
C***********************************************************************
C$SPLIT$SURBRK$*********************************************************
C***********************************************************************
      SUBROUTINE SURBRK(XI, ETA, ZETA, GEOM, IGEOM, JGEOM, NODEL,
     *     FACNUM, UAREA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES A UNIT OF AREA ON THE FACE OF A
C      BRICK ELEMENT (8, 20 OR 32 NODED)
C
C HISTORY
C      RELEASE 2.0  1  FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    24 JULY 1981 (CG)
C
C ARGUMENTS IN
C      XI      LOCAL COORDINATE OF POINT AT WHICH AREA IS
C              REQUIRED
C      ETA     LOCAL COORDINATE OF POINT AT WHICH AREA IS
C              REQUIRED
C      ZETA    LOCAL COORDINATE OF POINT AT WHICH AREA IS
C              REQUIRED
C      GEOM    LOCAL COORDINATE ARRAY CONTAINING THE GLOBAL
C              COORDIANTES OF EACH NODE ON AN ELEMENT IN THE
C              LOCAL ORDER
C      IGEOM   FIRST DIMENSION OF ARRAY GEOM (.GE.NODEL)
C      JGEOM   SECOND DIMENSION OF ARRAY GEOM (.GE.3)
C      NODEL   NUMBER OF NODES ON THE ELEMENT
C      FACNUM  THE FACE NUMBER OF THE FACE OF THE ELEMENT TO
C              BE USED IN CALCULATING THE AREA (.LE.6)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      UAREA    THE UNIT OF AREA AT THE SPECIFIED POINT
C
C ROUTINES CALLED
C      ERRMES  BRK8  BRK20  BRK32  MATMUL
C
C
C     SUBROUTINE SURBRK(XI,ETA,GEOM,IGEOM,JGEOM,NODEL,FACNUM,UAREA,ITEST
C***********************************************************************
C
      INTEGER DIMEN, FACNUM, IDER, IFUN, IGEOM, IJAC, ITEST,
     *     JDER, JGEOM, JJAC, N, NODEL, I, J, IERROR, ERRMES
      DOUBLE PRECISION DER, ETA, FUN, G1, G2, G3, GEOM, 
     *     JAC, SRNAME, UAREA, XI, ZETA
      DIMENSION DER(3,32), FUN(32), GEOM(IGEOM,JGEOM),
     *     JAC(3,3)
      DATA DIMEN /3/, IDER /3/, IFUN /32/, IJAC /3/, JDER /32/,
     *     JJAC /3/, SRNAME /8H SURBRK /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF ((NODEL.LE.0) .OR. (FACNUM.LE.0))
     *                      IERROR = 1
                        IF (IGEOM.LT.NODEL .OR. JGEOM.LT.3)
     *                      IERROR = 2
                        IF (FACNUM.LT.1 .OR. FACNUM.GT.6)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 N = NODEL/8
      IF(ITEST.EQ.-1) GOTO 1015
      IERROR = 0
      IF(N.LE.0.OR.N.GE.4) IERROR=4
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
 1015 GO TO (1020, 1030, 1040), N
 1020 CALL BRK8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA, ITEST)
      GO TO 1050
 1030 CALL BRK20(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA, ITEST)
      GO TO 1050
 1040 CALL BRK32(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA, ITEST)
 1050 CALL MATMUL(DER, IDER, JDER, GEOM, IGEOM, JGEOM, JAC, IJAC,
     *     JJAC, DIMEN, NODEL, DIMEN, ITEST)
      GO TO (1080, 1080, 1060, 1070, 1060, 1070), FACNUM
C++++
C    XI = CONSTANT
C
 1060 I=2
      J=3
      GO TO 1090
C++++
C    ETA = CONSTANT
C
 1070 I=1
      J=3
      GO TO 1090
C++++
C    ZETA = CONSTANT
C
 1080 I=1
      J=2
 1090 G1 = JAC(I,2)*JAC(J,3) - JAC(I,3)*JAC(J,2)
      G2 = JAC(I,3)*JAC(J,1) - JAC(I,1)*JAC(J,3)
      G3 = JAC(I,1)*JAC(J,2) - JAC(I,2)*JAC(J,1)
      UAREA = DSQRT(G1**2+G2**2+G3**2)
      RETURN
      END
C***********************************************************************
C$SPLIT$TET10$*********************************************************
C***********************************************************************
      SUBROUTINE TET10(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 10-NODED TETRAHEDRAL ELEMENT.
C      THE FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.10)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.10)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TET10(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DL1X, DL1Y, DL1Z, DL2X, DL2Y, DL2Z,
     *     DL3X, DL3Y, DL3Z, DL4X, DL4Y, DL4Z, DNSL, DNVL,
     *     ETA, FUN, L1, L2, L3, L4, LA, LB, NS, NV, SRNAME,
     *     XI, ZETA
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TET10  /
      NV(LA) = (2.D0*LA-1.D0)*LA
      NS(LA,LB) = 4.D0*LA*LB
      DNVL(LA) = 4.D0*LA - 1.D0
C
      DNSL(LA,LB) = 4.D0*LB
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.10) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.10) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
C
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.D0/12.D0*(3.D0+8.D0*XI-2.D0*DSQRT(2.D0)*ZETA)
      L2 = 1.D0/12.D0*(3.D0-4.D0*(XI+DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
      L3 = 1.D0/12.D0*(3.D0-4.D0*(XI-DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
C
      L4 = 1.D0/4.D0*(1.D0+2.D0*DSQRT(2.D0)*ZETA)
      DL1X = 2.D0/3.D0
      DL1Y = 0.D0
      DL1Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL2X = -1.D0/3.D0
      DL2Y = -1.D0/DSQRT(3.D0)
      DL2Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL3X = -1.D0/3.D0
      DL3Y = 1.D0/DSQRT(3.D0)
      DL3Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL4X = 0.D0
      DL4Y = 0.D0
C
      DL4Z = 1.D0/DSQRT(2.D0)
      FUN(1) = NV(L1)
      FUN(2) = NS(L1,L2)
      FUN(3) = NV(L2)
      FUN(4) = NS(L2,L3)
      FUN(5) = NV(L3)
      FUN(6) = NS(L3,L1)
      FUN(7) = NS(L1,L4)
      FUN(8) = NS(L2,L4)
      FUN(9) = NS(L3,L4)
C
      FUN(10) = NV(L4)
      DER(1,1) = DNVL(L1)*DL1X
      DER(2,1) = DNVL(L1)*DL1Y
      DER(3,1) = DNVL(L1)*DL1Z
      DER(1,2) = DNSL(L1,L2)*DL1X + DNSL(L2,L1)*DL2X
      DER(2,2) = DNSL(L1,L2)*DL1Y + DNSL(L2,L1)*DL2Y
      DER(3,2) = DNSL(L1,L2)*DL1Z + DNSL(L2,L1)*DL2Z
      DER(1,3) = DNVL(L2)*DL2X
      DER(2,3) = DNVL(L2)*DL2Y
      DER(3,3) = DNVL(L2)*DL2Z
      DER(1,4) = DNSL(L2,L3)*DL2X + DNSL(L3,L2)*DL3X
      DER(2,4) = DNSL(L2,L3)*DL2Y + DNSL(L3,L2)*DL3Y
      DER(3,4) = DNSL(L2,L3)*DL2Z + DNSL(L3,L2)*DL3Z
      DER(1,5) = DNVL(L3)*DL3X
      DER(2,5) = DNVL(L3)*DL3Y
      DER(3,5) = DNVL(L3)*DL3Z
      DER(1,6) = DNSL(L3,L1)*DL3X + DNSL(L1,L3)*DL1X
      DER(2,6) = DNSL(L3,L1)*DL3Y + DNSL(L1,L3)*DL1Y
      DER(3,6) = DNSL(L3,L1)*DL3Z + DNSL(L1,L3)*DL1Z
      DER(1,7) = DNSL(L1,L4)*DL1X + DNSL(L4,L1)*DL4X
      DER(2,7) = DNSL(L1,L4)*DL1Y + DNSL(L4,L1)*DL4Y
      DER(3,7) = DNSL(L1,L4)*DL1Z + DNSL(L4,L1)*DL4Z
      DER(1,8) = DNSL(L2,L4)*DL2X + DNSL(L4,L2)*DL4X
      DER(2,8) = DNSL(L2,L4)*DL2Y + DNSL(L4,L2)*DL4Y
      DER(3,8) = DNSL(L2,L4)*DL2Z + DNSL(L4,L2)*DL4Z
      DER(1,9) = DNSL(L3,L4)*DL3X + DNSL(L4,L3)*DL4X
      DER(2,9) = DNSL(L3,L4)*DL3Y + DNSL(L4,L3)*DL4Y
      DER(3,9) = DNSL(L3,L4)*DL3Z + DNSL(L4,L3)*DL4Z
      DER(1,10) = DNVL(L4)*DL4X
      DER(2,10) = DNVL(L4)*DL4Y
      DER(3,10) = DNVL(L4)*DL4Z
      RETURN
      END
C***********************************************************************
C$SPLIT$TET20$*********************************************************
C***********************************************************************
      SUBROUTINE TET20(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 20-NODED TETRAHEDRAL ELEMENT.
C      THE FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.20)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.20)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TET20(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DL1X, DL1Y, DL1Z, DL2X, DL2Y, DL2Z,
     *     DL3X, DL3Y, DL3Z, DL4X, DL4Y, DL4Z, DNMFL, DNMSLD,
     *     DNMSLS, DNVL, ETA, FUN, L1, L2, L3, L4, LA, LB,
     *     LC, NMF, NMS, NV, SRNAME, XI, ZETA
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TET20  /
      NV(LA) = 1.D0/2.D0*(3.D0*LA-1.D0)*(3.D0*LA-2.D0)*LA
      NMF(LA,LB,LC) = 27.D0*LA*LB*LC
      NMS(LA,LB) = 9.D0/2.D0*LA*LB*(3.D0*LA-1.D0)
      DNVL(LA) = 1.D0/2.D0*(27.D0*LA*LA-18.D0*LA+2.D0)
      DNMFL(LA,LB,LC) = 27.D0*LB*LC
      DNMSLS(LA,LB) = 9.D0/2.D0*LB*(6.D0*LA-1.D0)
C
      DNMSLD(LA,LB) = 9.D0/2.D0*LA*(3.D0*LA-1.D0)
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.20) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.20) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
C+++++
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.D0/12.D0*(3.D0+8.D0*XI-2.D0*DSQRT(2.D0)*ZETA)
      L2 = 1.D0/12.D0*(3.D0-4.D0*(XI+DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
      L3 = 1.D0/12.D0*(3.D0-4.D0*(XI-DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
C
      L4 = 1.D0/4.D0*(1.D0+2.D0*DSQRT(2.D0)*ZETA)
      DL1X = 2.D0/3.D0
      DL1Y = 0.D0
      DL1Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL2X = -1.D0/3.D0
      DL2Y = -1.D0/DSQRT(3.D0)
      DL2Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL3X = -1.D0/3.D0
      DL3Y = 1.D0/DSQRT(3.D0)
      DL3Z = -1.D0/(3.D0*DSQRT(2.D0))
      DL4X = 0.D0
      DL4Y = 0.D0
C
      DL4Z = 1.D0/DSQRT(2.D0)
      FUN(1) = NV(L1)
      FUN(2) = NMS(L1,L2)
      FUN(3) = NMS(L2,L1)
      FUN(4) = NV(L2)
      FUN(5) = NMS(L2,L3)
      FUN(6) = NMS(L3,L2)
      FUN(7) = NV(L3)
      FUN(8) = NMS(L3,L1)
      FUN(9) = NMS(L1,L3)
      FUN(10) = NMF(L1,L2,L3)
      FUN(11) = NMS(L1,L4)
      FUN(12) = NMF(L4,L1,L2)
      FUN(13) = NMS(L2,L4)
      FUN(14) = NMF(L2,L3,L4)
      FUN(15) = NMS(L3,L4)
      FUN(16) = NMF(L3,L4,L1)
      FUN(17) = NMS(L4,L1)
      FUN(18) = NMS(L4,L2)
      FUN(19) = NMS(L4,L3)
C
      FUN(20) = NV(L4)
      DER(1,1) = DNVL(L1)*DL1X
      DER(2,1) = DNVL(L1)*DL1Y
      DER(3,1) = DNVL(L1)*DL1Z
      DER(1,2) = DNMSLS(L1,L2)*DL1X + DNMSLD(L1,L2)*DL2X
      DER(2,2) = DNMSLS(L1,L2)*DL1Y + DNMSLD(L1,L2)*DL2Y
      DER(3,2) = DNMSLS(L1,L2)*DL1Z + DNMSLD(L1,L2)*DL2Z
      DER(1,3) = DNMSLD(L2,L1)*DL1X + DNMSLS(L2,L1)*DL2X
      DER(2,3) = DNMSLD(L2,L1)*DL1Y + DNMSLS(L2,L1)*DL2Y
      DER(3,3) = DNMSLD(L2,L1)*DL1Z + DNMSLS(L2,L1)*DL2Z
      DER(1,4) = DNVL(L2)*DL2X
      DER(2,4) = DNVL(L2)*DL2Y
      DER(3,4) = DNVL(L2)*DL2Z
      DER(1,5) = DNMSLS(L2,L3)*DL2X + DNMSLD(L2,L3)*DL3X
      DER(2,5) = DNMSLS(L2,L3)*DL2Y + DNMSLD(L2,L3)*DL3Y
      DER(3,5) = DNMSLS(L2,L3)*DL2Z + DNMSLD(L2,L3)*DL3Z
      DER(1,6) = DNMSLD(L3,L2)*DL2X + DNMSLS(L3,L2)*DL3X
      DER(2,6) = DNMSLD(L3,L2)*DL2Y + DNMSLS(L3,L2)*DL3Y
      DER(3,6) = DNMSLD(L3,L2)*DL2Z + DNMSLS(L3,L2)*DL3Z
      DER(1,7) = DNVL(L3)*DL3X
      DER(2,7) = DNVL(L3)*DL3Y
      DER(3,7) = DNVL(L3)*DL3Z
      DER(1,8) = DNMSLS(L3,L1)*DL3X + DNMSLD(L3,L1)*DL1X
      DER(2,8) = DNMSLS(L3,L1)*DL3Y + DNMSLD(L3,L1)*DL1Y
      DER(3,8) = DNMSLS(L3,L1)*DL3Z + DNMSLD(L3,L1)*DL1Z
      DER(1,9) = DNMSLD(L1,L3)*DL3X + DNMSLS(L1,L3)*DL1X
      DER(2,9) = DNMSLD(L1,L3)*DL3Y + DNMSLS(L1,L3)*DL1Y
      DER(3,9) = DNMSLD(L1,L3)*DL3Z + DNMSLS(L1,L3)*DL1Z
      DER(1,10) = DNMFL(L1,L2,L3)*DL1X + DNMFL(L2,L3,L1)*DL2X +
     *     DNMFL(L3,L1,L2)*DL3X
      DER(2,10) = DNMFL(L1,L2,L3)*DL1Y + DNMFL(L2,L3,L1)*DL2Y +
     *     DNMFL(L3,L1,L2)*DL3Y
      DER(3,10) = DNMFL(L1,L2,L3)*DL1Z + DNMFL(L2,L3,L1)*DL2Z +
     *     DNMFL(L3,L1,L2)*DL3Z
      DER(1,11) = DNMSLS(L1,L4)*DL1X + DNMSLD(L1,L4)*DL4X
      DER(2,11) = DNMSLS(L1,L4)*DL1Y + DNMSLD(L1,L4)*DL4Y
      DER(3,11) = DNMSLS(L1,L4)*DL1Z + DNMSLD(L1,L4)*DL4Z
      DER(1,12) = DNMFL(L1,L2,L4)*DL1X + DNMFL(L2,L1,L4)*DL2X +
     *     DNMFL(L4,L1,L2)*DL4X
      DER(2,12) = DNMFL(L1,L2,L4)*DL1Y + DNMFL(L2,L1,L4)*DL2Y +
     *     DNMFL(L4,L1,L2)*DL4Y
      DER(3,12) = DNMFL(L1,L2,L4)*DL1Z + DNMFL(L2,L1,L4)*DL2Z +
     *     DNMFL(L4,L1,L2)*DL4Z
      DER(1,13) = DNMSLS(L2,L4)*DL2X + DNMSLD(L2,L4)*DL4X
      DER(2,13) = DNMSLS(L2,L4)*DL2Y + DNMSLD(L2,L4)*DL4Y
      DER(3,13) = DNMSLS(L2,L4)*DL2Z + DNMSLD(L2,L4)*DL4Z
      DER(1,14) = DNMFL(L2,L3,L4)*DL2X + DNMFL(L3,L2,L4)*DL3X +
     *     DNMFL(L4,L2,L3)*DL4X
      DER(2,14) = DNMFL(L2,L3,L4)*DL2Y + DNMFL(L3,L2,L4)*DL3Y +
     *     DNMFL(L4,L2,L3)*DL4Y
      DER(3,14) = DNMFL(L2,L3,L4)*DL2Z + DNMFL(L3,L2,L4)*DL3Z +
     *     DNMFL(L4,L2,L3)*DL4Z
      DER(1,15) = DNMSLS(L3,L4)*DL3X + DNMSLD(L3,L4)*DL4X
      DER(2,15) = DNMSLS(L3,L4)*DL3Y + DNMSLD(L3,L4)*DL4Y
      DER(3,15) = DNMSLS(L3,L4)*DL3Z + DNMSLD(L3,L4)*DL4Z
      DER(1,16) = DNMFL(L1,L3,L4)*DL1X + DNMFL(L3,L1,L4)*DL3X +
     *     DNMFL(L4,L1,L3)*DL4X
      DER(2,16) = DNMFL(L1,L3,L4)*DL1Y + DNMFL(L3,L1,L4)*DL3Y +
     *     DNMFL(L4,L1,L3)*DL4Y
      DER(3,16) = DNMFL(L1,L3,L4)*DL1Z + DNMFL(L3,L1,L4)*DL3Z +
     *     DNMFL(L4,L1,L3)*DL4Z
      DER(1,17) = DNMSLD(L4,L1)*DL1X + DNMSLS(L4,L1)*DL4X
      DER(2,17) = DNMSLD(L4,L1)*DL1Y + DNMSLS(L4,L1)*DL4Y
      DER(3,17) = DNMSLD(L4,L1)*DL1Z + DNMSLS(L4,L1)*DL4Z
      DER(1,18) = DNMSLD(L4,L2)*DL2X + DNMSLS(L4,L2)*DL4X
      DER(2,18) = DNMSLD(L4,L2)*DL2Y + DNMSLS(L4,L2)*DL4Y
      DER(3,18) = DNMSLD(L4,L2)*DL2Z + DNMSLS(L4,L2)*DL4Z
      DER(1,19) = DNMSLD(L4,L3)*DL3X + DNMSLS(L4,L3)*DL4X
      DER(2,19) = DNMSLD(L4,L3)*DL3Y + DNMSLS(L4,L3)*DL4Y
      DER(3,19) = DNMSLD(L4,L3)*DL3Z + DNMSLS(L4,L3)*DL4Z
      DER(1,20) = DNVL(L4)*DL4X
      DER(2,20) = DNVL(L4)*DL4Y
      DER(3,20) = DNVL(L4)*DL4Z
      RETURN
      END
C***********************************************************************
C$SPLIT$TET4$*********************************************************
C***********************************************************************
      SUBROUTINE TET4(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 10-NODED TETRAHEDRAL ELEMENT.
C      THE FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.4)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.4)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TET4(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, SRNAME, XI, ZETA
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TET4   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.4) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.4) IERROR = 2
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.D0/12.D0*(3.D0+8.D0*XI-2.D0*DSQRT(2.D0)*ZETA)
      FUN(2) = 1.D0/12.D0*(3.D0-4.D0*(XI+DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
      FUN(3) = 1.D0/12.D0*(3.D0-4.D0*(XI-DSQRT(3.D0)*ETA)-2.D0*
     *     DSQRT(2.D0)*ZETA)
      FUN(4) = 1.D0/4.D0*(1.D0+2.D0*DSQRT(2.D0)*ZETA)
      DER(1,1) = 2.D0/3.D0
C     DER(1,3)=-DSQRT(2.)/6.
      DER(1,2) = 0.D0
      DER(1,3) = -DSQRT(2.D0)/6.D0
C     DER(2,2)=-DSQRT(3.)/3.
      DER(2,1) = -1.D0/3.D0
C     DER(2,3)=-DSQRT(2.)/6.
      DER(2,2) = -DSQRT(3.D0)/3.D0
      DER(2,3) = -DSQRT(2.D0)/6.D0
C     DER(3,2)=+DSQRT(2.)/3.
      DER(3,1) = -1.D0/3.D0
C     DER(3,3)=-DSQRT(2.)/6.
      DER(3,2) = +DSQRT(2.D0)/3.D0
      DER(3,3) = -DSQRT(2.D0)/6.D0
      DER(4,1) = 0.D0
C     DER(4,3)=DSQRT(2.)/2.
      DER(4,2) = 0.D0
      DER(4,3) = DSQRT(2.D0)/2.D0
      RETURN
      END
C***********************************************************************
C$SPLIT$TR10FN$*********************************************************
C***********************************************************************
      SUBROUTINE TR10FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 10-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.10)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.10)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)10
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH LOCAL
C              COORDINATE, FOR I=1(1)2 AND J=1(1)10
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TR10FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DLX, DLY, DNS1, DNS2, DNVL, ETA,
     *     FUN, L1, L2, L3, LA, LB, NS, NV, SRNAME, XI, YMIN,
     *     YMAX, XMIN, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), DLX(3), DLY(3), FUN(IFUN)
      DATA SRNAME /8H TR10FN /
      NV(LA) = 1.D0/2.D0*(3.D0*LA-1.D0)*(3.D0*LA-2.D0)*LA
      NS(LA,LB) = 9.D0/2.D0*LA*LB*(3.D0*LA-1.D0)
      DNVL(LA) = 1.D0/2.D0*(27.D0*LA*LA-18.D0*LA+2.D0)
      DNS1(LA,LB) = 9.D0/2.D0*LB*(6.D0*LA-1.D0)
      DNS2(LA,LB) = 9.D0/2.D0*LA*(3.D0*LA-1.D0)
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.10) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.10) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      L2 = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      L3 = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      DLX(1) = 2.D0/3.D0
      DLY(1) = 0.D0
      DLX(2) = -1.D0/3.D0
      DLY(2) = -1.D0/DSQRT(3.D0)
      DLX(3) = -1.D0/3.D0
      DLY(3) = 1.D0/DSQRT(3.D0)
      FUN(1) = NV(L1)
      FUN(2) = NS(L1,L2)
      FUN(3) = NS(L2,L1)
      FUN(4) = NV(L2)
      FUN(5) = NS(L2,L3)
      FUN(6) = NS(L3,L2)
      FUN(7) = NV(L3)
      FUN(8) = NS(L3,L1)
      FUN(9) = NS(L1,L3)
      FUN(10) = 27.D0*L1*L2*L3
      DER(1,1) = DNVL(L1)*DLX(1)
      DER(2,1) = DNVL(L1)*DLY(1)
      DER(1,2) = DNS1(L1,L2)*DLX(1) + DNS2(L1,L2)*DLX(2)
      DER(2,2) = DNS1(L1,L2)*DLY(1) + DNS2(L1,L2)*DLY(2)
      DER(1,3) = DNS1(L2,L1)*DLX(2) + DNS2(L2,L1)*DLX(1)
      DER(2,3) = DNS1(L2,L1)*DLY(2) + DNS2(L2,L1)*DLY(1)
      DER(1,4) = DNVL(L2)*DLX(2)
      DER(2,4) = DNVL(L2)*DLY(2)
      DER(1,5) = DNS1(L2,L3)*DLX(2) + DNS2(L2,L3)*DLX(3)
      DER(2,5) = DNS1(L2,L3)*DLY(2) + DNS2(L2,L3)*DLY(3)
      DER(1,6) = DNS1(L3,L2)*DLX(3) + DNS2(L3,L2)*DLX(2)
      DER(2,6) = DNS1(L3,L2)*DLY(3) + DNS2(L3,L2)*DLY(2)
      DER(1,7) = DNVL(L3)*DLX(3)
      DER(2,7) = DNVL(L3)*DLY(3)
      DER(1,8) = DNS1(L3,L1)*DLX(3) + DNS2(L3,L1)*DLX(1)
      DER(2,8) = DNS1(L3,L1)*DLY(3) + DNS2(L3,L1)*DLY(1)
      DER(1,9) = DNS1(L1,L3)*DLX(1) + DNS2(L1,L3)*DLX(3)
      DER(2,9) = DNS1(L1,L3)*DLY(1) + DNS2(L1,L3)*DLY(3)
      DER(1,10) = 27.D0*(DLX(1)*L2*L3+L1*DLX(2)*L3+L1*L2*DLX(3))
      DER(2,10) = 27.D0*(DLY(1)*L2*L3+L1*DLY(2)*L3+L1*L2*DLY(3))
      RETURN
      END
C***********************************************************************
C$SPLIT$TR3FN$*********************************************************
C***********************************************************************
      SUBROUTINE TR3FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A THREE-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.3)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.3)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)3
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE FOR
C              I=1(1)2 AND J=1(1)3
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TR3FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, SRNAME, XI, YMIN, YMAX, 
     *     DUMMY, XMIN, XMAX, VEPS
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TR3FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.3) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.3) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      FUN(2) = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      FUN(3) = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      DER(1,1) = 2.0D0/3.0D0
      DER(1,2) = -1.0D0/3.0D0
      DER(1,3) = -1.0D0/3.0D0
      DER(2,1) = 0.0D0
      DER(2,2) = -1.0D0/DSQRT(3.0D0)
      DER(2,3) = +1.0D0/DSQRT(3.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$TR6FN$*********************************************************
C***********************************************************************
      SUBROUTINE TR6FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 6-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.6)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.6)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)6
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH LOCAL
C              COORDINATE AT THE POINT (XI,ETA), FOR I=1(1)2
C              AND J=1(1)6
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TR6FN(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, L1, L2, L3, SRNAME, XI,
     *     YMIN, YMAX, XMIN, XMAX, VEPS, DUMMY 
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TR6FN  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.6) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.6) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      L2 = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      L3 = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      FUN(1) = (2.0D0*L1-1.0D0)*L1
      FUN(2) = 4.0D0*L1*L2
      FUN(3) = (2.0D0*L2-1.0D0)*L2
      FUN(4) = 4.0D0*L2*L3
      FUN(5) = (2.0D0*L3-1.0D0)*L3
      FUN(6) = 4.0D0*L3*L1
      DER(1,1) = 2.0D0/3.0D0*(4.0D0*L1-1.0D0)
      DER(1,2) = 4.0D0/3.0D0*(2.0D0*L2-L1)
      DER(1,3) = -1.0D0/3.0D0*(4.0D0*L2-1.0D0)
      DER(1,4) = -4.0D0/3.0D0*(L2+L3)
      DER(1,5) = -1.0D0/3.0D0*(4.0D0*L3-1.0D0)
      DER(1,6) = 4.0D0/3.0D0*(2.0D0*L3-L1)
      DER(2,1) = 0.0D0
      DER(2,2) = -4.0D0/DSQRT(3.0D0)*L1
      DER(2,3) = -1.0D0/DSQRT(3.0D0)*(4.0D0*L2-1.0D0)
      DER(2,4) = 4.0D0/DSQRT(3.0D0)*(L2-L3)
      DER(2,5) = 1.0D0/DSQRT(3.0D0)*(4.0D0*L3-1.0D0)
      DER(2,6) = 4.0D0/DSQRT(3.0D0)*L1
      RETURN
      END
C***********************************************************************
C$SPLIT$TRIM10$*********************************************************
C***********************************************************************
      SUBROUTINE TRIM10(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 10-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.10)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.10)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)10
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH LOCAL
C              COORDINATE, FOR I=1(1)2 AND J=1(1)10
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TRIM10(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DLX, DLY, DNS1, DNS2, DNVL, ETA,
     *     FUN, L1, L2, L3, LA, LB, NS, NV, SRNAME, XI, YMIN,
     *     YMAX, XMIN, XMAX, VEPS, DUMMY
      DIMENSION DER(IDER,JDER), DLX(3), DLY(3), FUN(IFUN)
      DATA SRNAME /8H TRIM10 /
      NV(LA) = 1.D0/2.D0*(3.D0*LA-1.D0)*(3.D0*LA-2.D0)*LA
      NS(LA,LB) = 9.D0/2.D0*LA*LB*(3.D0*LA-1.D0)
      DNVL(LA) = 1.D0/2.D0*(27.D0*LA*LA-18.D0*LA+2.D0)
      DNS1(LA,LB) = 9.D0/2.D0*LB*(6.D0*LA-1.D0)
      DNS2(LA,LB) = 9.D0/2.D0*LA*(3.D0*LA-1.D0)
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.10) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.10) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      L2 = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      L3 = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      DLX(1) = 2.D0/3.D0
      DLY(1) = 0.D0
      DLX(2) = -1.D0/3.D0
      DLY(2) = -1.D0/DSQRT(3.D0)
      DLX(3) = -1.D0/3.D0
      DLY(3) = 1.D0/DSQRT(3.D0)
      FUN(1) = NV(L1)
      FUN(2) = NS(L1,L2)
      FUN(3) = NS(L2,L1)
      FUN(4) = NV(L2)
      FUN(5) = NS(L2,L3)
      FUN(6) = NS(L3,L2)
      FUN(7) = NV(L3)
      FUN(8) = NS(L3,L1)
      FUN(9) = NS(L1,L3)
      FUN(10) = 27.D0*L1*L2*L3
      DER(1,1) = DNVL(L1)*DLX(1)
      DER(2,1) = DNVL(L1)*DLY(1)
      DER(1,2) = DNS1(L1,L2)*DLX(1) + DNS2(L1,L2)*DLX(2)
      DER(2,2) = DNS1(L1,L2)*DLY(1) + DNS2(L1,L2)*DLY(2)
      DER(1,3) = DNS1(L2,L1)*DLX(2) + DNS2(L2,L1)*DLX(1)
      DER(2,3) = DNS1(L2,L1)*DLY(2) + DNS2(L2,L1)*DLY(1)
      DER(1,4) = DNVL(L2)*DLX(2)
      DER(2,4) = DNVL(L2)*DLY(2)
      DER(1,5) = DNS1(L2,L3)*DLX(2) + DNS2(L2,L3)*DLX(3)
      DER(2,5) = DNS1(L2,L3)*DLY(2) + DNS2(L2,L3)*DLY(3)
      DER(1,6) = DNS1(L3,L2)*DLX(3) + DNS2(L3,L2)*DLX(2)
      DER(2,6) = DNS1(L3,L2)*DLY(3) + DNS2(L3,L2)*DLY(2)
      DER(1,7) = DNVL(L3)*DLX(3)
      DER(2,7) = DNVL(L3)*DLY(3)
      DER(1,8) = DNS1(L3,L1)*DLX(3) + DNS2(L3,L1)*DLX(1)
      DER(2,8) = DNS1(L3,L1)*DLY(3) + DNS2(L3,L1)*DLY(1)
      DER(1,9) = DNS1(L1,L3)*DLX(1) + DNS2(L1,L3)*DLX(3)
      DER(2,9) = DNS1(L1,L3)*DLY(1) + DNS2(L1,L3)*DLY(3)
      DER(1,10) = 27.D0*(DLX(1)*L2*L3+L1*DLX(2)*L3+L1*L2*DLX(3))
      DER(2,10) = 27.D0*(DLY(1)*L2*L3+L1*DLY(2)*L3+L1*L2*DLY(3))
      RETURN
      END
C***********************************************************************
C$SPLIT$TRIM3$*********************************************************
C***********************************************************************
      SUBROUTINE TRIM3(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A THREE-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.3)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.3)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)3
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE FOR
C              I=1(1)2 AND J=1(1)3
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TRIM3(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, SRNAME, XI, YMIN, YMAX, 
     *     DUMMY, XMIN, XMAX, VEPS
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TRIM3  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.3) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.3) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 FUN(1) = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      FUN(2) = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      FUN(3) = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      DER(1,1) = 2.0D0/3.0D0
      DER(1,2) = -1.0D0/3.0D0
      DER(1,3) = -1.0D0/3.0D0
      DER(2,1) = 0.0D0
      DER(2,2) = -1.0D0/DSQRT(3.0D0)
      DER(2,3) = +1.0D0/DSQRT(3.0D0)
      RETURN
      END
C***********************************************************************
C$SPLIT$TRIM6$*********************************************************
C***********************************************************************
      SUBROUTINE TRIM6(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF THE SHAPE FUNCTIONS AND THEIR
C      DERIVATIVES AT A SPECIFIED POINT FOR A 6-NODED C0
C      CONTINUOUS TRIANGULAR ELEMENT.  APPROXIMATED FUNCTION
C      CONTINUOUS ACROSS ELEMENT BOUNDARIES
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    22 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    LENGTH OF VECTOR FUN (.GE.6)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.2)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.6)
C      XI      FIRST LOCAL COORDINATE
C      ETA     SECOND LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     VECTOR OF LENGTH IFUN.  FUN(I) CONTAINS THE
C              VALUE OF THE I'TH SHAPE FUNCTION AT THE POINT
C              (XI,ETA), FOR I=1(1)6
C      DER     ARRAY OF DIMENSION (IDER,JDER).  DER(I,J)
C              CONTAINS THE VALUE OF THE DERIVATIVE OF THE J'TH
C              SHAPE FUNCTION WITH RESPECT TO THE I'TH LOCAL
C              COORDINATE AT THE POINT (XI,ETA), FOR I=1(1)2
C              AND J=1(1)6
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE TRIM6(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, L1, L2, L3, SRNAME, XI,
     *     YMIN, YMAX, XMIN, XMAX, VEPS, DUMMY 
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H TRIM6  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.6) IERROR = 1
                        IF (IDER.LT.2 .OR. JDER.LT.6) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR.
     *                       ETA.GT.YMAX)) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.0D0/3.0D0*(1.0D0+2.0D0*XI)
      L2 = 1.0D0/3.0D0*(1.0D0-XI-DSQRT(3.0D0)*ETA)
      L3 = 1.0D0/3.0D0*(1.0D0-XI+DSQRT(3.0D0)*ETA)
      FUN(1) = (2.0D0*L1-1.0D0)*L1
      FUN(2) = 4.0D0*L1*L2
      FUN(3) = (2.0D0*L2-1.0D0)*L2
      FUN(4) = 4.0D0*L2*L3
      FUN(5) = (2.0D0*L3-1.0D0)*L3
      FUN(6) = 4.0D0*L3*L1
      DER(1,1) = 2.0D0/3.0D0*(4.0D0*L1-1.0D0)
      DER(1,2) = 4.0D0/3.0D0*(2.0D0*L2-L1)
      DER(1,3) = -1.0D0/3.0D0*(4.0D0*L2-1.0D0)
      DER(1,4) = -4.0D0/3.0D0*(L2+L3)
      DER(1,5) = -1.0D0/3.0D0*(4.0D0*L3-1.0D0)
      DER(1,6) = 4.0D0/3.0D0*(2.0D0*L3-L1)
      DER(2,1) = 0.0D0
      DER(2,2) = -4.0D0/DSQRT(3.0D0)*L1
      DER(2,3) = -1.0D0/DSQRT(3.0D0)*(4.0D0*L2-1.0D0)
      DER(2,4) = 4.0D0/DSQRT(3.0D0)*(L2-L3)
      DER(2,5) = 1.0D0/DSQRT(3.0D0)*(4.0D0*L3-1.0D0)
      DER(2,6) = 4.0D0/DSQRT(3.0D0)*L1
      RETURN
      END
C***********************************************************************
C$SPLIT$VECADD$*********************************************************
C***********************************************************************
      SUBROUTINE VECADD(V, IV, W, IW, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      ADDS THE VECTOR V TO THE VECTOR W, STORING THE RESULT
C      IN V
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    23 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF LENGTH IV.  ON ENTRY, CONTAINS THE
C              VALUES OF ONE OF THE VECTORS TO BE ADDED
C              IN ELEMENTS 1 TO N
C      IV      LENGTH OF VECTOR V (.GE.N)
C      W       VECTOR OF LENGTH IW.  CONTAINS THE VALUES OF THE
C              SECOND VECTOR TO BE ADDED IN ELEMENTS 1 TO N
C      IW      LENGTH OF VECTOR W (.GE.N)
C      N       NUMBER OF ELEMENTS OF V AND W TO BE ADDED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      V       VECTOR OF LENGTH IV.  ON EXIT, V(I) CONTAINS
C              THE SUM OF V(I) AND W(I) FOR I=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VECADD(V, IV, W, IW, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IV, IW, N
      DOUBLE PRECISION SRNAME, V, W
      DIMENSION V(IV), W(IW)
      DATA SRNAME /8H VECADD /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 3
                        IF (N.GT.IV) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1020 I=1,N
                        V(I) = V(I) + W(I)
 1020                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$VECCOP$*********************************************************
C***********************************************************************
      SUBROUTINE VECCOP(V, IV, W, IW, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      COPIES FIRST N ELEMENTS OF THE VECTOR V INTO THE VECTOR W
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    23 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF LENGTH IV TO BE COPIED
C      IV      LENGTH OF VECTOR V (.GE.N)
C      IW      LENGTH OF VECTOR W
C      N       NUMBER OF ELEMENTS OF V TO BE COPIED
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF LENGTH IW; W(I)IS SET TO V(I) FOR
C              I=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VECCOP(V, IV, W, IW, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IV, IW, N
      DOUBLE PRECISION SRNAME, V, W
      DIMENSION V(IV), W(IW)
      DATA SRNAME /8H VECCOP /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 3
                        IF (N.GT.IV) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1020 I=1,N
                        W(I) = V(I)
 1020                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$VECMAT$*********************************************************
C***********************************************************************
      SUBROUTINE VECMAT(V, IV, A, IA, JA, M, N, W, IW, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRE-MULTIPLIES THE MATRIX A BY THE VECTOR V, STORING
C      THE RESULT IN THE VECTOR W
C
C HISTORY
C      RELEASE 2.0  1 FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    1 FEB 1981 (CG)
C
C ARGUMENTS IN
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF V (.GE.M)
C      A       ARRAY OF DIMENSION (IA,JA)
C      IA      FIRST DIMENSION OF A (.GE.M)
C      JA      SECOND DIMENSION OF A (.GE.N)
C      M       NUMBER OF ROWS OF A TO BE USED IN THE
C              MULTIPLICATION
C      N       NUMBER OF COLUMNS OF A AND THE NUMBER OF
C              ELEMENETS OF V TO BE USED IN THE MULTIPLICATION
C      IW      DIMENSION OF VECTOR W (.GE.N)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW; CONTAINS THE RESULT OF
C              THE OPERATION W=V*A
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VECMAT(A, IA, JA, V, IV, M, N, W, IW, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IA, IERROR, ITEST, IV, IW, J, JA,
     *     M, N
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H VECMAT /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 4
                        IF (M.GT.IV) IERROR = 3
                        IF (M.GT.IA .OR. N.GT.JA) IERROR = 2
                        IF (M.LE.0 .OR. N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1030 I=1,N
                        X = 0.0D0
                        DO 1020 J=1,M
                        X = X + A(J,I)*V(J)
 1020                   CONTINUE
                        W(I) = X
 1030                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$VECNUL$*********************************************************
C***********************************************************************
      SUBROUTINE VECNUL(VEC, IVEC, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SETS THE FIRST N ELEMENTS OF A VECTOR TO ZERO
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    23 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IV      LENGTH OF VECTOR V (.GE.N)
C      N       NUMBER OF ELEMENTS TO BE SET TO ZERO
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      V       VECTOR OF LENGTH IV.  V(I)=0.0D0 FOR I=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VECNUL(VEC, IVEC, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IVEC, N
      DOUBLE PRECISION SRNAME, VEC
      DIMENSION VEC(IVEC)
      DATA SRNAME /8H VECNUL /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IVEC) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1020 I=1,N
                        VEC(I) = 0.0D0
 1020                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$VECSUB$*********************************************************
C***********************************************************************
      SUBROUTINE VECSUB(V, IV, W, IW, N, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      SUBTRACTS THE VECTOR W FROM VECTOR V, STORING THE
C      RESULT IN V
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (IMS) --- SERC COPYRIGHT
C      COMMENTED    23 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF LENGTH IV.  ON ENTRY, V(I), I=1(1)N,
C              CONTAINS VALUES FROM WHICH CORRESPONDING VALUES
C              W(I) ARE TO BE SUBTRACTED
C      IV      LENGTH OF V (.GE.N)
C      W       VECTOR OF LENGTH IW.  THE ELEMENTS W(I), I=1(1)N
C              ARE TO BE SUBTRACTED FROM THE CORRESPONDING
C              ELEMENTS OF V
C      IW      LENGTH OF W (.GE.N)
C      N       NUMBER OF ELEMENTS OF V AND W TO BE OPERATED ON
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      V       VECTOR OF LENGTH IV.  ON EXIT, V(I) IS SET TO
C              V(I)-W(I) FOR I=1(1)N
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VECSUB(V, IV, W, IW, N, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, I, IERROR, ITEST, IV, IW, N
      DOUBLE PRECISION SRNAME, V, W
      DIMENSION V(IV), W(IW)
      DATA SRNAME /8H VECSUB /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (N.GT.IW) IERROR = 3
                        IF (N.GT.IV) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (IERROR.NE.0) RETURN
 1010                   DO 1020 I=1,N
                        V(I) = V(I) - W(I)
 1020                   CONTINUE
                        RETURN
                        END
C***********************************************************************
C$SPLIT$VMSYB$*********************************************************
C***********************************************************************
      SUBROUTINE VMSYB(V, IV, A, IA, JA, W, IW, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRE-MULTIPLIES A REAL UNSYMMETRIC BANDED MATRIX STORED AS
C      A RECTANGULAR ARRAY BY A VECTOR
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF VECTOR V (.GE.N)
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE REAL UNSYMMETRIC BAND MATRIX
C              OF ORDER N AND SEMI-BANDWIDTH HBAND
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.HBAND)
C      IW      DIMENSION OF VECTOR W (.GE.N)
C      N       ORDER OF THE REAL UNSYMMETRIC BAND MATRIX
C      HBAND   SEMI-BANDWIDTH OF THE REAL UNSYMMETRIC BAND MATRIX
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW.  CONTAINS THE RESULT OF
C              THE OPERATION W=A*V
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VMSYB(V, IV, A, IA, JA, W, IW, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER ERRMES, HBAND, I, IERROR, IJ, ITEST, IV, IW,
     *     J, JI, N
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H VMSYB  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IW.LT.N) IERROR = 4
                        IF (IV.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.HBAND) IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 DO 1060 I=1,N
      X = 0.0D0
      J = HBAND
 1020 IF (I+J.LE.HBAND) GO TO 1030
      IJ = I + J - HBAND
      X = X + A(I,J)*V(IJ)
 1030 J = J - 1
      IF (J.NE.0) GO TO 1020
      J = HBAND - 1
 1040 IF (I-J.GE.N-HBAND+1) GO TO 1050
      JI = I - J + HBAND
      X = X + A(JI,J)*V(JI)
 1050 J = J - 1
      IF (J.NE.0) GO TO 1040
      W(I) = X
 1060 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$VMUSB$*********************************************************
C***********************************************************************
      SUBROUTINE VMUSB(V, IV, A, IA, JA, W, IW, N, HBAND, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRE-MULTIPLIES A REAL UNSYMMETRIC BANDED MATRIX STORED AS
C      A RECTANGULAR ARRAY BY A VECTOR
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      V       VECTOR OF DIMENSION IV
C      IV      DIMENSION OF VECTOR V (.GE.N)
C      A       ARRAY OF DIMENSION (IA,JA).  CONTAINS THE
C              ELEMENTS OF THE REAL UNSYMMETRIC BAND MATRIX
C              OF ORDER N AND SEMI-BANDWIDTH HBAND
C      IA      FIRST DIMENSION OF A (.GE.N)
C      JA      SECOND DIMENSION OF A (.GE.2*HBAND-1)
C      IW      DIMENSION OF VECTOR W (.GE.N)
C      N       ORDER OF THE REAL UNSYMMETRIC BAND MATRIX
C      HBAND   SEMI-BANDWIDTH OF THE REAL UNSYMMETRIC BAND MATRIX
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      W       VECTOR OF DIMENSION IW.  CONTAINS THE RESULT OF
C              THE OPERATION W=V*A
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE VMSYB(V, IV, A, IA, JA, W, IW, N, HBAND, ITEST)
C***********************************************************************
C
      INTEGER BAND, ERRMES, HBAND, I, IERROR, IJ, ITEST, IV,
     *     IW, J, JI, N
      DOUBLE PRECISION A, SRNAME, V, W, X
      DIMENSION A(IA,JA), V(IV), W(IW)
      DATA SRNAME /8H VMUSB  /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IW.LT.N) IERROR = 4
                        IF (IV.LT.N) IERROR = 3
                        IF (IA.LT.N .OR. JA.LT.2*HBAND-1)
     *                      IERROR = 2
                        IF (N.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 BAND = 2*HBAND - 1
      DO 1030 I=1,N
      X = 0.0D0
      DO 1020 J=1,BAND
      IJ = J - HBAND + I
      JI = BAND + 1 - J
      IF ((IJ.LT.1) .OR. (IJ.GT.N)) GO TO 1020
      X = X + A(IJ,JI)*V(IJ)
 1020 CONTINUE
      W(I) = X
 1030 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$WDG15$*********************************************************
C***********************************************************************
      SUBROUTINE WDG15(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 6-NODED PENTAHEDRAL ELEMENT.
C      THE FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.15)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.15)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE WDG15(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, DL1X, DL1Y, DL2X, DL2Y, DL3X, DL3Y,
     *     DNCL, DNCZ, DNMQL, DNMQZ, DNMTL, DNMTZ, ETA, FUN,
     *     L1, L2, L3, LA, LB, NC, NMQ, NMT, SRNAME,
     *     XI, Z, ZETA, ZM, ZP, XMIN, XMAX, YMIN, YMAX, ZVAL, VEPS,
     *     DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H WDG15  /
      NC(LA,Z) = 1.D0/2.D0*LA*(2.D0*LA-1.D0)*(1.D0+Z*ZETA) -
     *     1.D0/2.D0*LA*(1.D0-ZETA*ZETA)
      NMT(LA,LB,Z) = 2.D0*LA*LB*(1.D0+Z*ZETA)
      NMQ(LA) = LA*(1.D0-ZETA*ZETA)
      DNCL(LA,Z) = 1.D0/2.D0*((4.D0*LA-1.D0)*(1.D0+Z*ZETA)+ZETA*
     *     ZETA-1.D0)
      DNCZ(LA,Z) = 1.D0/2.D0*LA*(2.D0*ZETA+Z*(2.D0*LA-1.D0))
      DNMQL(LA) = 1 - ZETA*ZETA
      DNMQZ(LA) = -2.D0*LA*ZETA
      DNMTL(LA,LB,Z) = 2.D0*LB*(1.D0+Z*ZETA)
C
      DNMTZ(LA,LB,Z) = 2.D0*LA*LB*Z
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.15) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.15) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        ZVAL=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR. ETA.GT.YMAX)
     *                       .OR. DABS(ZETA) .GT. ZVAL) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.D0/3.D0*(1.D0+2.D0*XI)
      L2 = 1.D0/3.D0*(1.D0-XI-DSQRT(3.D0)*ETA)
      L3 = 1.D0/3.D0*(1.D0-XI+DSQRT(3.D0)*ETA)
      DL1X = 2.D0/3.D0
      DL1Y = 0.D0
      DL2X = -1.D0/3.D0
      DL2Y = -1.D0/DSQRT(3.D0)
      DL3X = -1.D0/3.D0
      DL3Y = 1.D0/DSQRT(3.D0)
      ZP = 1.D0
      ZM = -1.D0
      FUN(1) = NC(L1,ZM)
      FUN(2) = NMT(L1,L2,ZM)
      FUN(3) = NC(L2,ZM)
      FUN(4) = NMT(L2,L3,ZM)
      FUN(5) = NC(L3,ZM)
      FUN(6) = NMT(L3,L1,ZM)
      FUN(7) = NMQ(L1)
      FUN(8) = NMQ(L2)
      FUN(9) = NMQ(L3)
      FUN(10) = NC(L1,ZP)
      FUN(11) = NMT(L1,L2,ZP)
      FUN(12) = NC(L2,ZP)
      FUN(13) = NMT(L2,L3,ZP)
      FUN(14) = NC(L3,ZP)
      FUN(15) = NMT(L3,L1,ZP)
      DER(1,1) = DNCL(L1,ZM)*DL1X
      DER(2,1) = DNCL(L1,ZM)*DL1Y
      DER(3,1) = DNCZ(L1,ZM)
      DER(1,2) = DNMTL(L1,L2,ZM)*DL1X + DNMTL(L2,L1,ZM)*DL2X
      DER(2,2) = DNMTL(L1,L2,ZM)*DL1Y + DNMTL(L2,L1,ZM)*DL2Y
      DER(3,2) = DNMTZ(L1,L2,ZM)
      DER(1,3) = DNCL(L2,ZM)*DL2X
      DER(2,3) = DNCL(L2,ZM)*DL2Y
      DER(3,3) = DNCZ(L2,ZM)
      DER(1,4) = DNMTL(L2,L3,ZM)*DL2X + DNMTL(L3,L2,ZM)*DL3X
      DER(2,4) = DNMTL(L2,L3,ZM)*DL2Y + DNMTL(L3,L2,ZM)*DL3Y
      DER(3,4) = DNMTZ(L2,L3,ZM)
      DER(1,5) = DNCL(L3,ZM)*DL3X
      DER(2,5) = DNCL(L3,ZM)*DL3Y
      DER(3,5) = DNCZ(L3,ZM)
      DER(1,6) = DNMTL(L3,L1,ZM)*DL3X + DNMTL(L1,L3,ZM)*DL1X
      DER(2,6) = DNMTL(L3,L1,ZM)*DL3Y + DNMTL(L1,L3,ZM)*DL1Y
      DER(3,6) = DNMTZ(L3,L1,ZM)
      DER(1,7) = DNMQL(L1)*DL1X
      DER(2,7) = DNMQL(L1)*DL1Y
      DER(3,7) = DNMQZ(L1)
      DER(1,8) = DNMQL(L2)*DL2X
      DER(2,8) = DNMQL(L2)*DL2Y
      DER(3,8) = DNMQZ(L2)
      DER(1,9) = DNMQL(L3)*DL3X
      DER(2,9) = DNMQL(L3)*DL3Y
      DER(3,9) = DNMQZ(L3)
      DER(1,10) = DNCL(L1,ZP)*DL1X
      DER(2,10) = DNCL(L1,ZP)*DL1Y
      DER(3,10) = DNCZ(L1,ZP)
      DER(1,11) = DNMTL(L1,L2,ZP)*DL1X + DNMTL(L2,L1,ZP)*DL2X
      DER(2,11) = DNMTL(L1,L2,ZP)*DL1Y + DNMTL(L2,L1,ZP)*DL2Y
      DER(3,11) = DNMTZ(L1,L2,ZP)
      DER(1,12) = DNCL(L2,ZP)*DL2X
      DER(2,12) = DNCL(L2,ZP)*DL2Y
      DER(3,12) = DNCZ(L2,ZP)
      DER(1,13) = DNMTL(L2,L3,ZP)*DL2X + DNMTL(L3,L2,ZP)*DL3X
      DER(2,13) = DNMTL(L2,L3,ZP)*DL2Y + DNMTL(L3,L2,ZP)*DL3Y
      DER(3,13) = DNMTZ(L2,L3,ZP)
      DER(1,14) = DNCL(L3,ZP)*DL3X
      DER(2,14) = DNCL(L3,ZP)*DL3Y
      DER(3,14) = DNCZ(L3,ZP)
      DER(1,15) = DNMTL(L3,L1,ZP)*DL3X + DNMTL(L1,L3,ZP)*DL1X
      DER(2,15) = DNMTL(L3,L1,ZP)*DL3Y + DNMTL(L1,L3,ZP)*DL1Y
      DER(3,15) = DNMTZ(L3,L1,ZP)
      RETURN
      END
C***********************************************************************
C$SPLIT$WDG6$*********************************************************
C***********************************************************************
      SUBROUTINE WDG6(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,
     *     ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      RETURNS THE VALUES OF SHAPE FUNCTIONS AND DERIVATIVES
C      AT A SPECIFIED POINT FOR AN 6-NODED PENTAHEDRAL ELEMENT.
C      THE FUNCTION IS CONTINUOUS ACROSS ELEMENT BOUNDARIES.
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    10 OCT 1980 (KR)
C
C ARGUMENTS IN
C      IFUN    DIMENSION OF VECTOR FUN (.GE.6)
C      IDER    FIRST DIMENSION OF ARRAY DER (.GE.3)
C      JDER    SECOND DIMENSION OF ARRAY DER (.GE.6)
C      XI      VALUE OF LOCAL COORDINATE AT WHICH FUNCTION AND
C              DERIVATIVE VALUES REQUIRED
C      ETA     VALUE OF SECOND LOCAL COORDINATE
C      ZETA    VALUE OF THIRD LOCAL COORDINATE
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FUN     REAL VECTOR OF DIMENSION IFUN.  FUN(I) CONTAINS
C              VALUE OF I'TH SHAPE FUNCTION AT (XI,ETA,ZETA)
C      DER     REAL ARRAY OF DIMENSIONS (IDER,JDER).  DER(I,J)
C              CONTAINS THE DERIVATIVE OF THE J'TH SHAPE
C              FUNCTION WITH RESPECT TO THE I'TH COORDINATE AT
C              THE POINT (XI,ETA,ZETA)
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE WDG6(FUN, IFUN, DER, IDER, JDER, XI, ETA, ZETA,ITEST)
C***********************************************************************
C
      INTEGER ERRMES, IDER, IERROR, IFUN, ITEST, JDER
      DOUBLE PRECISION DER, ETA, FUN, L1, L2, L3, SRNAME, XI,
     *     ZETA, ZETAM, ZETAP, XMIN, XMAX, YMIN, YMAX, ZVAL, VEPS,
     *     DUMMY
      DIMENSION DER(IDER,JDER), FUN(IFUN)
      DATA SRNAME /8H WDG6   /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (IFUN.LT.6) IERROR = 1
                        IF (IDER.LT.3 .OR. JDER.LT.6) IERROR = 2
                        YMIN = 1.0D0/DSQRT(3.0D0)*(XI-1.0D0)-
     *                       VEPS(DUMMY)
                        YMAX = 1.0D0/DSQRT(3.0D0)*(1.0D0-XI)+
     *                       VEPS(DUMMY)
                        XMIN=-(0.5D0+VEPS(DUMMY))
                        XMAX=1.0D0+VEPS(DUMMY)
                        ZVAL=1.0D0+VEPS(DUMMY)
                        IF ((XI.LT.XMIN .OR. XI.GT.XMAX)
     *                      .OR. (ETA.LT.YMIN .OR. ETA.GT.YMAX)
     *                       .OR. DABS(ZETA) .GT. ZVAL) IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 L1 = 1.D0/6.D0*(1.D0+2.D0*XI)
      L2 = 1.D0/6.D0*(1.D0-XI-DSQRT(3.D0)*ETA)
      L3 = 1.D0/6.D0*(1.D0-XI+DSQRT(3.D0)*ETA)
      ZETAM = (1.D0-ZETA)
      ZETAP = (1.D0+ZETA)
      FUN(1) = L1*ZETAM
      FUN(2) = L2*ZETAM
      FUN(3) = L3*ZETAM
      FUN(4) = L1*ZETAP
      FUN(5) = L2*ZETAP
      FUN(6) = L3*ZETAP
      DER(1,1) = 1.D0/3.D0*ZETAM
      DER(2,1) = 0.D0
      DER(3,1) = -L1
      DER(1,2) = -1.D0/6.D0*ZETAM
      DER(2,2) = -1.D0/(2.D0*DSQRT(3.D0))*ZETAM
      DER(3,2) = -L2
      DER(1,3) = -1.D0/6.D0*ZETAM
      DER(2,3) = 1.D0/(2.D0*DSQRT(3.D0))*ZETAM
      DER(3,3) = -L3
      DER(1,4) = 1.D0/3.D0*ZETAP
      DER(2,4) = 0.D0
      DER(3,4) = L1
      DER(1,5) = -1.D0/6.D0*ZETAP
      DER(2,5) = -1.D0/(2.D0*DSQRT(3.D0))*ZETAP
      DER(3,5) = L2
      DER(1,6) = -1.D0/6.D0*ZETAP
      DER(2,6) = 1.D0/(2.D0*DSQRT(3.D0))*ZETAP
      DER(3,6) = L3
      RETURN
      END
C***********************************************************************
C$SPLIT$FORMNF$*********************************************************
C***********************************************************************
      SUBROUTINE FORMNF(REST, IREST, JREST, RESNOD, TOTNOD, DOFNOD, NF,
     *     INF, JNF, TOTDOF, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CONSTRUCTS THE NODAL FREEDOM ARRAY FROM THE RESTRAINED
C      FREEDOM DATA
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979
C      COMMENTED    18 FEB 1980 (KR)
C      RECODED      01 NOV 1981 (NB)
C
C ARGUMENTS IN
C      REST    INTEGER ARRAY; REST(I,J) CONTAINS THE I'TH SET
C              OF RESTRAINT INFORMATION - REST(I,1) CONTAINS
C              THE NODE NUMBER, REST(I,J+1) FOR J=1(1)DOFNOD
C              CONTAINS THE LOCAL FREEDOM NUMBERS OF THE
C              FREEDOMS THAT ARE RESTRAINED
C      IREST   FIRST DIMENSION OF ARRAY REST (.GE. RESNOD)
C      JREST   SECOND DIMENSION OF REST (.GE. DOFNOD)
C      RESNOD  NUMBER OF NODES AT WHICH FREEDOMS ARE RESTRAINED
C      TOTNOD  TOTAL NUMBER OF NODES IN MESH
C      INF     FIRST DIMENSION OF ARRAY INF (.GE. TOTNOD)
C      JNF     SECOND DIMENSION OF INF (.GE. DOFNOD)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      NF      NF(I,J), J=1(1)DOFNOD, CONTAINS THE FREEDOM
C              NUMBERS ASSOCIATED WITH THE I'TH NODE
C      TOTDOF  TOTAL NUMBER OF FREEDOMS IN PROBLEM UNDER
C              CONSIDERATION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE FORMNF(REST, IREST, JREST, RESNOD, TOTNOD, DOFNOD, NF,
C    *     INF, JNF, TOTDOF, ITEST)
C***********************************************************************
C
      INTEGER DOFNOD, I, INF, J, K, L, NF, REST, TOTNOD, RESNOD, TOTDOF,
     *     IERROR,ERRMES,M
      DOUBLE PRECISION SRNAME
      DIMENSION NF(INF,JNF), REST(IREST,JREST)
      LOGICAL SWITCH
      DATA SRNAME /8H FORMNF /
                        IF(ITEST.EQ.-1) GO TO 999
                        IERROR=0
                        IF(INF.LT.TOTNOD.OR.JNF.LT.DOFNOD) IERROR=3
                        IF(IREST.LT.RESNOD.OR.JREST.LT.DOFNOD+1)
     *                     IERROR=2
                        IF(RESNOD.LT.0.OR.TOTNOD.LE.0.OR.DOFNOD.LE.0)
     *                     IERROR=1
                        ITEST=ERRMES(ITEST,IERROR,SRNAME)
                        IF(ITEST.NE.0) RETURN
      SWITCH=.TRUE.
999   DO 1020 I=1,TOTNOD
      DO 1010 J=1,DOFNOD
      NF(I,J) = 1
 1010 CONTINUE
 1020 CONTINUE
      IF (RESNOD.EQ.0) GO TO 1045
      DO 1040 I=1,RESNOD
      K = REST(I,1)
      DO 1030 J=1,DOFNOD
      L = REST(I,J+1)
      M=IABS(L)
                        IF(ITEST.EQ.-1) GO TO 888
                        IERROR=0
                        IF(K.GT.TOTNOD.OR.M.GT.DOFNOD) IERROR=4
                        ITEST=ERRMES(ITEST,IERROR,SRNAME)
                        IF(ITEST.NE.0) RETURN
888   IF (L.GT.0) NF(K,L) = 0
      IF (L.GE.0) GO TO 1030
      NF(K,M)=L
      SWITCH=.FALSE.
 1030 CONTINUE
 1040 CONTINUE
 1045 CONTINUE
      K = 1
      DO 1060 I=1,TOTNOD
      DO 1050 J=1,DOFNOD
      IF (NF(I,J).LE.0) GO TO 1050
      NF(I,J) = K
      K = K + 1
 1050 CONTINUE
 1060 CONTINUE
      TOTDOF = K - 1
      IF (SWITCH) RETURN
      DO 1080 I=1,TOTNOD
      DO 1070 J=1,DOFNOD
      IF (NF(I,J).GE.0) GO TO 1070
      NF(I,J)=-K
      K=K+1
 1070 CONTINUE
 1080 CONTINUE
      RETURN
      END
C***********************************************************************
C$SPLIT$FREDIF$*********************************************************
C***********************************************************************
      SUBROUTINE FREDIF(IELE, ELTOP, IELTOP, JELTOP, NF, INF, JNF,
     *     DOFNOD, FIRST, DIF, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES THE MAXIMUM FREEDOM NUMBER DIFFERENCE FOR AN
C      ELEMENT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      RECODED      12 FEB 1980 (CG)
C      COMMENTED    18 FEB 1980 (KR)
C
C ARGUMENTS IN
C      NELE    ELEMENT NUMBER
C      ELTOP   ELTOP(I,1) = ELEMENT TYPE OF ELEMENT I
C              ELTOP(I,2) = NUMBER OF NODES ON ELEMENT I
C              ELTOP(I,J+2), J=1(1)NUMBER OF NODES ON ELEMENT,
C              CONTAINS THE NODES ASSOCIATED WITH ELEMENT I
C      IELTOP  FIRST DIMENSION OF ARRAY ELTOP (.GE. NELE)
C      JELTOP  SECOND DIMENSION OF ELTOP (.GE. NUMBER OF NODES
C              ON ELEMENT)
C      NF      NF(I,J) CONTAINS THE FREEDOM NUMBERS ASSOCIATED
C              WITH NODE I
C      INF     FIRST DIMENSION OF NF (.GE. MAXIMUM NODE NUMBER
C              ON ELEMENT)
C      JNF     SECOND DIMENSION OF NF (.GE. DOFNOD)
C      DOFNOD  NUMBER OF DEGREES OF FREEDOM PER NODE ON THE
C              ELEMENT
C      FIRST   MUST BE SET TO .TRUE. FOR THE FIRST CALL TO
C              FREDIF AND .FALSE. FOR SUBSEQUENT CALLS
C      DIF     MUST BE ZERO FOR FIRST CALL TO FREDIF;
C              SUBSEQUENTLY CONTAINS THE MAXIMUM FREEDOM
C              DIFFERENCE PRIOR TO THE CURRENT CALL
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      FIRST   SET TO .FALSE.
C      DIF     MAXIMUM FREEDOM DIFFERENCE FOR ALL ELEMENTS UP
C              TO AND INCLUDING ELEMENT NELE
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE FREDIF(IELE, ELTOP, IELTOP, JELTOP, NF, INF, JNF,
C    *     DOFNOD, FIRST, DIF, ITEST)
C***********************************************************************
C
      INTEGER DIF, DOFNOD, ELTOP, ERRMES, I, IDEG, IELE, IELTOP,
     *     IERROR, INF, INOD, ITEST, J, JELTOP, JNF, MAX, MAXINT,
     *     MIN, NF, NODEL
      DOUBLE PRECISION SRNAME
      LOGICAL FIRST
      DIMENSION ELTOP(IELTOP,JELTOP), NF(INF,JNF)
      DATA SRNAME /8H FREDIF /
      IF (.NOT.FIRST) GO TO 1010
      FIRST = .FALSE.
      DIF = 0
 1010                   IF (ITEST.EQ.-1) GO TO 1020
                        IERROR = 0
                        IF (IELTOP.LT.IELE) IERROR = 3
                        IF (JNF.LT.DOFNOD) IERROR = 2
                        IF (IELE.LE.0 .OR. DOFNOD.LE.0) IERROR = 1
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1020  NODEL = ELTOP(IELE,2)
       IF (ITEST.EQ.-1) GO TO 1030
       IERROR = 0
       IF (JELTOP.LT.NODEL+2) IERROR = 4
       ITEST = ERRMES(ITEST,IERROR,SRNAME)
       IF (ITEST.NE.0) RETURN
 1030  MAX = 0
       MIN = MAXINT(MAX)
                        DO 1060 I=1,NODEL
                        INOD = ELTOP(IELE,I+2)
                        IF (ITEST.EQ.-1) GO TO 1040
                        IERROR = 0
                        IF (INF.LT.INOD) IERROR = 5
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1040                   DO 1050 J=1,DOFNOD
                        IDEG = NF(INOD,J)
                        IF (IDEG.EQ.0) GO TO 1050
                        MAX = MAX0(IDEG,MAX)
                        MIN = MIN0(IDEG,MIN)
 1050                   CONTINUE
 1060                   CONTINUE
                        DIF = MAX0(DIF,MAX-MIN)
                        RETURN
                        END
C***********************************************************************
C$SPLIT$LINQUA$*********************************************************
C***********************************************************************
      SUBROUTINE LINQUA(XI, ETA, GEOM, IGEOM, JGEOM, NODEL,
     *     SIDNUM, ALEN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES A UNIT OF LENGTH ALONG THE SIDE OF A
C      RECTANGULAR ELEMENT (4, 8 OR 12 NODED)
C
C HISTORY
C      RELEASE 2.0  1  FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    24 JULY 1981 (CG)
C
C ARGUMENTS IN
C      XI      LOCAL COORDINATE OF POINT AT WHICH LENGTH IS
C              REQUIRED
C      ETA     LOCAL COORDINATE OF POINT AT WHICH LENGTH IS
C              REQUIRED
C      GEOM    LOCAL COORDINATE ARRAY CONTAINING THE GLOBAL
C              COORDIANTES OF EACH NODE ON AN ELEMENT IN THE
C              LOCAL ORDER
C      IGEOM   FIRST DIMENSION OF ARRAY GEOM (.GE.NODEL)
C      JGEOM   SECOND DIMENSION OF ARRAY GEOM (.GE.2)
C      NODEL   NUMBER OF NODES ON THE ELEMENT
C      SIDNUM  THE SIDE NUMBER OF THE SIDE OF THE ELEMENT TO
C              BE USED IN CALCULATING THE LENGTH (.LE.3)
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      ALEN    THE UNIT OF LENGTH AT THE SPECIFIED POINT
C
C ROUTINES CALLED
C      ERRMES  QUAM4  QUAM8  QUAM12  MATMUL
C
C
C     SUBROUTINE LINQUA(XI,ETA,GEOM,IGEOM,JGEOM,NODEL,SIDNUM,ALEN,ITEST)
C***********************************************************************
C
      INTEGER DIMEN, ERRMES, IDER, IERROR, IFUN, IGEOM, IJAC, ITEST,
     *     JDER, JGEOM, JJAC, N, NODEL, SIDNUM                            
      DOUBLE PRECISION ALEN, DER, ETA, FUN, GEOM, JAC,
     *     SRNAME, XI
      DIMENSION DER(2,12), FUN(12), GEOM(IGEOM,JGEOM),
     *     JAC(2,2)
      DATA DIMEN /2/, IDER /2/, IFUN /12/, IJAC /2/, JDER /12/,
     *     JJAC /2/, SRNAME /8H LINQUA /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF ((NODEL.LE.0) .OR. (SIDNUM.LE.0))
     *                      IERROR = 1
                        IF (IGEOM.LT.NODEL .OR. JGEOM.LT.2)
     *                      IERROR = 2
                        IF (SIDNUM.LT.1 .OR. SIDNUM.GT.4)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 N = NODEL/4
      IF (ITEST.EQ.-1) GO TO 1015
      IERROR = 0
      IF(N.LE.0.OR.N.GE.4) IERROR=4
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
 1015 GO TO (1020, 1030, 1040), N
 1020 CALL QUAM4(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
      GO TO 1050
 1030 CALL QUAM8(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
      GO TO 1050
 1040 CALL QUAM12(FUN, IFUN, DER, IDER, JDER, XI, ETA, ITEST)
 1050 CALL MATMUL(DER, IDER, JDER, GEOM, IGEOM, JGEOM, JAC, IJAC,
     *     JJAC, DIMEN, NODEL, DIMEN, ITEST)
      GO TO (1060, 1070, 1060, 1070), SIDNUM
 1060 ALEN = DSQRT(JAC(2,1)**2+JAC(2,2)**2)
      RETURN
 1070 ALEN = DSQRT(JAC(1,1)**2+JAC(1,2)**2)
      RETURN
      END
C***********************************************************************
C$SPLIT$LINTRI$*********************************************************
C***********************************************************************
      SUBROUTINE LINTRI(XI, ETA, GEOM, IGEOM, JGEOM, NODEL,
     *     SIDNUM, ALEN, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      CALCULATES A UNIT OF LENGTH ALONG THE SIDE OF A
C      TRIANGULAR ELEMENT (3, 6 OR 10 NODED)
C
C HISTORY
C      RELEASE 2.0  1  FEB 1981 (CG) --- SERC COPYRIGHT
C      COMMENTED    24 JULY 1981 (CG)
C
C ARGUMENTS IN
C      XI      LOCAL COORDINATE OF POINT AT WHICH LENGTH IS
C              REQUIRED
C      ETA     LOCAL COORDINATE OF POINT AT WHICH LENGTH IS
C              REQUIRED
C      GEOM    LOCAL COORDINATE ARRAY CONTAINING THE GLOBAL
C              COORDIANTES OF EACH NODE ON AN ELEMENT IN THE
C              LOCAL ORDER
C      IGEOM   FIRST DIMENSION OF ARRAY GEOM (.GE.NODEL)
C      JGEOM   SECOND DIMENSION OF ARRAY GEOM (.GE.2)
C      NODEL   NUMBER OF NODES ON THE ELEMENT
C      SIDNUM  THE SIDE NUMBER OF THE SIDE OF THE ELEMENT TO
C              BE USED IN CALCULATING THE LENGTH
C      ITEST   ERROR CHECKING OPTION
C
C ARGUMENTS OUT
C      ALEN    THE UNIT OF LENGTH AT THE SPECIFIED POINT
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE LINTRI(XI,ETA,GEOM,IGEOM,JGEOM,NODEL,SIDNUM,ALEN,ITEST)
C***********************************************************************
C
      INTEGER IGEOM, ITEST, JGEOM, N, NODEL, SIDNUM, IERROR ,ERRMES
      DOUBLE PRECISION ALEN, DXDL, DYDL, ETA, GEOM, 
     *     L1, L2, L3, SRNAME, T1, T2, T3, T4, XI
      DIMENSION GEOM(IGEOM,JGEOM)
      DATA SRNAME /8H LINTRI /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF ((NODEL.LE.0) .OR. (SIDNUM.LE.0))
     *                      IERROR = 1
                        IF (IGEOM.LT.NODEL .OR. JGEOM.LT.2)
     *                      IERROR = 2
                        IF (SIDNUM.LT.1 .OR. SIDNUM.GT.3)
     *                      IERROR = 3
                        ITEST = ERRMES(ITEST,IERROR,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 N = NODEL/3
      IF(ITEST.EQ.-1) GOTO 1015
      IERROR=0
      IF(N.LE.0.OR.N.GE.4) IERROR=4
      ITEST = ERRMES(ITEST,IERROR,SRNAME)
      IF(ITEST.NE.0) RETURN
 1015 GO TO (1020, 1060, 1100), N
C+++++
C     CODE FOR 3-NODE TRIANGLE
C
 1020 GO TO (1030, 1040, 1050), SIDNUM
 1030 DXDL = GEOM(1,1) - GEOM(2,1)
      DYDL = GEOM(1,2) - GEOM(2,2)
      GO TO 1140
 1040 DXDL = GEOM(2,1) - GEOM(3,1)
      DYDL = GEOM(2,2) - GEOM(3,2)
      GO TO 1140
 1050 DXDL = GEOM(3,1) - GEOM(1,1)
C+++++
C      CODE FOR 6-NODE TRIANGLE
C
      DYDL = GEOM(3,2) - GEOM(1,2)
      GO TO 1140
 1060 GO TO (1070, 1080, 1090), SIDNUM
 1070 L1 = 1.D0/3.D0*(1.D0+2.D0*XI)
      DXDL = (4.D0*L1-1.D0)*GEOM(1,1) + 4.D0*(1.D0-2.D0*L1)*GEOM(2,
     *     1) + (4.D0*L1-3.D0)*GEOM(3,1)
      DYDL = (4.D0*L1-1.D0)*GEOM(1,2) + 4.D0*(1.D0-2.D0*L1)*GEOM(2,
     *     2) + (4.D0*L1-3.D0)*GEOM(3,2)
      GO TO 1140
 1080 L2 = 1.D0/3.D0*(1.D0-XI-DSQRT(3.D0)*ETA)
      DXDL = (4.D0*L2-1.D0)*GEOM(3,1) + 4.D0*(1.D0-2.D0*L2)*GEOM(4,
     *     1) + (4.D0*L2-3.D0)*GEOM(5,1)
      DYDL = (4.D0*L2-1.D0)*GEOM(3,2) + 4.D0*(1.D0-2.D0*L2)*GEOM(4,
     *     2) + (4.D0*L2-3.D0)*GEOM(5,2)
      GO TO 1140
 1090 L3 = 1.D0/3.D0*(1.D0-XI+DSQRT(3.D0)*ETA)
C+++++
C     CODE FOR 10-NODE TRIANGLE
C
      DXDL = (4.D0*L3-3.D0)*GEOM(1,1) + (4.D0*L3-1.D0)*GEOM(5,1) +
     *     4.D0*(1.D0-2.D0*L3)*GEOM(6,1)
      DYDL = (4.D0*L3-3.D0)*GEOM(1,2) + (4.D0*L3-1.D0)*GEOM(5,2) +
     *     4.D0*(1.D0-2.D0*L3)*GEOM(6,2)
      GO TO 1140
 1100 GO TO (1110, 1120, 1130), SIDNUM
 1110 L1 = 1.D0/3.D0*(1.D0+2.D0*XI)
      L2 = 1.D0 - L1
      T1 = 1.D0/2.D0*(27.D0*L1*L1-14.D0*L2+2.D0)
      T2 = 9.D0/2.D0*(3.D0*L1*L1+6.D0*L1*L2-L1-L2)
      T3 = 9.D0/2.D0*(3.D0*L2*L2+6.D0*L1*L2-L1-L2)
      T4 = 1.D0/2.D0*(27*L2*L2-14.D0*L2+2.D0)
      DXDL = T1*GEOM(1,1) + T2*GEOM(2,1) + T3*GEOM(4,1) +
     *     T4*GEOM(4,1)
      DYDL = T1*GEOM(1,2) + T2*GEOM(2,2) + T3*GEOM(4,2) +
     *     T4*GEOM(4,2)
      GO TO 1140
 1120 L2 = 1.D0/3.D0*(1.D0-XI-DSQRT(3.D0)*ETA)
      L3 = 1.D0 - L2
      T1 = 1.D0/2.D0*(27.D0*L2*L2-14.D0*L2+2.D0)
      T2 = 9.D0/2.D0*(3.D0*L2*L2+6.D0*L2*L3-L2-L3)
      T3 = 9.D0/2.D0*(3.D0*L3*L3+6.D0*L2*L3-L2-L3)
      T4 = 1.D0/2.D0*(27.D0*L3*L3-14.D0*L3+2.D0)
      DXDL = T1*GEOM(4,1) + T2*GEOM(5,1) + T3*GEOM(6,1) +
     *     T4*GEOM(7,1)
      DXDL = T1*GEOM(4,2) + T2*GEOM(5,2) + T3*GEOM(6,2) +
     *     T4*GEOM(7,2)
      GO TO 1140
 1130 L3 = 1.D0/3.D0*(1.D0-XI+DSQRT(3.D0)*ETA)
      L1 = 1.D0 - L3
      T1 = 1.D0/2.D0*(27.D0*L1*L1-14.D0*L1+2.D0)
      T2 = 1.D0/2.D0*(27.D0*L3*L3-14.D0*L3+2.D0)
      T3 = 9.D0/2.D0*(3.D0*L3*L3+6.D0*L1*L3-L1-L3)
      T4 = 9.D0/2.D0*(3.D0*L1*L1+6.D0*L1*L3-L1-L3)
C+++++
C     DO THE CALCULATION
C
      DXDL = T1*GEOM(1,1) + T2*GEOM(7,1) + T3*GEOM(8,1) +
     *     T4*GEOM(9,1)
      DXDL = T1*GEOM(1,2) + T2*GEOM(7,2) + T3*GEOM(8,2) +
     *     T4*GEOM(9,2)
 1140 ALEN = DSQRT(DXDL**2+DYDL**2)
      RETURN
      END
C***********************************************************************
C$SPLIT$PRTGEO$*********************************************************
C***********************************************************************
      SUBROUTINE PRTGEO(TOTNOD, DIMEN, COORD, ICOORD, JCOORD,
     *     NOUT, ITEST)
C-----------------------------------------------------------------------
C PURPOSE
C      PRINTS OUT ELEMENT GEOMETRY IN A STANDARD FORMAT
C
C HISTORY
C      RELEASE 1.1  29 OCT 1979 (CG) --- SERC COPYRIGHT
C      COMMENTED    14 OCT 1980 (KR)
C
C ARGUMENTS IN
C      TOTNOD  TOTAL NUMBER OF NODES IN THE MESH
C      DIMEN   DIMENSIONALITY OF THE GEOMETRIC DATA
C      COORD   ARRAY OF DIMENSION (ICOORD,JCOORD) CONTAINING
C              GLOBAL COORDINATES OF THE NODES
C      ICOORD  FIRST DIMENSION OF COORD (.GE.TOTNOD)
C      JCOORD  SECOND DIMENSION OF COORD (.GE.DIMEN)
C      NOUT    FORTRAN UNIT NUMBER
C      ITEST   ERROR CHECKING OPTION
C
C ROUTINES CALLED
C      ERRMES
C
C
C     SUBROUTINE PRTGEO(TOTNOD,DIMEN,COORD,ICOORD,JCOORD,ITEST)
C***********************************************************************
C
      INTEGER TOTNOD, DIMEN, ICOORD, JCOORD, ITEST, NOUT, ERRMES,
     *     IERROR
      INTEGER I, J
      DOUBLE PRECISION COORD, SRNAME
      DIMENSION COORD(ICOORD,JCOORD)
      DATA SRNAME /8H PRTGEO /
                        IF (ITEST.EQ.-1) GO TO 1010
                        IERROR = 0
                        IF (ICOORD.LT.TOTNOD .OR. JCOORD.LT.DIMEN)
     *                      IERROR = 2
                        IF (TOTNOD.LE.0 .OR. DIMEN.LE.0)
     *                      IERROR = 1
                        ITEST = ERRMES(IERROR,ITEST,SRNAME)
                        IF (ITEST.NE.0) RETURN
 1010 WRITE (NOUT,9010)
      WRITE (NOUT,9020) TOTNOD
      WRITE (NOUT,9030) DIMEN
      IF (DIMEN.EQ.1) WRITE (NOUT,9040)
      IF (DIMEN.EQ.2) WRITE (NOUT,9050)
      IF (DIMEN.EQ.3) WRITE (NOUT,9060)
      IF (DIMEN.EQ.4) WRITE (NOUT,9070)
      DO 1020 I=1,TOTNOD
      WRITE (NOUT,9080) I, (COORD(I,J),J=1,DIMEN)
 1020 CONTINUE
      RETURN
 9010 FORMAT (1H ////25H **** NODAL GEOMETRY ****//1H )
 9020 FORMAT (19H NUMBER OF NODES = , I3)
 9030 FORMAT (19H DIMENSIONS      = , I3)
 9040 FORMAT (/1H , 2X, 4HNODE, 9X, 2HX1/1H )
 9050 FORMAT (/1H , 2X, 4HNODE, 9X, 2HX1, 12X, 2HX2/1H )
 9060 FORMAT (/1H , 2X, 4HNODE, 9X, 2HX1, 12X, 2HX2, 12X, 2HX3/1H )
 9070 FORMAT (/1H , 2X, 4HNODE, 9X, 2HX1, 12X, 2HX2, 12X, 2HX3,
     *     12X, 2HX4/1H )
 9080 FORMAT (1H , 2X, I3, 5X, 4(D12.4, 2X))
      END
