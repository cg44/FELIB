      SUBROUTINE LANCZ1(N,EL,ER,ACC,LEIG,LX,LALFA,LP,ITAPE,
     +                  IFLAG,U,V,
     +                  EIG,JEIG,NEIG,
     +                  X,DEL,NU,ALFA,BETA)
C USE THE LANCZOS ALGORITHM TO FIND THE SPECTRUM OF A SYMMETRIC MATRIX
C     OR THAT PART OF THE SPECTRUM THAT LIES IN A GIVEN INTERVAL. THIS
C     VERSION RETURNS INFORMATION FOR LATER CALCULATION OF EIGENVECTORS
C     BY LANCZ2.
C  STANDARD FORTRAN 66 (A VERIFIED PFORT SUBROUTINE)
      REAL             EL,ER,ACC,U(N),V(N),EIG(LEIG),X(LX),DEL(LX),
     +                 ALFA(LALFA),BETA(LALFA)
      INTEGER NU(LX),JEIG(2,LEIG)
C
C N MUST BE SET TO THE MATRIX ORDER. IT IS NOT ALTERED.
C EL,ER MUST BE SET TO INDICATE THE RANGE WITHIN WHICH THE SPECTRUM
C     IS WANTED. IF EL.GE.ER THEN IT IS ASSUMED THAT THE WHOLE SPECTRUM
C     IS WANTED.THEY ARE NOT ALTERED.
C ACC MUST BE SET TO THE REQUIRED PRECISION, RELATIVE TO THE LARGEST
C     EIGENVALUE OF A. IF IT IS VERY SMALL OR NEGATIVE THEN AS MUCH
C     ACCURACY AS THE PRECISION ALLOWS WILL BE FOUND. IT IS NOT ALTERED.
C LEIG MUST BE SET TO LENGTH OF ARRAY EIG. IT MUST BE AS LARGE AS THE
C     NUMBER OF DISTINCT EIGENVALUES IN THE RANGE (EL,ER). IT IS NOT
C     ALTERED.
C LX MUST BE SET TO THE LENGTH OF ARRAYS X,DEL,NU. A VALUE THREE TIMES
C     NUMBER OF DISTINCT EIGENVALUES IN THE RANGE (EL,ER) USUALLY
C     SUFFICES. IT IS NOT ALTERED.
C LALFA MUST BE SET TO THE LENGTH OF ARRAYS ALFA AND BETA. IT LIMITS
C      THE NUMBER OF LANCZOS STEPS POSSIBLE. IT IS NOT ALTERED.
C LP MUST BE SET TO THE UNIT NUMBER FOR DIAGNOSTIC MESSAGES. IF LP.LE.0
C     THE MESSAGES ARE SUPPRESSED. IT IS NOT ALTERED.
C ITAPE MUST BE SET TO THE UNIT NUMBER OF A SEQUENTIAL FILE IF
C     EIGENVECTORS ARE WANTED FROM LANCZ2 OR NON-POSITIVE IF THEY ARE
C     NOT WANTED. IT IS NOT ALTERED.
C IFLAG MUST BE SET PRIOR TO THE FIRST CALL FOR A PARTICULAR MATRIX TO
C       -1 IF THE USER DOES NOT WANT TO SPECIFY A START VECTOR, OR
C       -2 IF THE USER HAS PLACED A REQUIRED START VECTOR IN V.
C     IT SHOULD NOT OTHERWISE BE CHANGED.
C     ON RETURN IT HAS THE VALUE
C       0 ON SUCCESSFUL COMPLETION
C       1 ON A INTERMEDIATE RETURN
C       2,3,...,7 ON ERROR CONDITIONS
C U,V HOLD THE WORKING VECTORS OF THE LANCZOS RECURRENCE. ON A RETURN
C     WITH IFLAG=1 THE USED MUST ADD TO U THE VECTOR A*V WITHOUT
C     ALTERING V.
C EIG NEED NOT BE SET BY THE USER. ON ANY RETURN IT CONTAINS NEIG
C     COMPUTED EIGENVALUES, STORED IN INCREASING ORDER.
C JEIG NEED NOT BE SET BY THE USER. ON RETURN JEIG(1,I) CONTAINS THE
C     LANCZOS STEP AT WHICH EIG(I) WAS ACCEPTED AND JEIG(2,I) CONTAINS
C     THE MATCHING POINT FOR THE RECURRENCES TO GET THE EIGENVECTOR.
C NEIG NEED NOT BE SET BY THE USER. ON ANY RETURN IT CONTAINS THE NUMBER
C     OF EIGENVALUES IN EIG.
C X IS USED FOR A WORK ARRAY.  X(1).LT.X(2).LT.X(3).LT. ... ARE POINTS
C     APPROXIMATING EIGENVALUES OF A.
C DEL IS USED AS A WORKARRAY.  DEL(I),I=1,2,3,... CONTAIN THE LAST PIVOT
C     IN THE LU FACTORIZATION OF T-LAMDA*I, WHERE T IS THE LANCZOS
C     TRIDIAGONAL MATRIX, I IS THE IDENTITY MATRIX AND LAMDA=X(I).
C NU IS USED AS A WORKARRAY.  IABS(NU(I))-1,I=1,2,3,... CONTAIN THE
C     NUMBER OF NEGATIVE PIVOTS IN THE LU FACTORIZATION OF T-LAMDA*I,
C     LAMDA=X(I). FIXED INTERVALS X(I),X(I+1)  ABOUT CONVERGED
C     EIGENVALUES ARE FLAGGED BY NEGATIVE VALUES OF NU(I).
C ALFA AND BETA ARE USED AS WORKARRAYS HOLDING THE LANCZOS TRIDIAGONAL
C     MATRIX T. BETA(1)=0.  AND A TYPICAL ROW IS
C         BETA(I)     ALFA(I)     BETA(I+1)
C
      REAL             DRELPR,VV,UU,ALF,BET,VI,TOL,BE2,OLDEL,
     +            OLDER,DR,XMID,XA,XC,FA,FC,TEM,DEN,PI,SIG,
     +            TAU,DISC,XAV,POLE,RITZ,XL,XR,DIFF
     +            ,ERR,BND,T,TOLC,W,XLI,XRI,EN
      COMMON/EA15BD/ANORM,OLDEL,OLDER,TOLC,KX,MAXRZ,MAXRZO,NLAN,MLAN
     +            ,NXTBND
C COMMON BLOCK EA15BD CONTAINS THE FOLLOWING QUANTITIES,
C     WHICH ARE REQUIRED TO BE PRESERVED BETWEEN ENTRIES:
C   ANORM IS A ESTIMATE OF THE NORM OF THE MATRIX A, BASED
C      ON A GERSHGORIN BOUND APPLIED TO T.
C   OLDEL,OLDER ARE THE VALUES OF EL,ER ON THE PREVIOUS ENTRY.
C   TOLC IS THE TOLERANCE FOR AGREEMENT BETWEEN SUCESSIVE RITZ
C      VALUES THAT DECIDES WHETHER TO CALL THE ERROR BOUNDING ROUTINE
C      EA15CD (BUT SEE ALSO NXTBND)
C   KX IS THE NUMBER OF POINTS CURRENTLY STORED IN X, WITH ASSOCIATED
C      INFORMATION IN DEL AND NU.
C   MAXRZ IS THE MAXIMAL NUMBER OF RITZ VALUES IN A GAP BETWEEN
C      FIXED INTERVALS.
C   MAXRZO IS THE PREVIOUS VALUE OF MAXRZ
C   NLAN IS THE NUMBER OF LANCZOS STEPS PERFORMED. ALFA(I)<
C      BETA(I),I=1,2,...,NLAN HAVE BEEN SET.
C   MLAN IS THE ORDER OF TRIDIAGONAL MATRIX SO FAR USED FOR THIS
C      INTERVAL OF THE SPECTRUM.
C   NXTBND IS USED TO DELAY ERROR BOUNDING WHEN TOLC IS AT ROUNDOFF
C      ERROR LEVEL. EA15CD IS NOT CALLED UNTIL WE ARE LOOKING
C      AT THE TRIDIAGONAL MATRIX OF ORDER NXTBND.
      REAL             ZERO,ONE,TWO,HALF,THREE
C DRELPR IS THE RELATIVE PRECISION
      DATA DRELPR/2.2E-16/, ZERO/0.0E0/, ONE/1.0E0/, TWO/2.0E0/
CRAY  DATA DRELPR/1.4E-14/, ZERO/0.0E0/, ONE/1.0E0/, TWO/2.0E0/
CIBM  DATA DRELPR/2.2E-16/, ZERO/0.0E0/, ONE/1.0E0/, TWO/2.0E0/
      DATA HALF/0.5E0/, THREE/3.0E0/
      EN=FLOAT(N)
      IF(N.LE.0 .OR. LX.LE.5 .OR. LALFA.LE.0)GO TO 950
      IF(IFLAG.EQ.1)GO TO 35
      VV=ZERO
      NXTBND=0
      IF(IFLAG.EQ.-2)GO TO 5
      IF(IFLAG.EQ.-1)GO TO 15
      IF(IFLAG.EQ.0)GO TO 70
      GO TO 970
C
C FIND THE NORM OF THE USER~S START VECTOR.
    5 DO 10 I=1,N
      VV=VV+V(I)**2
   10 CONTINUE
      IF(VV.GT.ZERO)GO TO 25
C
C GENERATE PSEUDO-RANDOM START VECTOR
   15 G=1431655765.E0
      DO 20 I=1,N
      G=AMOD(G*9228907.E0,4294967296.E0)
      IF(I.GE.0)FA01AS=G/4294967296.E0
      IF(I.LT.0)FA01AS=2.E0*G/4294967296.E0-1.E0
      V(I)=FA01AS
      VV=VV+V(I)**2
   20 CONTINUE
C
C NORMALIZE START VECTOR AND PERFORM INITIALIZATIONS
   25 VV=ONE/ SQRT(VV)
      DO 30 I=1,N
      V(I)=V(I)*VV
      U(I)=ZERO
   30 CONTINUE
      NLAN=0
      ANORM=ZERO
      BETA(1)=ZERO
      NEIG=0
      GO TO 912
C
C PERFORM A LANCZOS STEP
   35 NLAN=NLAN+1
      CALL EA15FD(N,ITAPE,NLAN,1,V)
      IF(NLAN.GE.LALFA)GO TO 940
      ALF=ZERO
      DO 40 I=1,N
      ALF=ALF+U(I)*V(I)
   40 CONTINUE
      ALFA(NLAN)=ALF
      UU=ZERO
      DO 50 I=1,N
      U(I)=U(I)-ALF*V(I)
      UU=UU+U(I)**2
   50 CONTINUE
      UU= SQRT(UU)
      BET=BETA(NLAN)
      ANORM=AMAX1(ANORM,BET+ ABS(ALF)+UU)
      BET=AMAX1(UU,ANORM*DRELPR)
      UU=ONE/BET
      BETA(NLAN+1)=BET
      DO 60 I=1,N
      VI=U(I)*UU
      U(I)=-BET*V(I)
      V(I)=VI
   60 CONTINUE
C
C THIS IS THE BEGINNING OF THE LOOP THAT ANALYSES T
C NORMALLY WE ADVANCE THE ANALYSIS OF T BY ONE ROW, BUT THE
C     USER MAY HAVE REQUESTED A RESTART
   70 JLAN1=NLAN
      IF(OLDEL.EQ.EL .AND. OLDER.EQ.ER .AND. IFLAG.EQ.1)GO TO 71
      JLAN1=1
      NEIG=0
   71 DO 910 JLAN=JLAN1,NLAN
      MLAN=JLAN
      IF(JLAN-2)73,76,85
C
C JLAN=1. CHECK FOR THE TRIVIAL CASE.
   73 EIG(1)=ALFA(1)
      JEIG(1,1)=JLAN
      JEIG(2,1)=JLAN
      IF(BETA(2).GT.DRELPR*ANORM)GO TO 910
      IF(EL.GE.ER .OR. (EL.LE.EIG(1) .AND. EIG(1).LE.ER))NEIG=1
      GO TO 960
C
C JLAN=2. SET UP FOUR POINTS THAT SPAN AND SEPARATE  THE
C     THREE RITZ VALUES AT LEVELS 1 AND 2
   76 W=HALF* ABS(ALFA(1)-ALFA(2))
      T= SQRT(W*W+BETA(2)**2)
      X(2)=HALF*(ALFA(1)+ALFA(2)-T-W)
      X(3)=X(2)+T+W
      X(1)=X(2)+W-1.1*T
      X(4)=X(3)-W+1.1*T
      DO 80 L=1,4
      DEL(L)=ALFA(2)-X(L)-BETA(2)**2/(ALFA(1)-X(L))
      NU(L)=L-(L-1)/2
   80 CONTINUE
      KX=4
      MAXRZ=2
      MAXRZO=1
      IF(X(1).LT.X(2) .AND. X(3).LT.X(4))GO TO 910
      EIG(1)=(ALFA(1)+ALFA(2))*HALF
      JEIG(1,1)=JLAN
      JEIG(2,1)=JLAN
      NEIG=1
      GO TO 960
C
C JLAN.GT.2
C
C ADD OR REMOVE POINTS TO THE RIGHT, IF APPROPRIATE
   85 NUK=JLAN-1
      IF(EL.GE.ER)GO TO 100
C FIND INTERVAL (X(K-1),X(K)) CONTAINING ER
      DO 92 I=2,KX
      K=2+KX-I
      IF(X(K-1).LE.ER)GO TO 95
   92 CONTINUE
      K=1
   95 NUK=MIN0(IABS(NU(K)),JLAN-1)
C LOOK FOR POINT WITH NU VALUE AT LEAST 2 GREATER THAN ANY IN INTERVAL
C     CONTAINING ER
      DO 97 I=K,KX
      IF(IABS(NU(I)).GT.NUK+1)GO TO 98
   97 CONTINUE
      GO TO 100
C  REDUCE KX TO GET RID OF UNNECESSARY POINTS
   98 KX=I
      GO TO 110
C IF NECESSARY ADD EXTRA POINTS TO RIGHT
  100 DO 105 IDUMMY=1,LX
      IF(IABS(NU(KX-1)).GT.NUK)GO TO 110
      IF(KX.GE.LX)GO TO 930
      KX=KX+1
      X(KX)=X(KX-1)*THREE-X(KX-2)*TWO
      CALL EA15DD(JLAN-1,ALFA,BETA,X(KX),DEL(KX),NU(KX),DR,NUR)
  105  CONTINUE
C
C COPY INFORMATION TO ENDS OF ARRAYS X,DEL,NU. IF ANY
C     GAP BETWEEN FIXED INTERVALS CONTAINS NO RITZ VALUES,
C     REMOVE ALL POINTS IN THAT GAP
  110 LFP=LX
C LFP IS THE LAST LEFT-END OF A FIXED INTERVAL
      M=LX
      DO 140 IDUMMY=1,LX
      IF(NU(KX-1).GE.0)GO TO 130
      IF(NU(KX).EQ.IABS(NU(LFP)))M=LFP-1
      LFP=M-1
  130 X(M)=X(KX)
      DEL(M)=DEL(KX)
      NU(M)=NU(KX)
      KX=KX-1
      M=M-1
      IF(KX.EQ.1)GO TO 150
  140 CONTINUE
  150 X(M)=X(1)
      DEL(M)=DEL(1)
      NU(M)=NU(1)
C
C ADD OR REMOVE POINTS TO THE LEFT, IF APPROPRIATE
      NUK=2
      IF(EL.GE.ER)GO TO 175
C FIND INTERVAL (X(K-1),X(K)) CONTAINING EL
      M1=M+1
      DO 155 K=M1,LX
      IF(X(K).GE.EL)GO TO 160
  155 CONTINUE
      K=LX+1
  160 NUK=MAX0(IABS(NU(K-1)),2)
C LOOK FOR POINT WITH NU VALUE AT LEAST 2 LESS THAN ANY IN INTERVAL
C     CONTAINING EL
      DO 165 J=M1,K
      I=M+K-J
      IF(IABS(NU(I)).LT.NUK-1)GO TO 170
  165 CONTINUE
      GO TO 175
C INCREASE M TO GET RID OF UNNECESSARY POINTS
  170 M=I
      GO TO 190
C IF NECESSARY, ADD EXTRA POINTS TO LEFT
  175 DO 180 IDUMMY=1,LX
      IF(IABS(NU(M+1)).LT.NUK)GO TO 190
      IF(M.EQ.3)GO TO 930
      M=M-1
      X(M)=THREE*X(M+1)-TWO*X(M+2)
      CALL EA15DD(JLAN-1,ALFA,BETA,X(M),DEL(M),NU(M),DR,NUR)
  180 CONTINUE
  190 K=3
      IF(M.LE.5)GO TO 930
      XRI=X(M)
      ALF=ALFA(JLAN)
      BET=BETA(JLAN)
      BE2=BET**2
C TOL HOLDS THE RADIUS OF FIXED INTERVALS SET UP AROUND CONVERGED
C     EIGENVALUES.
      TOL=AMAX1(ACC,EN*TWO*DRELPR)*ANORM
C TOLC IS THE TOLERANCE USED FOR ACCEPTING EIGENVALUES.
      IF(JLAN.LT.10)TOLC=AMAX1(TOL**2*EN/ANORM,ANORM*DRELPR*5.)
C MOVE LEADING THREE POINTS TO BEGINNING OF STORE AND UPDATE
C     ASSOCIATED DATA.
      M=M-1
      DO 210 I=1,3
      M=M+1
      X(I)=X(M)
      NU(I)=NU(M)
      DEL(I)=ALF-X(M)-BE2/DEL(M)
      IF(DEL(I))195,200,210
  195 NU(I)=NU(I)+ISIGN(1,NU(I))
      GO TO 210
  200 DEL(I)=DRELPR*ANORM
  210 CONTINUE
C
C PROCESS THE POINTS FROM LEFT TO RIGHT. THE CURRENT INTERVAL
C     IS (X(K-1),X(K))=(X(M-1),X(M)), K.LT.M-2.
C NU(I),DEL(I),I=1,2,...,K HOLD NEW VALUES OF NU,DELTA.
C NU(I),DEL(I),I=M-2,M-1,...,LX HOLD OLD VALUES.
      NE=1
C NE NORMALLY HOLDS THE NUMBER OF EMPTY INTERVALS ADJACENT ON THE
C     LEFT OF THE CURRENT INTERVAL.
      LFP=1
C LFP POINTS TO THE LAST FIXED POINT ENCOUNTERED.
C      DO 530 UNTIL M.EQ.LX
  220 IF(M.GE.LX)GO TO 600
      IF(NU(K-1).GE.0)GO TO 240
C WE HAVE A FIXED INTERVAL
      IF(IABS(NU(K-1)).EQ.IABS(NU(K)))GO TO 230
C ACCEPT FIXED INTERVAL
      LFP=K
      GO TO 500
C FIXED INTERVAL NO LONGER CONTAINS RITZ VALUE. FREE IT.
  230 NU(K-1)=IABS(NU(K-1))
      DO 235 I=1,NEIG
      IF(EIG(I).LE.X(K))GO TO 235
      EIG(I-1)=EIG(I)
      JEIG(1,I-1)=JEIG(1,I)
      JEIG(2,I-1)=JEIG(2,I)
  235 CONTINUE
      NEIG=NEIG-1
  240 IF(NU(K-1).LT.IABS(NU(K)))GO TO 250
C CURRENT INTERVAL CONTAINS NO RITZ VALUE.
      NE=NE+1
      IF(NE.LE.3)GO TO 502
C THERE ARE FOUR ADJACENT EMPTY INTERVALS. REMOVE MIDDLE POINT.
      X(K-2)=X(K-1)
      NU(K-2)=NU(K-1)
      DEL(K-2)=DEL(K-1)
      X(K-1)=X(K)
      NU(K-1)=NU(K)
      DEL(K-1)=DEL(K)
      NE=3
      K=K-1
      GO TO 502
  250 IF(IABS(NU(M-1)).EQ.IABS(NU(M)))GO TO 500
C
C INTERVAL IS ~INTERESTING~. IT CONTAINS AT LEAST ONE NEW AND
C     AT LEAST ONE OLD RITZ VALUE.
C JUMP IF INTERVAL IS A GAP BETWEEN FIXED INTERVALS,
C     AND CONTAINS JUST ONE RITZ VALUE, UNLESS THIS IS THE
C     FIRST TIME THAT ALL SUCH GAPS HAVE LESS THAN TWO
C     RITZ VALUES.
      IF(MAXRZ.LE.1 .AND. MAXRZO.GT.1)GO TO 252
      IF(NU(K-1)+NU(K).EQ.-1)GO TO 500
  252 XMID=(X(M-1)+X(M))*HALF
C BISECT IF INTERVAL CONTAINS MORE THAN ONE RITZ VALUE.
      RITZ=XMID
      IF(IABS(NU(K)).GT.NU(K-1)+1)GO TO 275
C CHECK WHETHER PROGRESS IS SO SLOW THAT BISECTION IS NEEDED
C     THE CRITERION IS THAT THREE STEPS HAVE BEEN TAKEN WITHOUT
C     REDUCING THE INTERVAL LENGTH BY AT LEAST THE FACTOR 0.6.
C     (XLI,XRI) IS THE ORIGINAL INTERVAL OF INTEREST OR THE
C     INTERVAL OF INTEREST WHEN IT WAS LAST REDUCED IN LENGTH
C      BY AT LEAST THE FACTOR 0.6
      IF(X(K-1).GE.XRI)GO TO 255
      IF(X(K)-X(K-1).GE.0.6*(XRI-XLI))GO TO 257
  255 NXTR=0
      XRI=X(K-1)
      XLI=X(K)
C BISECT IF PROGRESS ON THIS INTERVAL IS SLOW
  257 IF(NXTR.GE.2)GO TO 275
      NXTR=NXTR+1
C ESTIMATE POSITION (POLE) OF OLD RITZ VALUE BY 2-1 RATIONAL
C     INTERPOLATION AT X(L-1), X(L), X(L+1)
C CHOOSE L SO THAT EXTRA POINT IS NEAR
      L=M
      IF(XMID-X(M-2).LT.X(M+1)-XMID)L=M-1
      XA=X(L-1)-X(L)
      XC=X(L+1)-X(L)
      FA=XA*(XA+DEL(L-1))
      FC=XC*(XC+DEL(L+1))
      TEM=XA/(XA-XC)
      DEN=DEL(L)-DEL(L-1)-TEM*(DEL(L+1)-DEL(L-1))
      IF(DEN.EQ.ZERO)GO TO 275
      PI=(TEM*(FA-FC)-FA)/DEN
      SIG=HALF*((FC-FA)-PI*(DEL(L+1)-DEL(L-1)))/(XC-XA)
      TAU=FA-TWO*XA*SIG-DEL(L-1)*PI
      DISC=SIG**2+TAU
      IF(DISC.LT.ZERO)GO TO 275
      XAV=SIG+ SIGN( SQRT(DISC),SIG)
      POLE=-TAU/XAV
C JUMP IF POLE IS IN REQUIRED INTERVAL
      IF( ABS(POLE+X(L)-XMID).LE.X(M)-XMID)GO TO 260
C TRY OTHER ROOT.
      POLE=XAV
      IF( ABS(POLE+X(L)-XMID).GT.X(M)-XMID)GO TO 275
C ESTIMATE POSITION (RITZ) OF RITZ VALUE BY 2-1 RATIONAL
C     INTERPOLATION AT X(K-1),X(K) USING (X-POLE) FOR
C     DENOMINATOR.
  260 IF(L.NE.M)GO TO 265
      TAU=-POLE*DEL(K)
      SIG=XA+((XA-POLE)*DEL(K-1)-TAU)/XA
      GO TO 270
  265 TAU=-POLE*DEL(K-1)
      SIG=XC+((XC-POLE)*DEL(K)-TAU)/XC
  270 SIG=SIG*HALF
      DISC=SIG**2+TAU
      IF(DISC.LT.ZERO)GO TO 275
      XAV=SIG+ SIGN( SQRT(DISC),SIG)
      TAU=-TAU/XAV
      IF( ABS(TAU+X(L)-XMID).LE.X(M)-XMID)GO TO 280
      TAU=XAV
      IF( ABS(TAU+X(L)-XMID).LE.X(M)-XMID)GO TO 280
C CALCULATION HAS FAILED
C IF THIRD POINT IS JUST OUTSIDE CURRENT INTERVAL THEN TAKE
C     POINT TWICE AS FAR INSIDE INTERVAL. OTHERWISE BISECT.
  275 RITZ=XMID
      POLE=XMID
      IF(X(M)-X(M-1).LE.TOLC)GO TO 300
      GO TO 490
  280 RITZ=X(L)+TAU
      DIFF= ABS(TAU-POLE)
      POLE=X(L)+POLE
      IF( ABS(TAU).GE.50.*AMAX1(DIFF,TOLC))GO TO 480
      IF(DIFF.GT.TOLC)GO TO 500
C WE MAY HAVE A CONVERGED EIGENVALUE
  300 IF(JLAN.LT.NXTBND)GO TO 500
      CALL EA15CD(JLAN,LALFA,ALFA,BETA,RITZ,
     +            ANORM*DRELPR*EN,ERR,BND,MATCH)
      IF(BND.LT.ERR*0.1)TOLC=DIFF*(TOL/ERR)**2
      IF(TOLC.GT.ANORM*DRELPR*5.0)GO TO 305
      TOLC=ANORM*DRELPR*5.0
C TOLC HAS BECOME TOO SMALL TO GIVE GOOD CRITERION FOR CALLING EA15CD.
C    DO NOT CALL EA15CD AGAIN UNTIL 1% MORE STEPS PERFORMED.
      NXTBND=JLAN+JLAN/100
  305 IF(ERR.LE.TOL)GO TO 310
      IF(BND.GT.ERR*0.1 .AND. X(M-1).LT.RITZ .AND. RITZ.LT.X(M))
     + GO TO 480
      GO TO 500
C
C WE HAVE AN ACCEPTED POINT
C TEST WHETHER (RITZ-ERR,RITZ+ERR) OVERLAPS A FIXED INTERVAL
  310 IF(RITZ-ERR.LT.X(LFP) .AND. LFP.GT.1)GO TO 500
      DO 410 I=M,LX
      IF(X(I).GT.RITZ+ERR)GO TO 420
      IF(NU(I).LT.0)GO TO 500
  410 CONTINUE
C SET UP NEW FIXED INTERVAL
  420 XL=RITZ-TOL
      IF(XL.LE.X(LFP))GO TO 450
C REMOVE POINTS IN INTERVAL (XL,RITZ)
      DO 430 IDUMMY=1,LX
      IF(X(K-1).LT.XL)GO TO 440
      K=K-1
  430 CONTINUE
  440 X(K)=XL
      CALL EA15DD(JLAN,ALFA,BETA,XL,DEL(K),NU(K),DR,NUR)
      GO TO 455
  450 K=LFP
  455 NU(K)=-NU(K)
      XR=RITZ+TOL
C REMOVE POINTS IN INTERVAL (RITZ,XR)
      I=M
      DO 460 M=I,LX
      IF(X(M).GT.XR)GO TO 470
      IF(NU(M).LT.0)GO TO 473
  460 CONTINUE
      M=LX+1
  470 M=M-1
      X(M)=XR
      CALL EA15DD(JLAN-1,ALFA,BETA,X(M),DEL(M),NU(M),DR,NUR)
  473 NFIX=NFIX+1
      IF(NEIG.GE.LEIG)GO TO 920
      IF(EL.GE.ER)GO TO 474
      IF(RITZ.LT.EL .OR. RITZ.GT.ER)GO TO 478
  474 I=NEIG
      IF(NEIG.LE.0)GO TO 477
      DO 475 J=1,NEIG
      IF(EIG(I).LT.RITZ)GO TO 477
      EIG(I+1)=EIG(I)
      JEIG(1,I+1)=JEIG(1,I)
      JEIG(2,I+1)=JEIG(2,I)
      I=I-1
  475 CONTINUE
  477 EIG(I+1)=RITZ
      JEIG(1,I+1)=JLAN
      JEIG(2,I+1)=MATCH
      NEIG=NEIG+1
  478 IF(M.GT.K+2)GO TO 505
      GO TO 930
C EXTRAPOLATE TO ESTIMATE POSITION OF EIGENVALUE
  480 RITZ=RITZ+RITZ-POLE
      RITZ=AMAX1(RITZ,X(M-1)+(X(M)-X(M-1))*0.01)
      RITZ=AMIN1(RITZ,X(M)-(X(M)-X(M-1))*0.01)
C INSERT NEW POINT
  490 IF(K.GE.M-3)GO TO 930
      M=M-1
      X(M-2)=X(M-1)
      DEL(M-2)=DEL(M-1)
      NU(M-2)=NU(M-1)
      X(M-1)=X(M)
      DEL(M-1)=DEL(M)
      NU(M-1)=NU(M)
      X(M)=RITZ
      X(K)=RITZ
      CALL EA15DD(JLAN,ALFA,BETA,RITZ,DEL(K),NU(K),DR,NUR)
      DEL(M)=DR
      NU(M)=NUR
      GO TO 530
C INTERVAL IS ACCEPTABLE. ADVANCE BY ONE POINT
  500 NE=0
  502 M=M+1
  505 K=K+1
      X(K)=X(M)
      DEL(K)=ALF-X(K)-BE2/DEL(M)
      NU(K)=NU(M)
      IF(DEL(K))510,520,530
  510 NU(K)=NU(K)+ISIGN(1,NU(K))
      GO TO 530
  520 DEL(K)=DRELPR*ANORM
  530 GO TO 220
C
C SCAN TO FIND THE MAXIMUM NUMBER OF RITZ VALUES (MAXRZ) IN A GAP
C     BETWEEN FIXED INTERVALS, THE NUMBER OF GAPS CONTAINING CANDIDATES
C     THAT ARE BEING WATCHED (NCAND) AND THE NUMBER OF FIXED INTERVALS
C     (NFIX).
  600 KX=K
      NCAND=0
      MAXRZO=MAXRZ
      MAXRZ=0
      NFIX=0
      LFP=2
      K=K-1
      DO 710 I=1,K
      IF(NU(I).GT.0)GO TO 710
      NFIX=NFIX+1
      NRITZ=IABS(NU(I))-IABS(NU(LFP))
      MAXRZ=MAX0(MAXRZ,NRITZ)
      IF(NRITZ.GT.0 .AND. I.GT.LFP+1)NCAND=NCAND+1
      DO 680 LFP=I,KX
      IF(NU(LFP).GT.0)GO TO 710
  680 CONTINUE
      LFP=KX
  710 CONTINUE
      NRITZ=IABS(NU(K))-IABS(NU(LFP))
      MAXRZ=MAX0(MAXRZ,NRITZ)
      IF(NRITZ.GT.0 .AND. K.GT.LFP+1)NCAND=NCAND+1
      IF(BET.LE.EN*ANORM*DRELPR)GO TO 960
      IF(MAXRZ.GT.1 .OR. NCAND.GT.0)GO TO 910
      IF(NFIX.GT.0)GO TO 915
  910 CONTINUE
C
C NORMAL RETURNS
  912 IFLAG=1
      GO TO 1000
  915 IFLAG=0
      GO TO 1000
C
C ERROR RETURNS
  920 IFLAG=2
      IF(LP.GT.0)WRITE(LP,925)LEIG
  925 FORMAT(34H ERROR RETURN 2 FROM LANCZ1. LEIG=,I6)
      GO TO 1000
  930 IFLAG=3
      IF(LP.GT.0)WRITE(LP,935)LX
  935 FORMAT(32H ERROR RETURN 3 FROM LANCZ1. LX=,I6)
      GO TO 1000
  940 IFLAG=4
      IF(LP.GT.0)WRITE(LP,945)LALFA
  945 FORMAT(35H ERROR RETURN 4 FROM LANCZ1. LALFA=,I6)
      GO TO 1000
  950 IFLAG=5
      IF(LP.GT.0)WRITE(LP,955)N,LX,LALFA
  955 FORMAT(40H ERROR RETURN 5 FROM LANCZ1. N,LX,LALFA=,3I6)
      GO TO 1000
  960 IFLAG=6
      IF(LP.GT.0)WRITE(LP,965)NEIG
  965 FORMAT(38H ERROR RETURN 6 FROM LANCZ1. PREMATURE,
     + 13H TERMINATION.,I6,18H EIGENVALUES FOUND)
      GO TO 1000
  970 IF(LP.GT.0)WRITE(LP,975)IFLAG
  975 FORMAT(46H ERROR RETURN 7 FROM LANCZ1. ON ENTRY IFLAG IS,I4)
      IFLAG=7
 1000 OLDEL=EL
      OLDER=ER
      RETURN
      END
